----------------------------------------------------------------
:::eClassifiers:::Abstraction:
		
Inherits from: #//Dependency
An abstraction is a relationship that relates two elements or sets of elements that represent the same concept at different levels of abstraction or from different viewpoints.

-eStructuralFeatures:mapping:
			
An composition of an Expression that states the abstraction relationship between the supplier and the client. In some cases, such as Derivation, it is usually formal and unidirectional; in other cases, such as Trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the elements is not specified.

----------------------------------------------------------------
:::eClassifiers:::Dependency:
		
Inherits from: #//PackageableElement #//DirectedRelationship
A dependency is a relationship that signifies that a single or a set of model elements requires other model elements for their specification or implementation. This means that the complete semantics of the depending elements is either semantically or structurally dependent on the definition of the supplier element(s).

-eStructuralFeatures:client:
			
The element(s) dependent on the supplier element(s). In some cases (such as a Trace Abstraction) the assignment of direction (that is, the designation of the client element) is at the discretion of the modeler, and is a stipulation.


-eStructuralFeatures:supplier:
			
The element(s) independent of the client element(s), in the same respect and the same dependency relationship. In some directed dependency relationships (such as Refinement Abstractions), a common convention in the domain of class-based OO software is to put the more abstract element in this role. Despite this convention, users of UML may stipulate a sense of dependency suitable for their domain, which makes a more abstract element dependent on that which is more specific.

----------------------------------------------------------------
:::eClassifiers:::PackageableElement:
		
Inherits from: #//NamedElement #//ParameterableElement
Packageable elements are able to serve as a template parameter.
A packageable element indicates a named element that may be owned directly by a package.

-contents:visibility:
			
Indicates that packageable elements must always have a visibility, i.e., visibility is not optional.

----------------------------------------------------------------
:::eClassifiers:::ParameterableElement:
		
Inherits from: #//Element
A parameterable element is an element that can be exposed as a formal template parameter for a template, or specified as an actual parameter in a binding of a template.

-eOperations:isCompatibleWith:
			
The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. Subclasses should override this operation to specify different compatibility constraints.
result = p->oclIsKindOf(self.oclType)


-eOperations:isTemplateParameter:
			
The query isTemplateParameter() determines if this parameterable element is exposed as a formal template parameter.
result = templateParameter->notEmpty()


-eStructuralFeatures:owningTemplateParameter:
			
The formal template parameter that owns this element.


-eStructuralFeatures:templateParameter:
			
The template parameter that exposes this element as a formal parameter.

----------------------------------------------------------------
:::eClassifiers:::Element:
		
Inherits from: platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EModelElement
An element is a constituent of a model. As such, it has the capability of owning other elements.

-eOperations:has_owner:
			
Elements that must be owned must have an owner.
self.mustBeOwned() implies owner->notEmpty()


-eOperations:not_own_self:
			
An element may not directly or indirectly own itself.
not self.allOwnedElements()->includes(self)


-eOperations:addKeyword:
			
Adds the specified keyword to this element.


-eOperations:applyStereotype:
			
Applies the specified stereotype to this element.


-eOperations:createEAnnotation:
			
Creates an annotation with the specified source and this element as its model element.


-eOperations:destroy:
			
Destroys this element by removing all cross references to/from it and removing it from its containing resource or object.


-eOperations:getKeywords:
			
Retrieves the keywords for this element.


-eOperations:getApplicableStereotype:
			
Retrieves the stereotype with the specified qualified name that is applicable to this element, or null if no such stereotype is applicable.


-eOperations:getApplicableStereotypes:
			
Retrieves the stereotypes that are applicable to this element, including those that are required and/or may already be applied.


-eOperations:getAppliedStereotype:
			
Retrieves the stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is  applied.


-eOperations:getAppliedStereotypes:
			
Retrieves the stereotypes that are applied to this element.


-eOperations:getAppliedSubstereotype:
			
Retrieves the substereotype of the specified stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is applied.


-eOperations:getAppliedSubstereotypes:
			
Retrieves the substereotypes of the specified stereotype that are applied to this element.


-eOperations:getModel:
			
Retrieves the model that owns (either directly or indirectly) this element.


-eOperations:getNearestPackage:
			
Retrieves the nearest package that owns (either directly or indirectly) this element, or the element itself (if it is a package).


-eOperations:getRelationships:
			
Retrieves the relationships in which this element is involved.


-eOperations:getRelationships:
			
Retrieves the relationships of the specified type in which this element is involved.


-eOperations:getRequiredStereotype:
			
Retrieves the stereotype with the specified qualified name that is required for this element, or null if no such stereotype is required.


-eOperations:getRequiredStereotypes:
			
Retrieves the stereotypes that are required for this element.


-eOperations:getSourceDirectedRelationships:
			
Retrieves the directed relationships for which this element is a source.


-eOperations:getSourceDirectedRelationships:
			
Retrieves the directed relationships of the specified type for which this element is a source.


-eOperations:getStereotypeApplication:
			
Retrieves the application of the specified stereotype for this element, or null if no such stereotype application exists.


-eOperations:getStereotypeApplications:
			
Retrieves the stereotype applications for this element.


-eOperations:getTargetDirectedRelationships:
			
Retrieves the directed relationships for which this element is a target.


-eOperations:getTargetDirectedRelationships:
			
Retrieves the directed relationships of the specified type for which this element is a target.


-eOperations:getValue:
			
Retrieves the value of the property with the specified name in the specified stereotype for this element.


-eOperations:hasKeyword:
			
Determines whether this element has the specified keyword.


-eOperations:hasValue:
			
Determines whether this element has a (non-default) value for the property with the specified name in the specified stereotype.


-eOperations:isStereotypeApplicable:
			
Determines whether the specified stereotype is applicable to this element.


-eOperations:isStereotypeApplied:
			
Determines whether the specified stereotype is applied to this element.


-eOperations:isStereotypeRequired:
			
Determines whether the specified stereotype is required for this element.


-eOperations:removeKeyword:
			
Removes the specified keyword from this element.


-eOperations:setValue:
			
Sets the value of the property with the specified name in the specified stereotype for this element.


-eOperations:unapplyStereotype:
			
Unapplies the specified stereotype from this element.


-eOperations:allOwnedElements:
			
The query allOwnedElements() gives all of the direct and indirect owned elements of an element.
result = ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))


-eOperations:mustBeOwned:
			
The query mustBeOwned() indicates whether elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.
result = true


-eStructuralFeatures:ownedComment:
			
The Comments owned by this element.


-eStructuralFeatures:ownedElement:
			
The Elements owned by this element.


-eStructuralFeatures:owner:
			
The Element that owns this element.

----------------------------------------------------------------
:::eClassifiers:::Comment:
		
Inherits from: #//Element
A comment is a textual annotation that can be attached to a set of elements.

-eStructuralFeatures:annotatedElement:
			
References the Element(s) being commented.


-eStructuralFeatures:body:
			
Specifies a string that is the comment.

----------------------------------------------------------------
:::eClassifiers:::Stereotype:
		
Inherits from: #//Class
A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.

-eOperations:associationEndOwnership:
			
Where a stereotypeâ€™s property is an association end for an association other than a kind of extension, and the other end is not a stereotype, the other end must be owned by the association itself.
ownedAttribute
->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))
->forAll(opposite.owner = association)


-eOperations:name_not_clash:
			
Stereotype names should not clash with keyword names for the extended model element.
true


-eOperations:binaryAssociationsOnly:
			
Stereotypes may only participate in binary associations.
ownedAttribute.association->forAll(memberEnd->size()=2)


-eOperations:generalize:
			
A Stereotype may only generalize or specialize another Stereotype.
generalization.general->forAll(e |e.oclIsKindOf(Stereotype)) and generalization.specific->forAll(e | e.oclIsKindOf(Stereotype)) 


-eOperations:createExtension:
			
Creates a(n) (required) extension of the specified metaclass with this stereotype.


-eOperations:createIcon:
			
Creates an icon with the specified location for this stereotype.


-eOperations:createIcon:
			
Creates an icon with the specified format and content for this stereotype.


-eOperations:getAllExtendedMetaclasses:
			
Retrieves all the metaclasses extended by this stereotype, including the metaclasses extended by its superstereotypes.


-eOperations:getDefinition:
			
Retrieves the current definition (Ecore representation) of this stereotype.


-eOperations:getExtendedMetaclasses:
			
Retrieves the metaclasses extended by this stereotype.


-eOperations:getKeyword:
			
Retrieves the localized keyword for this stereotype.


-eOperations:getKeyword:
			
Retrieves the keyword for this stereotype, localized if indicated.


-eOperations:containingProfile:
			
The query containingProfile returns the closest profile directly or indirectly containing this stereotype.
result = self.namespace.oclAsType(Package).containingProfile()


-eOperations:getProfile:
			
A stereotype must be contained, directly or indirectly, in a profile.
result = self.containingProfile()


-eStructuralFeatures:icon:
			
Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.


-eStructuralFeatures:profile:
			
The profile that directly or indirectly contains this stereotype.

----------------------------------------------------------------
:::eClassifiers:::Class:
		
Inherits from: #//EncapsulatedClassifier #//BehavioredClassifier
A class may be designated as active (i.e., each of its instances having its own thread of control) or passive (i.e., each of its instances executing within the context of some other object). A class may also specify which signals the instances of this class handle.
A class describes a set of objects that share the same specifications of features, constraints, and semantics.
A class has the capability to have an internal structure and ports.
Class has derived association that indicates how it may be extended through one or more stereotypes. Stereotype is the only kind of metaclass that cannot be extended by stereotypes.

-contents:inherit:
			
The inherit operation is overridden to exclude redefined properties.
result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))


-contents:ownedAttribute:
			
The attributes (i.e. the properties) owned by the class.


-contents:isAbstract:
			
If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.
True when a class is abstract.


-eOperations:passive_class:
			
A passive class may not own receptions.
not self.isActive implies self.ownedReception.isEmpty()


-eOperations:createOwnedOperation:
			
Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this class.


-eOperations:isMetaclass:
			
Determines whether this class is a metaclass.


-eOperations:getExtensions:
			
Missing derivation for Class::/extension : Extension
true


-eOperations:getSuperClasses:
			
Missing derivation for Class::/superClass : Class
true


-eStructuralFeatures:ownedOperation:
			
The operations owned by the class.


-eStructuralFeatures:extension:
			
References the Extensions that specify additional properties of the metaclass. The property is derived from the extensions whose memberEnds are typed by the Class.


-eStructuralFeatures:isActive:
			
Determines whether an object specified by this class is active or not. If true, then the owning class is referred to as an active class. If false, then such a class is referred to as a passive class.


-eStructuralFeatures:nestedClassifier:
			
References all the Classifiers that are defined (nested) within the Class.


-eStructuralFeatures:ownedReception:
			
Receptions that objects of this class are willing to accept.


-eStructuralFeatures:superClass:
			
This gives the superclasses of a class.

----------------------------------------------------------------
:::eClassifiers:::EncapsulatedClassifier:
		
Inherits from: #//StructuredClassifier
A classifier has the ability to own ports as specific and type checked interaction points.

-eOperations:getOwnedPorts:
			
Missing derivation for EncapsulatedClassifier::/ownedPort : Port
true


-eStructuralFeatures:ownedPort:
			
References a set of ports that an encapsulated classifier owns.

----------------------------------------------------------------
:::eClassifiers:::StructuredClassifier:
		
Inherits from: #//Classifier
A structured classifier is an abstract metaclass that represents any classifier whose behavior can be fully or partly described by the collaboration of owned or referenced instances.

-eOperations:multiplicities:
			
The multiplicities on connected elements must be consistent.
true


-eOperations:createOwnedAttribute:
			
Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this structured classifier.


-eOperations:getParts:
			
Missing derivation for StructuredClassifier::/part : Property
true


-eStructuralFeatures:ownedAttribute:
			
References the properties owned by the classifier.


-eStructuralFeatures:ownedConnector:
			
References the connectors owned by the classifier.


-eStructuralFeatures:part:
			
References the properties specifying instances that the classifier owns by composition. This association is derived, selecting those owned properties where isComposite is true.


-eStructuralFeatures:role:
			
References the roles that instances may play in this classifier.

----------------------------------------------------------------
:::eClassifiers:::Classifier:
		
Inherits from: #//Namespace #//RedefinableElement #//Type #//TemplateableElement
A classifier is a classification of instances - it describes a set of instances that have features in common. A classifier can specify a generalization hierarchy by referencing its general classifiers.
A classifier has the capability to own use cases. Although the owning classifier typically represents the subject to which the owned use cases apply, this is not necessarily the case. In principle, the same use case can be applied to multiple subjects, as identified by the subject association role of a use case.
Classifier is defined to be a kind of templateable element so that a classifier can be parameterized. It is also defined to be a kind of parameterable element so that a classifier can be a formal template parameter.
A classifier has the capability to own collaboration uses. These collaboration uses link a collaboration with the classifier to give a description of the workings of the classifier.

-contents:isTemplate:
			
The query isTemplate() returns whether this templateable element is actually a template.
result = oclAsType(TemplatableElement).isTemplate() or general->exists(g | g.isTemplate())


-contents:ownedTemplateSignature:
			
The optional template signature specifying the formal template parameters.


-contents:templateParameter:
			
The template parameter that exposes this element as a formal parameter.


-eOperations:non_final_parents:
			
The parents of a classifier must be non-final.
self.parents()->forAll(not isFinalSpecialization)


-eOperations:no_cycles_in_generalization:
			
Generalization hierarchies must be directed and acyclical. A classifier can not be both a transitively general and transitively specific classifier of the same classifier.
not self.allParents()->includes(self)


-eOperations:specialize_type:
			
A classifier may only specialize classifiers of a valid type.
self.parents()->forAll(c | self.maySpecializeType(c))


-eOperations:maps_to_generalization_set:
			
The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances also be its subclasses.
true


-eOperations:getAllAttributes:
			
Retrieves all the attributes of this classifier, including those inherited from its parents.


-eOperations:getAllOperations:
			
Retrieves all the operations of this classifier, including those inherited from its parents.


-eOperations:getAllUsedInterfaces:
			
Retrieves all the interfaces on which this classifier or any of its parents has a usage dependency.


-eOperations:getOperation:
			
Retrieves the first operation with the specified name, parameter names, and parameter types from this classifier.


-eOperations:getOperation:
			
Retrieves the first operation with the specified name, parameter names, and parameter types from this classifier, ignoring case if indicated.


-eOperations:getOperations:
			
Retrieves the operations of this classifier.


-eOperations:getUsedInterfaces:
			
Retrieves the interfaces on which this classifier has a usage dependency.


-eOperations:allFeatures:
			
The query allFeatures() gives all of the features in the namespace of the classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature.
result = member->select(oclIsKindOf(Feature))


-eOperations:allParents:
			
The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier.
result = self.parents()->union(self.parents()->collect(p | p.allParents())


-eOperations:conformsTo:
			
The query conformsTo() gives true for a classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations.
result = (self=other) or (self.allParents()->includes(other))


-eOperations:getGenerals:
			
The general classifiers are the classifiers referenced by the generalization relationships.
result = self.parents()


-eOperations:hasVisibilityOf:
			
The query hasVisibilityOf() determines whether a named element is visible in the classifier. By default all are visible. It is only called when the argument is something owned by a parent.
self.allParents()->including(self)->collect(c | c.member)->includes(n)
result = (n.visibility <> VisibilityKind::private)


-eOperations:inherit:
			
The inherit operation is overridden to exclude redefined properties.
The query inherit() defines how to inherit a set of elements. Here the operation is defined to inherit them all. It is intended to be redefined in circumstances where inheritance is affected by redefinition.
result = inhs


-eOperations:inheritableMembers:
			
The query inheritableMembers() gives all of the members of a classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply.
c.allParents()->includes(self)
result = member->select(m | c.hasVisibilityOf(m))


-eOperations:getInheritedMembers:
			
The inheritedMember association is derived by inheriting the inheritable members of the parents.
result = self.inherit(self.parents()->collect(p|p.inheritableMembers(self))->asSet())


-eOperations:maySpecializeType:
			
The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints.
result = self.oclIsKindOf(c.oclType)


-eOperations:parents:
			
The query parents() gives all of the immediate ancestors of a generalized Classifier.
result = generalization.general


-eStructuralFeatures:feature:
			
Specifies each feature defined in the classifier.
Note that there may be members of the Classifier that are of the type Feature but are not included in this association, e.g. inherited features.


-eStructuralFeatures:attribute:
			
Refers to all of the Properties that are direct (i.e. not inherited or imported) attributes of the classifier.


-eStructuralFeatures:collaborationUse:
			
References the collaboration uses owned by the classifier.


-eStructuralFeatures:general:
			
Specifies the general Classifiers for this Classifier.
References the general classifier in the Generalization relationship.


-eStructuralFeatures:generalization:
			
Specifies the Generalization relationships for this Classifier. These Generalizations navigaten to more general classifiers in the generalization hierarchy.


-eStructuralFeatures:powertypeExtent:
			
Designates the GeneralizationSet of which the associated Classifier is a power type.


-eStructuralFeatures:inheritedMember:
			
Specifies all elements inherited by this classifier from the general classifiers.


-eStructuralFeatures:isAbstract:
			
If true, the Classifier does not provide a complete declaration and can typically not be instantiated. An abstract classifier is intended to be used by other classifiers e.g. as the target of general metarelationships or generalization relationships.


-eStructuralFeatures:isFinalSpecialization:
			
If true, the Classifier cannot be specialized by generalization. Note that this property is preserved through package merge operations; that is, the capability to specialize a Classifier (i.e., isFinalSpecialization =false) must be preserved in the resulting Classifier of a package merge operation where a Classifier with isFinalSpecialization =false is merged with a matching Classifier with isFinalSpecialization =true: the resulting Classifier will have isFinalSpecialization =false.


-eStructuralFeatures:ownedUseCase:
			
References the use cases owned by this classifier.


-eStructuralFeatures:useCase:
			
The set of use cases for which this Classifier is the subject.


-eStructuralFeatures:redefinedClassifier:
			
References the Classifiers that are redefined by this Classifier.


-eStructuralFeatures:representation:
			
References a collaboration use which indicates the collaboration that represents this classifier.


-eStructuralFeatures:substitution:
			
References the substitutions that are owned by this Classifier.

----------------------------------------------------------------
:::eClassifiers:::Namespace:
		
Inherits from: #//NamedElement
A namespace is an element in a model that contains a set of named elements that can be identified by name.

-eOperations:members_distinguishable:
			
All the members of a Namespace are distinguishable within it.
membersAreDistinguishable()


-eOperations:createElementImport:
			
Creates an import of the specified element into this namespace with the specified visibility.


-eOperations:createPackageImport:
			
Creates an import of the specified package into this namespace with the specified visibility.


-eOperations:getImportedElements:
			
Retrieves the elements imported by this namespace.


-eOperations:getImportedPackages:
			
Retrieves the packages imported by this namespace.


-eOperations:excludeCollisions:
			
The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this namespace.
result = imps->reject(imp1 | imps.exists(imp2 | not imp1.isDistinguishableFrom(imp2, self)))


-eOperations:getNamesOfMember:
			
The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases. The query takes account of importing. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.
The query getNamesOfMember() takes importing into account. It gives back the set of names that an element would have in an importing namespace, either because it is owned, or if not owned then imported individually, or if not individually then from a package.
result = if self.ownedMember ->includes(element)
then Set{}->include(element.name)
else let elementImports: ElementImport = self.elementImport->select(ei | ei.importedElement = element) in
  if elementImports->notEmpty()
  then elementImports->collect(el | el.getName())
  else self.packageImport->select(pi | pi.importedPackage.visibleMembers()->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))
  endif
endif


-eOperations:importMembers:
			
The query importMembers() defines which of a set of PackageableElements are actually imported into the namespace. This excludes hidden ones, i.e., those which have names that conflict with names of owned members, and also excludes elements which would have the same name when imported.
result = self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem |
mem.imp.isDistinguishableFrom(mem, self)))


-eOperations:getImportedMembers:
			
The importedMember property is derived from the ElementImports and the PackageImports. References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.
result = self.importMembers(self.elementImport.importedElement.asSet()-
>union(self.packageImport.importedPackage->collect(p | p.visibleMembers())))


-eOperations:membersAreDistinguishable:
			
The Boolean query membersAreDistinguishable() determines whether all of the namespace's members are distinguishable within it.
result = self.member->forAll( memb |
self.member->excluding(memb)->forAll(other |
memb.isDistinguishableFrom(other, self)))


-eOperations:getOwnedMembers:
			
Missing derivation for Namespace::/ownedMember : NamedElement
true


-eStructuralFeatures:elementImport:
			
References the ElementImports owned by the Namespace.


-eStructuralFeatures:packageImport:
			
References the PackageImports owned by the Namespace.


-eStructuralFeatures:ownedRule:
			
Specifies a set of Constraints owned by this Namespace.


-eStructuralFeatures:ownedMember:
			
A collection of NamedElements owned by the Namespace.


-eStructuralFeatures:importedMember:
			
References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports.


-eStructuralFeatures:member:
			
A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.

----------------------------------------------------------------
:::eClassifiers:::NamedElement:
		
Inherits from: #//Element
A named element supports using a string expression to specify its name. This allows names of model elements to involve template parameters. The actual name is evaluated from the string expression only when it is sensible to do so (e.g., when a template is bound).
A named element is an element in a model that may have a name.

-eOperations:has_qualified_name:
			
When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.
(self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()) implies
  self.qualifiedName = self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))


-eOperations:has_no_qualified_name:
			
If there is no name, or one of the containing namespaces has no name, there is no qualified name.
(self.name->isEmpty() or self.allNamespaces()->select(ns | ns.name->isEmpty())->notEmpty())
  implies self.qualifiedName->isEmpty()


-eOperations:visibility_needs_ownership:
			
If a NamedElement is not owned by a Namespace, it does not have a visibility.
namespace->isEmpty() implies visibility->isEmpty()


-eOperations:createDependency:
			
Creates a dependency between this named element and the specified supplier, owned by this named element's nearest package.


-eOperations:createUsage:
			
Creates a usage between this named element and the specified supplier, owned by this named element's nearest package.


-eOperations:getLabel:
			
Retrieves a localized label for this named element.


-eOperations:getLabel:
			
Retrieves a label for this named element, localized if indicated.


-eOperations:allNamespaces:
			
The query allNamespaces() gives the sequence of namespaces in which the NamedElement is nested, working outwards.
result = if self.namespace->isEmpty()
then Sequence{}
else self.namespace.allNamespaces()->prepend(self.namespace)
endif


-eOperations:allOwningPackages:
			
The query allOwningPackages() returns all the directly or indirectly owning packages.
result = self.namespace->select(p | p.oclIsKindOf(Package))->union(p.allOwningPackages())


-eOperations:isDistinguishableFrom:
			
The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have unrelated types or (b) they have related types but different names.
result = if self.oclIsKindOf(n.oclType) or n.oclIsKindOf(self.oclType)
then ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()
else true
endif


-eOperations:getNamespace:
			
Missing derivation for NamedElement::/namespace : Namespace
true


-eOperations:getQualifiedName:
			
When there is a name, and all of the containing namespaces have a name, the qualified name is constructed from the names of the containing namespaces.
result = if self.name->notEmpty() and self.allNamespaces()->select(ns | ns.name->isEmpty())->isEmpty()
then 
    self.allNamespaces()->iterate( ns : Namespace; result: String = self.name | ns.name->union(self.separator())->union(result))
else
    Set{}
endif


-eOperations:separator:
			
The query separator() gives the string that is used to separate names when constructing a qualified name.
result = '::'


-eStructuralFeatures:clientDependency:
			
Indicates the dependencies that reference the client.


-eStructuralFeatures:name:
			
The name of the NamedElement.


-eStructuralFeatures:nameExpression:
			
The string expression used to define the name of this named element.


-eStructuralFeatures:namespace:
			
Specifies the namespace that owns the NamedElement.


-eStructuralFeatures:qualifiedName:
			
A name which allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself.


-eStructuralFeatures:visibility:
			
Determines where the NamedElement appears within different Namespaces within the overall model, and its accessibility.

----------------------------------------------------------------
:::eClassifiers:::StringExpression:
		
Inherits from: #//Expression #//TemplateableElement
An expression that specifies a string value that is derived by concatenating a set of sub string expressions, some of which might be template parameters.

-contents:stringValue:
			
The query stringValue() returns the string that concatenates, in order, all the component string literals of all the subexpressions that are part of the StringExpression.
result = if subExpression->notEmpty()
then subExpression->iterate(se; stringValue = Â‘| stringValue.concat(se.stringValue()))
else operand->iterate()(op; stringValue = Â‘ | stringValue.concat(op.value))


-eOperations:subexpressions:
			
If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to define a collating sequence between operands and subexpressions).
if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty()


-eOperations:operands:
			
All the operands of a StringExpression must be LiteralStrings
operand->forAll (op | op.oclIsKindOf (LiteralString))


-eStructuralFeatures:owningExpression:
			
The string expression of which this expression is a substring.


-eStructuralFeatures:subExpression:
			
The StringExpressions that constitute this StringExpression.

----------------------------------------------------------------
:::eClassifiers:::Expression:
		
Inherits from: #//ValueSpecification
An expression is a structured tree of symbols that denotes a (possibly empty) set of values when evaluated in a context.
An expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands which are value specifications.

-eStructuralFeatures:operand:
			
Specifies a sequence of operands.


-eStructuralFeatures:symbol:
			
The symbol associated with the node in the expression tree.

----------------------------------------------------------------
:::eClassifiers:::ValueSpecification:
		
Inherits from: #//PackageableElement #//TypedElement
ValueSpecification specializes ParameterableElement to specify that a value specification can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.
A value specification is the specification of a (possibly empty) set of instances, including both objects and data values.

-contents:isCompatibleWith:
			
The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. In addition, for ValueSpecification, the type must be conformant with the type of the specified parameterable element.
result = p->oclIsKindOf(self.oclType) and self.type.conformsTo(p.oclAsType(TypedElement).type)


-eOperations:booleanValue:
			
The query booleanValue() gives a single Boolean value when one can be computed.
result = Set{}


-eOperations:integerValue:
			
The query integerValue() gives a single Integer value when one can be computed.
result = Set{}


-eOperations:isComputable:
			
The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all value specifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute the value of all literals.
result = false


-eOperations:isNull:
			
The query isNull() returns true when it can be computed that the value is null.
result = false


-eOperations:realValue:
			
The query realValue() gives a single Real value when one can be computed.
result = Set{}


-eOperations:stringValue:
			
The query stringValue() gives a single String value when one can be computed.
result = Set{}


-eOperations:unlimitedValue:
			
The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.
result = Set{}

----------------------------------------------------------------
:::eClassifiers:::TypedElement:
		
Inherits from: #//NamedElement
A typed element is a kind of named element that represents an element with a type.
A typed element has a type.

-eStructuralFeatures:type:
			
This information is derived from the return result for this Operation.
The type of the TypedElement.

----------------------------------------------------------------
:::eClassifiers:::Type:
		
Inherits from: #//PackageableElement
A type is a named element that is used as the type for a typed element. A type can be contained in a package.
A type constrains the values represented by a typed element.

-eOperations:createAssociation:
			
Creates a(n) (binary) association between this type and the specified other type, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this type's nearest package.


-eOperations:getAssociations:
			
Retrieves the associations in which this type is involved.


-eOperations:conformsTo:
			
The query conformsTo() gives true for a type that conforms to another. By default, two types do not conform to each other. This query is intended to be redefined for specific conformance situations.
result = false


-eStructuralFeatures:package:
			
Specifies the owning package of this classifier, if any.

----------------------------------------------------------------
:::eClassifiers:::Package:
		
Inherits from: #//Namespace #//PackageableElement #//TemplateableElement
A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.
Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.
A package is used to group elements, and provides a namespace for the grouped elements.

-contents:mustBeOwned:
			
The query mustBeOwned() indicates whether elements of this type must have an owner.
result = false


-eOperations:elements_public_or_private:
			
If an element that is owned by a package has visibility, it is public or private.
self.ownedElements->forAll(e | e.visibility->notEmpty() implies e.visbility = #public or e.visibility = #private)


-eOperations:applyProfile:
			
Applies the current definition of the specified profile to this package and automatically applies required stereotypes in the profile to elements within this package's namespace hieararchy. If a different definition is already applied, automatically migrates any associated stereotype values on a "best effort" basis (matching classifiers and structural features by name).


-eOperations:createOwnedClass:
			
Creates a(n) (abstract) class with the specified name as an owned type of this package.


-eOperations:createOwnedEnumeration:
			
Creates a enumeration with the specified name as an owned type of this package.


-eOperations:createOwnedInterface:
			
Creates an interface with the specified name as an owned type of this package.


-eOperations:createOwnedPrimitiveType:
			
Creates a primitive type with the specified name as an owned type of this package.


-eOperations:createOwnedStereotype:
			
Creates a(n) (abstract) stereotype with the specified name as an owned stereotype of this profile.


-eOperations:getAllAppliedProfiles:
			
Retrieves all the profiles that are applied to this package, including profiles applied to its nesting package(s).


-eOperations:getAllProfileApplications:
			
Retrieves all the profile applications for this package, including profile applications for its nesting package(s).


-eOperations:getAppliedProfile:
			
Retrieves the profile with the specified qualified name that is applied to this package, or null if no such profile is applied.


-eOperations:getAppliedProfile:
			
Retrieves the profile with the specified qualified name that is applied to this package or any of its nesting packages (if indicated), or null if no such profile is applied.


-eOperations:getAppliedProfiles:
			
Retrieves the profiles that are applied to this package.


-eOperations:getProfileApplication:
			
Retrieves the application of the specified profile to this package, or null if no such profile is applied.


-eOperations:getProfileApplication:
			
Retrieves the application of the specified profile to this package or any of its nesting packages (if indicated), or null if no such profile is applied.


-eOperations:isModelLibrary:
			
Determines whether this package is a model library.


-eOperations:isProfileApplied:
			
Determines whether the specified profile is applied to this package.


-eOperations:unapplyProfile:
			
Unapplies the specified profile from this package and automatically unapplies stereotypes in the profile from elements within this package's namespace hieararchy.


-eOperations:allApplicableStereotypes:
			
The query allApplicableStereotypes() returns all the directly or indirectly owned stereotypes, including stereotypes contained in sub-profiles.
result = 
self.ownedStereotype->union(self.ownedMember->
	select(oclIsKindOf(Package)).oclAsType(Package).allApplicableStereotypes()->flatten())->asSet()


-eOperations:containingProfile:
			
The query containingProfile() returns the closest profile directly or indirectly containing this package (or this package itself, if it is a profile).
result =
if self.oclIsKindOf(Profile) then 
	self.oclAsType(Profile)
else
	self.namespace.oclAsType(Package).containingProfile()
endif


-eOperations:makesVisible:
			
The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible.
result = (ownedMember->includes(el)) or
(elementImport->select(ei|ei.importedElement = #public)->collect(ei|ei.importedElement)->includes(el)) or
(packageImport->select(pi|pi.visibility = #public)->collect(pi|pi.importedPackage.member->includes(el))->notEmpty())
self.member->includes(el)


-eOperations:getNestedPackages:
			
Missing derivation for Package::/nestedPackage : Package
true


-eOperations:getOwnedStereotypes:
			
Missing derivation for Package::/ownedStereotype : Stereotype
true


-eOperations:getOwnedTypes:
			
Missing derivation for Package::/ownedType : Type
true


-eOperations:visibleMembers:
			
The query visibleMembers() defines which members of a Package can be accessed outside it.
result = member->select( m | self.makesVisible(m))


-eStructuralFeatures:URI:
			
Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules.


-eStructuralFeatures:nestedPackage:
			
References the packaged elements that are Packages.


-eStructuralFeatures:nestingPackage:
			
References the Package that owns this Package.


-eStructuralFeatures:ownedStereotype:
			
References the Stereotypes that are owned by the Package


-eStructuralFeatures:packageMerge:
			
References the PackageMerges that are owned by this Package.


-eStructuralFeatures:packagedElement:
			
Specifies the packageable elements that are owned by this Package.


-eStructuralFeatures:profileApplication:
			
References the ProfileApplications that indicate which profiles have been applied to the Package.


-eStructuralFeatures:ownedType:
			
References the packaged elements that are Types.

----------------------------------------------------------------
:::eClassifiers:::TemplateableElement:
		
Inherits from: #//Element
A templateable element is an element that can optionally be defined as a template and bound to other templates.

-eOperations:isTemplate:
			
The query isTemplate() returns whether this templateable element is actually a template.
result = ownedTemplateSignature->notEmpty()


-eOperations:parameterableElements:
			
The query parameterableElements() returns the set of elements that may be used as the parametered elements for a template parameter of this templateable element. By default, this set includes all the owned elements. Subclasses may override this operation if they choose to restrict the set of parameterable elements.
result = allOwnedElements->select(oclIsKindOf(ParameterableElement))


-eStructuralFeatures:ownedTemplateSignature:
			
The optional template signature specifying the formal template parameters.


-eStructuralFeatures:templateBinding:
			
The optional bindings from this element to templates.

----------------------------------------------------------------
:::eClassifiers:::TemplateSignature:
		
Inherits from: #//Element
A template signature bundles the set of formal template parameters for a templated element.

-eOperations:own_elements:
			
Parameters must own the elements they parameter or those elements must be owned by the element being templated.
templatedElement.ownedElement->includesAll(parameter.parameteredElement - parameter.ownedParameteredElement)


-eStructuralFeatures:ownedParameter:
			
The formal template parameters that are owned by this template signature.


-eStructuralFeatures:parameter:
			
The ordered set of all formal template parameters for this template signature.


-eStructuralFeatures:template:
			
The element that owns this template signature.

----------------------------------------------------------------
:::eClassifiers:::TemplateParameter:
		
Inherits from: #//Element
A template parameter exposes a parameterable element as a formal template parameter of a template.

-eOperations:must_be_compatible:
			
The default must be compatible with the formal template parameter.
default->notEmpty() implies default->isCompatibleWith(parameteredElement)


-eStructuralFeatures:default:
			
The element that is the default for this formal template parameter.


-eStructuralFeatures:ownedDefault:
			
The element that is owned by this template parameter for the purpose of providing a default.


-eStructuralFeatures:ownedParameteredElement:
			
The element that is owned by this template parameter.


-eStructuralFeatures:parameteredElement:
			
The element exposed by this template parameter.


-eStructuralFeatures:signature:
			
The template signature that owns this template parameter.

----------------------------------------------------------------
:::eClassifiers:::TemplateBinding:
		
Inherits from: #//DirectedRelationship
A template binding represents a relationship between a templateable element and a template. A template binding specifies the substitutions of actual parameters for the formal parameters of the template.

-eOperations:parameter_substitution_formal:
			
Each parameter substitution must refer to a formal template parameter of the target template signature.
parameterSubstitution->forAll(b | template.parameter->includes(b.formal))


-eOperations:one_parameter_substitution:
			
A binding contains at most one parameter substitution for each formal template parameter of the target template signature.
template.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)


-eStructuralFeatures:parameterSubstitution:
			
The parameter substitutions owned by this template binding.


-eStructuralFeatures:signature:
			
The template signature for the template that is the target of the binding.


-eStructuralFeatures:boundElement:
			
The element that is bound by this binding.

----------------------------------------------------------------
:::eClassifiers:::DirectedRelationship:
		
Inherits from: #//Relationship
A directed relationship represents a relationship between a collection of source model elements and a collection of target model elements.

-eStructuralFeatures:source:
			
Specifies the sources of the DirectedRelationship.


-eStructuralFeatures:target:
			
Specifies the targets of the DirectedRelationship.

----------------------------------------------------------------
:::eClassifiers:::Relationship:
		
Inherits from: #//Element
Relationship is an abstract concept that specifies some kind of relationship between elements.

-eStructuralFeatures:relatedElement:
			
Specifies the elements related by the Relationship.

----------------------------------------------------------------
:::eClassifiers:::TemplateParameterSubstitution:
		
Inherits from: #//Element
A template parameter substitution relates the actual parameter to a formal template parameter as part of a template binding.

-eOperations:must_be_compatible:
			
The actual parameter must be compatible with the formal template parameter, e.g. the actual parameter for a class template parameter must be a class.
actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))


-eStructuralFeatures:actual:
			
The element that is the actual parameter for this substitution.


-eStructuralFeatures:formal:
			
The formal template parameter that is associated with this substitution.


-eStructuralFeatures:ownedActual:
			
The actual parameter that is owned by this substitution.


-eStructuralFeatures:templateBinding:
			
The optional bindings from this element to templates.

----------------------------------------------------------------
:::eClassifiers:::PackageMerge:
		
Inherits from: #//DirectedRelationship
A package merge defines how the contents of one package are extended by the contents of another package.

-eStructuralFeatures:mergedPackage:
			
References the Package that is to be merged with the receiving package of the PackageMerge.


-eStructuralFeatures:receivingPackage:
			
References the Package that is being extended with the contents of the merged package of the PackageMerge.

----------------------------------------------------------------
:::eClassifiers:::ProfileApplication:
		
Inherits from: #//DirectedRelationship
A profile application is used to show which profiles have been applied to a package.

-eOperations:getAppliedDefinition:
			
Retrieves the definition (Ecore representation) of the profile associated with this profile application.


-eOperations:getAppliedDefinition:
			
Retrieves the definition (Ecore representation) of the specified named element in the profile associated with this profile application.


-eStructuralFeatures:appliedProfile:
			
References the Profiles that are applied to a Package through this ProfileApplication.


-eStructuralFeatures:isStrict:
			
Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.


-eStructuralFeatures:applyingPackage:
			
The package that owns the profile application.

----------------------------------------------------------------
:::eClassifiers:::Profile:
		
Inherits from: #//Package
A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.

-eOperations:metaclass_reference_not_specialized:
			
An element imported as a metaclassReference is not specialized or generalized in a Profile.
self.metaclassReference.importedElement->
	select(c | c.oclIsKindOf(Classifier) and
		(c.generalization.namespace = self or	c.specialization.namespace = self))->isEmpty()


-eOperations:references_same_metamodel:
			
All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel.
self.metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->
  union(self.metaclassReference.importedElement.allOwningPackages() )->notEmpty()


-eOperations:create:
			
Creates and returns an instance of (the Ecore representation of) the specified classifier defined in this profile.


-eOperations:define:
			
Defines this profile by (re)creating Ecore representations of its current contents.


-eOperations:define:
			
Defines this profile by (re)creating Ecore representations of its current contents, using the specified options, diagnostics, and context.


-eOperations:getDefinition:
			
Retrieves the current definition (Ecore representation) of this profile.


-eOperations:getDefinition:
			
Retrieves the current definition (Ecore representation) of the specified named element in this profile.


-eOperations:getOwnedExtensions:
			
Retrieves the extensions owned by this profile, excluding non-required extensions if indicated.


-eOperations:getReferencedMetaclasses:
			
Retrieves the metaclasses referenced by this profile.


-eOperations:getReferencedMetamodels:
			
Retrieves the metamodels referenced by this profile.


-eOperations:isDefined:
			
Determines whether this profile is defined.


-eStructuralFeatures:metaclassReference:
			
References a metaclass that may be extended.


-eStructuralFeatures:metamodelReference:
			
References a package containing (directly or indirectly) metaclasses that may be extended.

----------------------------------------------------------------
:::eClassifiers:::ElementImport:
		
Inherits from: #//DirectedRelationship
An element import identifies an element in another package, and allows the element to be referenced using its name without a qualifier.

-eOperations:visibility_public_or_private:
			
The visibility of an ElementImport is either public or private.
self.visibility = #public or self.visibility = #private


-eOperations:imported_element_is_public:
			
An importedElement has either public visibility or no visibility at all.
self.importedElement.visibility.notEmpty() implies self.importedElement.visibility = #public


-eOperations:getName:
			
The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace.
result = if self.alias->notEmpty() then
  self.alias
else
  self.importedElement.name
endif


-eStructuralFeatures:alias:
			
Specifies the name that should be added to the namespace of the importing package in lieu of the name of the imported packagable element. The aliased name must not clash with any other member name in the importing package. By default, no alias is used.


-eStructuralFeatures:importedElement:
			
Specifies the PackageableElement whose name is to be added to a Namespace.


-eStructuralFeatures:importingNamespace:
			
Specifies the Namespace that imports a PackageableElement from another Package.


-eStructuralFeatures:visibility:
			
Specifies the visibility of the imported PackageableElement within the importing Package. The default visibility is the same as that of the imported element. If the imported element does not have a visibility, it is possible to add visibility to the element import.

----------------------------------------------------------------
:::eClassifiers:::VisibilityKind:
		
VisibilityKind is an enumeration type that defines literals to determine the visibility of elements in a model.
----------------------------------------------------------------
:::eClassifiers:::PackageImport:
		
Inherits from: #//DirectedRelationship
A package import is a relationship that allows the use of unqualified names to refer to package members from other namespaces.

-eOperations:public_or_private:
			
The visibility of a PackageImport is either public or private.
self.visibility = #public or self.visibility = #private


-eStructuralFeatures:importedPackage:
			
Specifies the Package whose members are imported into a Namespace.


-eStructuralFeatures:importingNamespace:
			
Specifies the Namespace that imports the members from a Package.


-eStructuralFeatures:visibility:
			
Specifies the visibility of the imported PackageableElements within the importing Namespace, i.e., whether imported elements will in turn be visible to other packages that use that importingPackage as an importedPackage. If the PackageImport is public, the imported elements will be visible outside the package, while if it is private they will not.

----------------------------------------------------------------
:::eClassifiers:::Extension:
		
Inherits from: #//Association
An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes.

-contents:ownedEnd:
			
References the end of the extension that is typed by a Stereotype.


-eOperations:non_owned_end:
			
The non-owned end of an Extension is typed by a Class.
metaclassEnd()->notEmpty() and metaclass()->oclIsKindOf(Class)


-eOperations:is_binary:
			
An Extension is binary, i.e., it has only two memberEnds.
memberEnd->size() = 2


-eOperations:getStereotype:
			
Retrieves the stereotype that extends a metaclass through this extension.


-eOperations:getStereotypeEnd:
			
Retrieves the extension end that is typed by a stereotype (as opposed to a metaclass).


-eOperations:isRequired:
			
The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.
result = (ownedEnd->lowerBound() = 1)


-eOperations:getMetaclass:
			
The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype).
result = metaclassEnd().type


-eOperations:metaclassEnd:
			
The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).
result = memberEnd->reject(ownedEnd)


-eStructuralFeatures:isRequired:
			
Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the value of the lower property of the ExtensionEnd referenced by Extension::ownedEnd; a lower value of 1 means that isRequired is true, but otherwise it is false. Since the default value of ExtensionEnd::lower is 0, the default value of isRequired is false.


-eStructuralFeatures:metaclass:
			
References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd.

----------------------------------------------------------------
:::eClassifiers:::Association:
		
Inherits from: #//Classifier #//Relationship
An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link.A link is a tuple with one value for each end of the association, where each value is an instance of the type of the end.
An association describes a set of tuples whose values refer to typed instances. An instance of an association is called a link. A link is a tuple with one value for each end of the association, where each value is an instance of the type of the end.

-eOperations:specialized_end_number:
			
An association specializing another association has the same number of ends as the other association.
parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())


-eOperations:association_ends:
			
Association ends of associations with more than two ends must be owned by the association.
if memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)


-eOperations:binary_associations:
			
Only binary associations can be aggregations.
self.memberEnd->exists(aggregation <> Aggregation::none) implies self.memberEnd->size() = 2


-eOperations:specialized_end_types:
			
When an association specializes another association, every end of the specific association corresponds to an end of the general association, and the specific end reaches the same type or a subtype of the more general end.
Sequence{1..self.memberEnd->size()}->
	forAll(i | self.general->select(oclIsKindOf(Association)).oclAsType(Association)->
		forAll(ga |self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))


-eOperations:isBinary:
			
Determines whether this association is a binary association, i.e. whether it has exactly two member ends.


-eOperations:getEndTypes:
			
endType is derived from the types of the member ends.
result = self.memberEnd->collect(e | e.type)


-eStructuralFeatures:endType:
			
References the classifiers that are used as types of the ends of the association.


-eStructuralFeatures:isDerived:
			
Specifies whether the association is derived from other model elements such as other associations or constraints.


-eStructuralFeatures:memberEnd:
			
Each end represents participation of instances of the classifier connected to the end in links of the association.


-eStructuralFeatures:ownedEnd:
			
The ends that are owned by the association itself.


-eStructuralFeatures:navigableOwnedEnd:
			
The navigable ends that are owned by the association itself.

----------------------------------------------------------------
:::eClassifiers:::Property:
		
Inherits from: #//StructuralFeature #//ConnectableElement #//DeploymentTarget
Property represents a declared state of one or more instances in terms of a named relationship to a value or values. When a property is an attribute of a classifier, the value or values are related to the instance of the classifier by being held in slots of the instance. When a property is an association end, the value or values are related to the instance or instances at the other end(s) of the association. The range of valid values represented by the property can be controlled by setting the property's type.
A property is a structural feature of a classifier that characterizes instances of the classifier. A property related by ownedAttribute to a classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the class to a value or set of values of the type of the attribute. A property related by memberEnd or its specializations to an association represents an end of the association. The type of the property is the type of the end of the association.
A property has the capability of being a deployment target in a deployment relationship. This enables modeling the deployment to hierarchical nodes that have properties functioning as internal parts.
Property specializes ParameterableElement to specify that a property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.
A property represents a set of instances that are owned by a containing classifier instance.

-contents:isCompatibleWith:
			
The query isCompatibleWith() determines if this parameterable element is compatible with the specified parameterable element. By default parameterable element P is compatible with parameterable element Q if the kind of P is the same or a subtype as the kind of Q. In addition, for properties, the type must be conformant with the type of the specified parameterable element.
result = p->oclIsKindOf(self.oclType) and self.type.conformsTo(p.oclAsType(TypedElement).type)


-contents:isConsistentWith:
			
The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property.
The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining property is consistent with a redefined property if the type of the redefining property conforms to the type of the redefined property, and the multiplicity of the redefining property (if specified) is contained in the multiplicity of the redefined property.
redefinee.isRedefinitionContextValid(self)
result = redefinee.oclIsKindOf(Property) and 
  let prop : Property = redefinee.oclAsType(Property) in 
  (prop.type.conformsTo(self.type) and 
  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and 
  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and 
  (self.isComposite implies prop.isComposite))


-contents:isReadOnly:
			
If true, the attribute may only be read, and not written.
If isReadOnly is true, the attribute may not be written to after initialization.


-eOperations:subsetted_property_names:
			
A property may not subset a property with the same name.
true


-eOperations:subsetting_rules:
			
A subsetting property may strengthen the type of the subsetted property, and its upper bound may be less.
self.subsettedProperty->forAll(sp |
  self.type.conformsTo(sp.type) and
    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies
      self.upperBound()<=sp.upperBound() ))


-eOperations:multiplicity_of_composite:
			
A multiplicity on an aggregate end of a composite aggregation must not have an upper bound greater than 1.
A multiplicity of a composite aggregation must not have an upper bound greater than 1.
isComposite implies (upperBound()->isEmpty() or upperBound() <= 1)


-eOperations:binding_to_attribute:
			
A binding of a property template parameter representing an attribute must be to an attribute.
(isAttribute(self) and (templateParameterSubstitution->notEmpty())
  implies (templateParameterSubstitution->forAll(ts | isAttribute(ts.formal)))


-eOperations:redefined_property_inherited:
			
A redefined property must be inherited from a more general classifier containing the redefining property.
if (redefinedProperty->notEmpty()) then
  (redefinitionContext->notEmpty() and
      redefinedProperty->forAll(rp|
        ((redefinitionContext->collect(fc|
          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp))


-eOperations:subsetting_context_conforms:
			
Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property.
self.subsettedProperty->notEmpty() implies
  (self.subsettingContext()->notEmpty() and self.subsettingContext()->forAll (sc |
    self.subsettedProperty->forAll(sp |
      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))


-eOperations:deployment_target:
			
A Property can be a DeploymentTarget if it is a kind of Node and functions as a part in the internal structure of an encompassing Node.
true


-eOperations:derived_union_is_derived:
			
A derived union is derived.
isDerivedUnion implies isDerived


-eOperations:derived_union_is_read_only:
			
A derived union is read only.
isDerivedUnion implies isReadOnly


-eOperations:getOtherEnd:
			
Retrieves the other end of the (binary) association in which this property is a member end.


-eOperations:isSetDefault:
			
true


-eOperations:setBooleanDefaultValue:
			
Sets the default value for this property to the specified Boolean value.


-eOperations:setDefault:
			
true


-eOperations:setIntegerDefaultValue:
			
Sets the default value for this property to the specified integer value.


-eOperations:setIsComposite:
			
true


-eOperations:setIsNavigable:
			
Sets the navigability of this property as indicated.


-eOperations:setNullDefaultValue:
			
Sets the default value for this property to the null value.


-eOperations:setOpposite:
			
true


-eOperations:setRealDefaultValue:
			
Sets the default value for this property to the specified real value.


-eOperations:setStringDefaultValue:
			
Sets the default value for this property to the specified string value.


-eOperations:setUnlimitedNaturalDefaultValue:
			
Sets the default value for this property to the specified unlimited natural value.


-eOperations:unsetDefault:
			
true


-eOperations:getDefault:
			
Missing derivation for Property::/default : String
true


-eOperations:isAttribute:
			
The query isAttribute() is true if the Property is defined as an attribute of some classifier.
result = Classifier.allInstances->exists(c | c.attribute->includes(p))


-eOperations:isComposite:
			
The value of isComposite is true only if aggregation is composite.
result = (self.aggregation = #composite)


-eOperations:isNavigable:
			
The query isNavigable() indicates whether it is possible to navigate across the property.
result = not classifier->isEmpty() or association.owningAssociation.navigableOwnedEnd->includes(self)


-eOperations:getOpposite:
			
If this property is owned by a class, associated with a binary association, and the other end of the association is also owned by a class, then opposite gives the other end.
result = if owningAssociation->isEmpty() and association.memberEnd->size() = 2
  then
    let otherEnd = (association.memberEnd - self)->any() in
      if otherEnd.owningAssociation->isEmpty() then otherEnd else Set{} endif
    else Set {}
    endif


-eOperations:subsettingContext:
			
The query subsettingContext() gives the context for subsetting a property. It consists, in the case of an attribute, of the corresponding classifier, and in the case of an association end, all of the classifiers at the other ends.
result = if association->notEmpty()
then association.endType-type
else if classifier->notEmpty() then Set{classifier} else Set{} endif
endif


-eStructuralFeatures:interface:
			
References the Interface that owns the Property


-eStructuralFeatures:datatype:
			
The DataType that owns this Property.


-eStructuralFeatures:aggregation:
			
Specifies the kind of aggregation that applies to the Property.


-eStructuralFeatures:associationEnd:
			
Designates the optional association end that owns a qualifier attribute.


-eStructuralFeatures:qualifier:
			
An optional list of ordered qualifier attributes for the end. If the list is empty, then the Association is not qualified.


-eStructuralFeatures:class:
			
ReferencesÂ theÂ ClassÂ thatÂ ownsÂ theÂ Property.
References the Class that owns the Property.


-eStructuralFeatures:default:
			
Specifies a String that represents a value to be used when no argument is supplied for the Property.
A String that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.


-eStructuralFeatures:defaultValue:
			
A ValueSpecification that is evaluated to give a default value for the Property when an object of the owning Classifier is instantiated.


-eStructuralFeatures:isComposite:
			
If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute.
This is a derived value, indicating whether the aggregation of the Property is composite or not.


-eStructuralFeatures:isDerived:
			
If isDerived is true, the value of the attribute is derived from information elsewhere.
Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.


-eStructuralFeatures:isDerivedUnion:
			
Specifies whether the property is derived as the union of all of the properties that are constrained to subset it.


-eStructuralFeatures:isID:
			
True indicates this property can be used to uniquely identify an instance of the containing Class.


-eStructuralFeatures:opposite:
			
In the case where the property is one navigable end of a binary association with both ends navigable, this gives the other end.


-eStructuralFeatures:owningAssociation:
			
References the owning association of this property, if any.


-eStructuralFeatures:redefinedProperty:
			
References the properties that are redefined by this property.


-eStructuralFeatures:subsettedProperty:
			
References the properties of which this property is constrained to be a subset.


-eStructuralFeatures:association:
			
References the association of which this property is a member, if any.

----------------------------------------------------------------
:::eClassifiers:::StructuralFeature:
		
Inherits from: #//Feature #//TypedElement #//MultiplicityElement
A structural feature is a typed feature of a classifier that specifies the structure of instances of the classifier.
By specializing multiplicity element, it supports a multiplicity that specifies valid cardinalities for the collection of values associated with an instantiation of the structural feature.

-eStructuralFeatures:isReadOnly:
			
States whether the feature's value may be modified by a client.

----------------------------------------------------------------
:::eClassifiers:::MultiplicityElement:
		
Inherits from: #//Element
A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A multiplicity element embeds this information to specify the allowable cardinalities for an instantiation of this element.

-eOperations:lower_ge_0:
			
The lower bound must be a non-negative integer literal.
lowerBound()->notEmpty() implies lowerBound() >= 0


-eOperations:upper_ge_lower:
			
The upper bound must be greater than or equal to the lower bound.
(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()


-eOperations:value_specification_constant:
			
If a non-literal ValueSpecification is used for the lower or upper bound, then that specification must be a constant expression.
true


-eOperations:value_specification_no_side_effects:
			
If a non-literal ValueSpecification is used for the lower or upper bound, then evaluating that specification must not have side effects.
true


-eOperations:setLower:
			
true


-eOperations:setUpper:
			
true


-eOperations:compatibleWith:
			
The operation compatibleWith takes another multiplicity as input. It checks if one multiplicity is compatible with another.
result = Integer.allInstances()->forAll(i : Integer | self.includesCardinality(i) implies other.includesCardinality(i))


-eOperations:includesCardinality:
			
The query includesCardinality() checks whether the specified cardinality is valid for this multiplicity.
upperBound()->notEmpty() and lowerBound()->notEmpty()
result = (lowerBound() <= C) and (upperBound() >= C)


-eOperations:includesMultiplicity:
			
The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity.
result = (self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound())
self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()


-eOperations:is:
			
The operation is determines if the upper and lower bound of the ranges are the ones given.
result = (lowerbound = self.lowerbound and upperbound = self.upperbound)


-eOperations:isMultivalued:
			
The query isMultivalued() checks whether this multiplicity has an upper bound greater than one.
result = upperBound() > 1
upperBound()->notEmpty()


-eOperations:getLower:
			
The derived lower attribute must equal the lowerBound.
result = lowerBound()


-eOperations:lowerBound:
			
The query lowerBound() returns the lower bound of the multiplicity as an integer.
result = if lowerValue->isEmpty() then 1 else lowerValue.integerValue() endif


-eOperations:getUpper:
			
The derived upper attribute must equal the upperBound.
result = upperBound()


-eOperations:upperBound:
			
The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural.
result = if upperValue->isEmpty() then 1 else upperValue.unlimitedValue() endif


-eStructuralFeatures:isOrdered:
			
For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this element are sequentially ordered.


-eStructuralFeatures:isUnique:
			
For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this element are unique.


-eStructuralFeatures:lower:
			
Specifies the lower bound of the multiplicity interval.


-eStructuralFeatures:lowerValue:
			
The specification of the lower bound for this multiplicity.


-eStructuralFeatures:upper:
			
Specifies the upper bound of the multiplicity interval.


-eStructuralFeatures:upperValue:
			
The specification of the upper bound for this multiplicity.

----------------------------------------------------------------
:::eClassifiers:::Feature:
		
Inherits from: #//RedefinableElement
A feature declares a behavioral or structural characteristic of instances of classifiers.

-eStructuralFeatures:featuringClassifier:
			
The Classifiers that have this Feature as a feature.


-eStructuralFeatures:isStatic:
			
Specifies whether this feature characterizes individual instances classified by the classifier (false) or the classifier itself (true).

----------------------------------------------------------------
:::eClassifiers:::RedefinableElement:
		
Inherits from: #//NamedElement
A redefinable element is an element that, when defined in the context of a classifier, can be redefined more specifically or differently in the context of another classifier that specializes (directly or indirectly) the context classifier.

-eOperations:redefinition_consistent:
			
A redefining element must be consistent with each redefined element.
self.redefinedElement->forAll(re | re.isConsistentWith(self))


-eOperations:non_leaf_redefinition:
			
A redefinable element can only redefine non-leaf redefinable elements
self.redefinedElement->forAll(not isLeaf)


-eOperations:redefinition_context_valid:
			
At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.
self.redefinedElement->forAll(e | self.isRedefinitionContextValid(e))


-eOperations:isConsistentWith:
			
The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.
result = false
redefinee.isRedefinitionContextValid(self)


-eOperations:isRedefinitionContextValid:
			
The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.
result = redefinitionContext->exists(c | c.allParents()->includes(redefined.redefinitionContext)))


-eStructuralFeatures:isLeaf:
			
Indicates whether it is possible to further redefine a RedefinableElement. If the value is true, then it is not possible to further redefine the RedefinableElement. Note that this property is preserved through package merge operations; that is, the capability to redefine a RedefinableElement (i.e., isLeaf=false) must be preserved in the resulting RedefinableElement of a package merge operation where a RedefinableElement with isLeaf=false is merged with a matching RedefinableElement with isLeaf=true: the resulting RedefinableElement will have isLeaf=false. Default value is false.


-eStructuralFeatures:redefinedElement:
			
The redefinable element that is being redefined by this element.


-eStructuralFeatures:redefinitionContext:
			
References the contexts that this element may be redefined from.

----------------------------------------------------------------
:::eClassifiers:::ConnectableElement:
		
Inherits from: #//TypedElement #//ParameterableElement
ConnectableElement is an abstract metaclass representing a set of instances that play roles of a classifier. Connectable elements may be joined by attached connectors and specify configurations of linked instances to be created within an instance of the containing classifier.
A connectable element may be exposed as a connectable element template parameter.

-contents:templateParameter:
			
The ConnectableElementTemplateParameter for this ConnectableElement parameter.


-eOperations:getEnds:
			
Missing derivation for ConnectableElement::/end : ConnectorEnd
true


-eStructuralFeatures:end:
			
Denotes a set of connector ends that attaches to this connectable element.

----------------------------------------------------------------
:::eClassifiers:::ConnectorEnd:
		
Inherits from: #//MultiplicityElement
A connector end is an endpoint of a connector, which attaches the connector to a connectable element. Each connector end is part of one connector.

-eOperations:role_and_part_with_port:
			
If a connector end references a partWithPort, then the role must be a port that is defined by the type of the partWithPort.
true


-eOperations:self_part_with_port:
			
The property held in self.partWithPort must not be a Port.
true


-eOperations:multiplicity:
			
The multiplicity of the connector end may not be more general than the multiplicity of the association typing the owning connector.
true


-eOperations:part_with_port_empty:
			
If a connector end is attached to a port of the containing classifier, partWithPort will be empty.
true


-eOperations:getDefiningEnd:
			
Missing derivation for ConnectorEnd::/definingEnd : Property
true


-eStructuralFeatures:definingEnd:
			
A derived association referencing the corresponding association end on the association which types the connector owing this connector end. This association is derived by selecting the association end at the same place in the ordering of association ends as this connector end.


-eStructuralFeatures:partWithPort:
			
Indicates the role of the internal structure of a classifier with the port to which the connector end is attached.


-eStructuralFeatures:role:
			
The connectable element attached at this connector end. When an instance of the containing classifier is created, a link may (depending on the multiplicities) be created to an instance of the classifier that types this connectable element.

----------------------------------------------------------------
:::eClassifiers:::ConnectableElementTemplateParameter:
		
Inherits from: #//TemplateParameter
A connectable element template parameter exposes a connectable element as a formal parameter for a template.

-contents:parameteredElement:
			
The ConnectableElement for this template parameter.

----------------------------------------------------------------
:::eClassifiers:::DeploymentTarget:
		
Inherits from: #//NamedElement
A deployment target is the location for a deployed artifact.

-eOperations:getDeployedElements:
			
Missing derivation for DeploymentTarget::/deployedElement : PackageableElement
result = ((self.deployment->collect(deployedArtifact))->collect(manifestation))->collect(utilizedElement)


-eStructuralFeatures:deployedElement:
			
The set of elements that are manifested in an Artifact that is involved in Deployment to a DeploymentTarget.


-eStructuralFeatures:deployment:
			
The set of Deployments for a DeploymentTarget.

----------------------------------------------------------------
:::eClassifiers:::Deployment:
		
Inherits from: #//Dependency
A deployment is the allocation of an artifact or artifact instance to a deployment target.
A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.

-eStructuralFeatures:configuration:
			
The specification of properties that parameterize the deployment and execution of one or more Artifacts.


-eStructuralFeatures:deployedArtifact:
			
The Artifacts that are deployed onto a Node. This association specializes the supplier association.


-eStructuralFeatures:location:
			
The DeployedTarget which is the target of a Deployment.

----------------------------------------------------------------
:::eClassifiers:::DeploymentSpecification:
		
Inherits from: #//Artifact
A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor.

-eOperations:deployed_elements:
			
The deployedElements of a DeploymentTarget that are involved in a Deployment that has an associated Deployment-Specification is a kind of Component (i.e. the configured components).
self.deployment->forAll (d | d.location.deployedElements->forAll (de |
  de.oclIsKindOf(Component)))


-eOperations:deployment_target:
			
The DeploymentTarget of a DeploymentSpecification is a kind of ExecutionEnvironment.
self.deployment->forAll (d | d.location.oclIsKindOf(ExecutionEnvironment))


-eStructuralFeatures:deploymentLocation:
			
The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address'.


-eStructuralFeatures:executionLocation:
			
The location where a component Artifact executes. This may be a local or remote location.


-eStructuralFeatures:deployment:
			
The deployment with which the DeploymentSpecification is associated.

----------------------------------------------------------------
:::eClassifiers:::Artifact:
		
Inherits from: #//Classifier #//DeployedArtifact
An artifact is the source of a deployment to a node.
An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.

-eOperations:createOwnedAttribute:
			
Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this artifact.


-eOperations:createOwnedOperation:
			
Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this artifact.


-eStructuralFeatures:fileName:
			
A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator.


-eStructuralFeatures:manifestation:
			
The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact.


-eStructuralFeatures:nestedArtifact:
			
The Artifacts that are defined (nested) within the Artifact. The association is a specialization of the ownedMember association from Namespace to NamedElement.


-eStructuralFeatures:ownedAttribute:
			
The attributes or association ends defined for the Artifact. The association is a specialization of the ownedMember association.


-eStructuralFeatures:ownedOperation:
			
The Operations defined for the Artifact. The association is a specialization of the ownedMember association.

----------------------------------------------------------------
:::eClassifiers:::DeployedArtifact:
		
Inherits from: #//NamedElement
A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target.
----------------------------------------------------------------
:::eClassifiers:::Manifestation:
		
Inherits from: #//Abstraction
A manifestation is the concrete physical rendering of one or more model elements by an artifact.

-eStructuralFeatures:utilizedElement:
			
The model element that is utilized in the manifestation in an Artifact.

----------------------------------------------------------------
:::eClassifiers:::Operation:
		
Inherits from: #//BehavioralFeature #//ParameterableElement #//TemplateableElement
An operation is a behavioral feature of a classifier that specifies the name, type, parameters, and constraints for invoking an associated behavior.
An operation may invoke both the execution of method behaviors as well as other behavioral responses.
Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.

-contents:isConsistentWith:
			
A redefining operation is consistent with a redefined operation if it has the same number of owned parameters, and the type of each owned parameter conforms to the type of the corresponding redefined parameter.
The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent in the sense of maintaining type covariance. Other senses of consistency may be required, for example to determine consistency in the sense of contravariance. Users may define alternative queries under names different from 'isConsistentWith()', as for example, users may define a query named 'isContravariantWith()'.
redefinee.isRedefinitionContextValid(self)
result = redefinee.oclIsKindOf(Operation) and
let op : Operation = redefinee.oclAsType(Operation) in
	self.ownedParameter->size() = op.ownedParameter->size() and
	Sequence{1..self.ownedParameter->size()}->
		forAll(i |op.ownedParameter->at(1).type.conformsTo(self.ownedParameter->at(i).type))


-contents:ownedParameter:
			
Specifies the ordered set of formal parameters of this BehavioralFeature.
Specifies the parameters owned by this Operation.


-contents:raisedException:
			
References the Types representing exceptions that may be raised during an invocation of this operation.


-contents:templateParameter:
			
The template parameter that exposes this element as a formal parameter.


-eOperations:at_most_one_return:
			
An operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return'
self.ownedParameter->select(par | par.direction = #return)->size() <= 1


-eOperations:only_body_for_query:
			
A bodyCondition can only be specified for a query operation.
bodyCondition->notEmpty() implies isQuery


-eOperations:getReturnResult:
			
Retrieves the (only) return result parameter for this operation.


-eOperations:isOrdered:
			
If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false.
result = if returnResult()->notEmpty() then returnResult()->any().isOrdered else false endif


-eOperations:isUnique:
			
If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true.
result = if returnResult()->notEmpty() then returnResult()->any().isUnique else true endif


-eOperations:getLower:
			
If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower is not defined.
result = if returnResult()->notEmpty() then returnResult()->any().lower else Set{} endif


-eOperations:returnResult:
			
The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set
result = ownedParameter->select (par | par.direction = #return)


-eOperations:getType:
			
If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type is not defined.
result = if returnResult()->notEmpty() then returnResult()->any().type else Set{} endif


-eOperations:getUpper:
			
If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper is not defined.
result = if returnResult()->notEmpty() then returnResult()->any().upper else Set{} endif


-eStructuralFeatures:interface:
			
The Interface that owns this Operation.


-eStructuralFeatures:bodyCondition:
			
An optional Constraint on the result values of an invocation of this Operation.


-eStructuralFeatures:class:
			
The class that owns the operation.


-eStructuralFeatures:datatype:
			
The DataType that owns this Operation.


-eStructuralFeatures:isOrdered:
			
This information is derived from the return result for this Operation.
Specifies whether the return parameter is ordered or not, if present.


-eStructuralFeatures:isQuery:
			
Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false).


-eStructuralFeatures:isUnique:
			
Specifies whether the return parameter is unique or not, if present.
This information is derived from the return result for this Operation.


-eStructuralFeatures:lower:
			
This information is derived from the return result for this Operation.
Specifies the lower multiplicity of the return parameter, if present.


-eStructuralFeatures:postcondition:
			
An optional set of Constraints specifying the state of the system when the Operation is completed.


-eStructuralFeatures:precondition:
			
An optional set of Constraints on the state of the system when the Operation is invoked.


-eStructuralFeatures:redefinedOperation:
			
References the Operations that are redefined by this Operation.


-eStructuralFeatures:type:
			
This information is derived from the return result for this Operation.
Specifies the return result of the operation, if present.


-eStructuralFeatures:upper:
			
This information is derived from the return result for this Operation.
Specifies the upper multiplicity of the return parameter, if present.

----------------------------------------------------------------
:::eClassifiers:::BehavioralFeature:
		
Inherits from: #//Namespace #//Feature
A behavioral feature is a feature of a classifier that specifies an aspect of the behavior of its instances.
A behavioral feature is implemented (realized) by a behavior. A behavioral feature specifies that a classifier will respond to a designated request by invoking its implementing method.
A behavioral feature owns zero or more parameter sets.

-contents:isDistinguishableFrom:
			
The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they have to have different signatures.
result = if n.oclIsKindOf(BehavioralFeature)
then
  if ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()
  then Set{}->including(self)->including(n)->isUnique(bf | bf.ownedParameter->collect(type))
  else true
  endif
else true
endif


-eOperations:createReturnResult:
			
Creates a return result parameter with the specified name and type.


-eStructuralFeatures:concurrency:
			
Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a class with isActive being false). Active instances control access to their own behavioral features.


-eStructuralFeatures:isAbstract:
			
If true, then the behavioral feature does not have an implementation, and one must be supplied by a more specific element. If false, the behavioral feature must have an implementation in the classifier or one must be inherited from a more general element.


-eStructuralFeatures:method:
			
A behavioral description that implements the behavioral feature. There may be at most one behavior for a particular pairing of a classifier (as owner of the behavior) and a behavioral feature (as specification of the behavior).


-eStructuralFeatures:ownedParameter:
			
Specifies the ordered set of formal parameters of this BehavioralFeature.


-eStructuralFeatures:ownedParameterSet:
			
The ParameterSets owned by this BehavioralFeature.


-eStructuralFeatures:raisedException:
			
References the Types representing exceptions that may be raised during an invocation of this feature.

----------------------------------------------------------------
:::eClassifiers:::CallConcurrencyKind:
		
CallConcurrencyKind is an enumeration type.
----------------------------------------------------------------
:::eClassifiers:::Behavior:
		
Inherits from: #//Class
Behavior is a specification of how its context classifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.
A behavior owns zero or more parameter sets.

-eOperations:parameters_match:
			
The parameters of the behavior must match the parameters of the implemented behavioral feature.
true


-eOperations:feature_of_context_classifier:
			
The implemented behavioral feature must be a feature (possibly inherited) of the context classifier of the behavior.
true


-eOperations:must_realize:
			
If the implemented behavioral feature has been redefined in the ancestors of the owner of the behavior, then the behavior must realize the latest redefining behavioral feature.
true


-eOperations:most_one_behaviour:
			
There may be at most one behavior for a given pairing of classifier (as owner of the behavior) and behavioral feature (as specification of the behavior).
true


-eOperations:getContext:
			
Missing derivation for Behavior::/context : BehavioredClassifier
true


-eStructuralFeatures:context:
			
The classifier that is the context for the execution of the behavior. A Behavior that is directly owned as a nestedClassifier does not have a context. Otherwise, to determine the context of a Behavior, find the first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any. If there is such a BehavioredClassifier, then it is the context, unless it is itself a Behavior with a non-empty context, in which case that is also the context for the original Behavior. For example, following this algorithm, the context of an entry action in a state machine is the classifier that owns the state machine. The features of the context classifier as well as the elements visible to the context classifier are visible to the behavior.


-eStructuralFeatures:isReentrant:
			
Tells whether the behavior can be invoked while it is still executing from a previous invocation.


-eStructuralFeatures:ownedParameter:
			
References a list of parameters to the behavior which describes the order and type of arguments that can be given when the behavior is invoked and of the values which will be returned when the behavior completes its execution.


-eStructuralFeatures:ownedParameterSet:
			
The ParameterSets owned by this Behavior.


-eStructuralFeatures:postcondition:
			
An optional set of Constraints specifying what is fulfilled after the execution of the behavior is completed, if its precondition was fulfilled before its invocation.


-eStructuralFeatures:precondition:
			
An optional set of Constraints specifying what must be fulfilled when the behavior is invoked.


-eStructuralFeatures:redefinedBehavior:
			
References a behavior that this behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the behavior implements a behavioral feature, it replaces the redefined behavior. If the behavior is a classifier behavior, it extends the redefined behavior.


-eStructuralFeatures:specification:
			
Designates a behavioral feature that the behavior implements. The behavioral feature must be owned by the classifier that owns the behavior or be inherited by it. The parameters of the behavioral feature and the implementing behavior must match. A behavior does not need to have a specification, in which case it either is the classifer behavior of a BehavioredClassifier or it can only be invoked by another behavior of the classifier.

----------------------------------------------------------------
:::eClassifiers:::BehavioredClassifier:
		
Inherits from: #//Classifier
A behaviored classifier may have an interface realization.
A classifier can have behavior specifications defined in its namespace. One of these may specify the behavior of the classifier itself.

-eOperations:class_behavior:
			
If a behavior is classifier behavior, it does not have a specification.
self.classifierBehavior->notEmpty() implies self.classifierBehavior.specification->isEmpty()


-eOperations:getAllImplementedInterfaces:
			
Retrieves all the interfaces on which this behaviored classifier or any of its parents has an interface realization dependency.


-eOperations:getImplementedInterfaces:
			
Retrieves the interfaces on which this behaviored classifier has an interface realization dependency.


-eStructuralFeatures:classifierBehavior:
			
A behavior specification that specifies the behavior of the classifier itself.


-eStructuralFeatures:interfaceRealization:
			
The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation.


-eStructuralFeatures:ownedBehavior:
			
References behavior specifications owned by a classifier.

----------------------------------------------------------------
:::eClassifiers:::InterfaceRealization:
		
Inherits from: #//Realization
An interface realization is a specialized realization relationship between a classifier and an interface. This relationship signifies that the realizing classifier conforms to the contract specified by the interface.

-eStructuralFeatures:contract:
			
References the Interface specifying the conformance contract.


-eStructuralFeatures:implementingClassifier:
			
References the BehavioredClassifier that owns this Interfacerealization (i.e., the classifier that realizes the Interface to which it points).

----------------------------------------------------------------
:::eClassifiers:::Realization:
		
Inherits from: #//Abstraction
Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc.
----------------------------------------------------------------
:::eClassifiers:::Interface:
		
Inherits from: #//Classifier
Since an interface specifies conformance characteristics, it does not own detailed behavior specifications. Instead, interfaces may own a protocol state machine that specifies event sequences and pre/post conditions for the operations and receptions described by the interface.
Interfaces may include receptions (in addition to operations).
An interface is a kind of classifier that represents a declaration of a set of coherent public features and obligations. An interface specifies a contract; any instance of a classifier that realizes the interface must fulfill that contract. The obligations that may be associated with an interface are in the form of various kinds of constraints (such as pre- and post-conditions) or protocol specifications, which may impose ordering restrictions on interactions through the interface.

-eOperations:visibility:
			
The visibility of all features owned by an interface must be public.
self.feature->forAll(f | f.visibility = #public)


-eOperations:createOwnedAttribute:
			
Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this interface.


-eOperations:createOwnedOperation:
			
Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this interface.


-eStructuralFeatures:nestedClassifier:
			
References all the Classifiers that are defined (nested) within the Class.


-eStructuralFeatures:ownedAttribute:
			
The attributes (i.e. the properties) owned by the class.


-eStructuralFeatures:ownedOperation:
			
The operations owned by the class.


-eStructuralFeatures:ownedReception:
			
Receptions that objects providing this interface are willing to accept.


-eStructuralFeatures:protocol:
			
References a protocol state machine specifying the legal sequences of the invocation of the behavioral features described in the interface.


-eStructuralFeatures:redefinedInterface:
			
References all the Interfaces redefined by this Interface.

----------------------------------------------------------------
:::eClassifiers:::Reception:
		
Inherits from: #//BehavioralFeature
A reception is a declaration stating that a classifier is prepared to react to the receipt of a signal. A reception designates a signal and specifies the expected behavioral response. The details of handling a signal are specified by the behavior associated with the reception or the classifier itself.

-eOperations:not_query:
			
A Reception can not be a query.
not self.isQuery


-eStructuralFeatures:signal:
			
The signal that this reception handles.

----------------------------------------------------------------
:::eClassifiers:::Signal:
		
Inherits from: #//Classifier
A signal is a specification of send request instances communicated between objects. The receiving object handles the received request instances as specified by its receptions. The data carried by a send request (which was passed to it by the send invocation occurrence that caused that request) are represented as attributes of the signal. A signal is defined independently of the classifiers handling the signal occurrence.

-eOperations:createOwnedAttribute:
			
Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this signal.


-eStructuralFeatures:ownedAttribute:
			
The attributes owned by the signal.

----------------------------------------------------------------
:::eClassifiers:::ProtocolStateMachine:
		
Inherits from: #//StateMachine
A protocol state machine is always defined in the context of a classifier. It specifies which operations of the classifier can be called in which state and under which condition, thus specifying the allowed call sequences on the classifier's operations. A protocol state machine presents the possible and permitted transitions on the instances of its context classifier, together with the operations which carry the transitions. In this manner, an instance lifecycle can be created for a classifier, by specifying the order in which the operations can be activated and the states through which an instance progresses during its existence.

-contents:classifier_context:
			
A protocol state machine must only have a classifier context, not a behavioral feature context.
(not context->isEmpty( )) and specification->isEmpty()


-eOperations:entry_exit_do:
			
The states of a protocol state machine cannot have entry, exit, or do activity actions.
region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies
(v.entry->isEmpty() and v.exit->isEmpty() and v.doActivity->isEmpty())))



-eOperations:protocol_transitions:
			
All transitions of a protocol state machine must be protocol transitions. (transitions as extended by the ProtocolStateMachines package)
region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))


-eOperations:deep_or_shallow_history:
			
Protocol state machines cannot have deep or shallow history pseudostates.
region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Psuedostate) implies
((v.kind <> #deepHistory) and (v.kind <> #shallowHistory)))))



-eOperations:ports_connected:
			
If two ports are connected, then the protocol state machine of the required interface (if defined) must be conformant to the protocol state machine of the provided interface (if defined).
true


-eStructuralFeatures:conformance:
			
Conformance between protocol state machines.

----------------------------------------------------------------
:::eClassifiers:::StateMachine:
		
Inherits from: #//Behavior
State machines can be used to express the behavior of part of a system. Behavior is modeled as a traversal of a graph of state nodes interconnected by one or more joined transition arcs that are triggered by the dispatching of series of (event) occurrences. During this traversal, the state machine executes a series of activities associated with various elements of the state machine.

-contents:isConsistentWith:
			
The query isConsistentWith() specifies that a redefining state machine is consistent with a redefined state machine provided that the redefining state machine is an extension of the redefined state machine: Regions are inherited and regions can be added, inherited regions can be redefined. In case of multiple redefining state machines, extension implies that the redefining state machine gets orthogonal regions for each of the redefined state machines.
result = true


-eOperations:method:
			
A state machine as the method for a behavioral feature cannot have entry/exit connection points.
specification->notEmpty() implies connectionPoint->isEmpty()


-eOperations:classifier_context:
			
The classifier context of a state machine cannot be an interface.
context->notEmpty() implies not context.oclIsKindOf(Interface)


-eOperations:context_classifier:
			
The context classifier of the method state machine of a behavioral feature must be the classifier that owns the behavioral feature.
specification->notEmpty() implies (context->notEmpty() and specification->featuringClassifier->exists (c | c = context))


-eOperations:connection_points:
			
The connection points of a state machine are pseudostates of kind entry point or exit point.
conectionPoint->forAll (c | c.kind = #entryPoint or c.kind = #exitPoint)


-eOperations:LCA:
			
The operation LCA(s1,s2) returns an orthogonal state or region which is the least common ancestor of states s1 and s2, based on the statemachine containment hierarchy.
true


-eOperations:ancestor:
			
The query ancestor(s1, s2) checks whether s1 is an ancestor state of state s2.
result = 
if (s2 = s1) then 
	true 
else 
	if (s2.container->isEmpty() or not s2.container.owner.oclIsKindOf(State)) then 
		false 
	else 
		ancestor(s1, s2.container.owner.oclAsType(State))
	endif
endif 



-eOperations:isRedefinitionContextValid:
			
The query isRedefinitionContextValid() specifies whether the redefinition contexts of a statemachine are properly related to the redefinition contexts of the specified statemachine to allow this element to redefine the other. The containing classifier of a redefining statemachine must redefine the containing classifier of the redefined statemachine.
result = true


-eStructuralFeatures:connectionPoint:
			
The connection points defined for this state machine. They represent the interface of the state machine when used as part of submachine state.


-eStructuralFeatures:submachineState:
			
References the submachine(s) in case of a submachine state. Multiple machines are referenced in case of a concurrent state.


-eStructuralFeatures:region:
			
The regions owned directly by the state machine.


-eStructuralFeatures:extendedStateMachine:
			
The state machines of which this is an extension.

----------------------------------------------------------------
:::eClassifiers:::Pseudostate:
		
Inherits from: #//Vertex
A pseudostate is an abstraction that encompasses different types of transient vertices in the state machine graph.

-eOperations:junction_vertex:
			
In a complete statemachine, a junction vertex must have at least one incoming and one outgoing transition.
(self.kind = #junction) implies
((self.incoming->size >= 1) and (self.outgoing->size >= 1))



-eOperations:history_vertices:
			
History vertices can have at most one outgoing transition.
((self.kind = #deepHistory) or (self.kind = #shallowHistory)) implies
(self.outgoing->size <= 1)



-eOperations:transitions_outgoing:
			
All transitions outgoing a fork vertex must target states in different regions of an orthogonal state.
(self.kind = #fork) implies
  self.outgoing->forAll (t1, t2 | t1<>t2 implies
    (self.stateMachine.LCA(t1.target, t2.target).container.isOrthogonal))


-eOperations:outgoing_from_initial:
			
The outgoing transition from and initial vertex may have a behavior, but not a trigger or a guard.
(self.kind = #initial) implies (self.outgoing.guard->isEmpty()
  and self.outgoing.trigger->isEmpty())


-eOperations:fork_vertex:
			
In a complete statemachine, a fork vertex must have at least two outgoing transitions and exactly one incoming transition.
(self.kind = #fork) implies
((self.incoming->size = 1) and (self.outgoing->size >= 2))



-eOperations:join_vertex:
			
In a complete statemachine, a join vertex must have at least two incoming transitions and exactly one outgoing transition.
(self.kind = #join) implies
((self.outgoing->size = 1) and (self.incoming->size >= 2))



-eOperations:choice_vertex:
			
In a complete statemachine, a choice vertex must have at least one incoming and one outgoing transition.
(self.kind = #choice) implies
((self.incoming->size >= 1) and (self.outgoing->size >= 1))



-eOperations:initial_vertex:
			
An initial vertex can have at most one outgoing transition.
(self.kind = #initial) implies (self.outgoing->size <= 1)


-eOperations:transitions_incoming:
			
All transitions incoming a join vertex must originate in different regions of an orthogonal state.
(self.kind = #join) implies
  self.incoming->forAll (t1, t2 | t1<>t2 implies
    (self.stateMachine.LCA(t1.source, t2.source).container.isOrthogonal))


-eStructuralFeatures:state:
			
The State that owns this pseudostate and in which it appears.


-eStructuralFeatures:kind:
			
Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.


-eStructuralFeatures:stateMachine:
			
The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.

----------------------------------------------------------------
:::eClassifiers:::Vertex:
		
Inherits from: #//NamedElement
A vertex is an abstraction of a node in a state machine graph. In general, it can be the source or destination of any number of transitions.

-eOperations:containingStateMachine:
			
The operation containingStateMachine() returns the state machine in which this Vertex is defined
result = if not container->isEmpty()
then
-- the container is a region
container.containingStateMachine()
else if (oclIsKindOf(Pseudostate)) then
-- entry or exit point?
if (kind = #entryPoint) or (kind = #exitPoint) then
stateMachine
else if (oclIsKindOf(ConnectionPointReference)) then
state.containingStateMachine() -- no other valid cases possible
endif



-eOperations:getIncomings:
			
Missing derivation for Vertex::/incoming : Transition
result = Transition.allInstances()->select(t | t.target=self)


-eOperations:getOutgoings:
			
Missing derivation for Vertex::/outgoing : Transition
result = Transition.allInstances()->select(t | t.source=self)


-eStructuralFeatures:container:
			
The region that contains this vertex.


-eStructuralFeatures:incoming:
			
Specifies the transitions entering this vertex.


-eStructuralFeatures:outgoing:
			
Specifies the transitions departing from this vertex.

----------------------------------------------------------------
:::eClassifiers:::Region:
		
Inherits from: #//Namespace #//RedefinableElement
A region is an orthogonal part of either a composite state or a state machine. It contains states and transitions.

-contents:isConsistentWith:
			
The query isConsistentWith() specifies that a redefining region is consistent with a redefined region provided that the redefining region is an extension of the redefined region, i.e. it adds vertices and transitions and it redefines states and transitions of the redefined region.
result = true


-contents:redefinitionContext:
			
References the classifier in which context this element may be redefined.


-eOperations:shallow_history_vertex:
			
A region can have at most one shallow history vertex
self.subvertex->select(v | v.oclIsKindOf(Pseudostate))->
select(p : Pseudostate | p.kind = #shallowHistory)->size() <= 1



-eOperations:deep_history_vertex:
			
A region can have at most one deep history vertex
self.subvertex->select (v | v.oclIsKindOf(Pseudostate))->
select(p : Pseudostate | p.kind = #deepHistory)->size() <= 1



-eOperations:initial_vertex:
			
A region can have at most one initial vertex
self.subvertex->select (v | v.oclIsKindOf(Pseudostate))->
select(p : Pseudostate | p.kind = #initial)->size() <= 1



-eOperations:owned:
			
If a Region is owned by a StateMachine, then it cannot also be owned by a State and vice versa.
(stateMachine->notEmpty() implies state->isEmpty()) and (state->notEmpty() implies stateMachine->isEmpty())


-eOperations:belongsToPSM:
			
The operation belongsToPSM () checks if the region belongs to a protocol state machine
result = if not stateMachine->isEmpty() then
oclIsTypeOf(ProtocolStateMachine)
else if not state->isEmpty() then
state.container.belongsToPSM ()
else false


-eOperations:containingStateMachine:
			
The operation containingStateMachine() returns the sate machine in which this Region is defined
result = if stateMachine->isEmpty() 
then
state.containingStateMachine()
else
stateMachine
endif


-eOperations:isRedefinitionContextValid:
			
The query isRedefinitionContextValid() specifies whether the redefinition contexts of a region are properly related to the redefinition contexts of the specified region to allow this element to redefine the other. The containing statemachine/state of a redefining region must redefine the containing statemachine/state of the redefined region.
result = true


-eOperations:redefinitionContext:
			
The redefinition context of a region is the nearest containing statemachine
result = let sm = containingStateMachine() in
if sm.context->isEmpty() or sm.general->notEmpty() then
sm
else
sm.context
endif


-eStructuralFeatures:extendedRegion:
			
The region of which this region is an extension.


-eStructuralFeatures:state:
			
The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.


-eStructuralFeatures:stateMachine:
			
The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.


-eStructuralFeatures:transition:
			
The set of transitions owned by the region.


-eStructuralFeatures:subvertex:
			
The set of vertices that are owned by this region.

----------------------------------------------------------------
:::eClassifiers:::State:
		
Inherits from: #//Namespace #//RedefinableElement #//Vertex
A state models a situation during which some (usually implicit) invariant condition holds.
The states of protocol state machines are exposed to the users of their context classifiers. A protocol state represents an exposed stable situation of its context classifier: when an instance of the classifier is not processing any operation, users of this instance can always know its state configuration.

-contents:containingStateMachine:
			
The query containingStateMachine() returns the state machine that contains the state either directly or transitively.
result = container.containingStateMachine()


-contents:isConsistentWith:
			
The query isConsistentWith() specifies that a redefining state is consistent with a redefined state provided that the redefining state is an extension of the redefined state: A simple state can be redefined (extended) to become a composite state (by adding a region) and a composite state can be redefined (extended) by adding regions and by adding vertices, states, and transitions to inherited regions. All states may add or replace entry, exit, and 'doActivity' actions.
result = true


-contents:redefinitionContext:
			
References the classifier in which context this element may be redefined.


-eOperations:entry_or_exit:
			
Only entry or exit pseudostates can serve as connection points.
connectionPoint->forAll(cp|cp.kind = #entry or cp.kind = #exit)


-eOperations:composite_states:
			
Only composite states can have entry or exit pseudostates defined.
connectionPoint->notEmpty() implies isComoposite


-eOperations:destinations_or_sources_of_transitions:
			
The connection point references used as destinations/sources of transitions associated with a submachine state must be defined as entry/exit points in the submachine state machine.
self.isSubmachineState implies (self.connection->forAll (cp |
cp.entry->forAll (p | p.statemachine = self.submachine) and
cp.exit->forAll (p | p.statemachine = self.submachine)))


-eOperations:submachine_or_regions:
			
A state is not allowed to have both a submachine and regions.
isComposite implies not isSubmachineState


-eOperations:submachine_states:
			
Only submachine states can have connection point references.
isSubmachineState implies connection->notEmpty ( )


-eOperations:isComposite:
			
A composite state is a state with at least one region.
result = region.notEmpty()


-eOperations:isOrthogonal:
			
An orthogonal state is a composite state with at least 2 regions
result = (region->size () > 1)


-eOperations:isRedefinitionContextValid:
			
The query isRedefinitionContextValid() specifies whether the redefinition contexts of a state are properly related to the redefinition contexts of the specified state to allow this element to redefine the other. The containing region of a redefining state must redefine the containing region of the redefined state.
result = true


-eOperations:isSimple:
			
A simple state is a state without any regions.
result = region.isEmpty()


-eOperations:isSubmachineState:
			
Only submachine states can have a reference statemachine.
result = submachine.notEmpty()


-eOperations:redefinitionContext:
			
The redefinition context of a state is the nearest containing statemachine.
result = let sm = containingStateMachine() in
if sm.context->isEmpty() or sm.general->notEmpty() then
sm
else
sm.context
endif


-eStructuralFeatures:connection:
			
The entry and exit connection points used in conjunction with this (submachine) state, i.e. as targets and sources, respectively, in the region with the submachine state. A connection point reference references the corresponding definition of a connection point pseudostate in the statemachine referenced by the submachinestate.


-eStructuralFeatures:connectionPoint:
			
The entry and exit pseudostates of a composite state. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite states.


-eStructuralFeatures:deferrableTrigger:
			
A list of triggers that are candidates to be retained by the state machine if they trigger no transitions out of the state (not consumed). A deferred trigger is retained until the state machine reaches a state configuration where it is no longer deferred.


-eStructuralFeatures:doActivity:
			
An optional behavior that is executed while being in the state. The execution starts when this state is entered, and stops either by itself, or when the state is exited, whichever comes first.


-eStructuralFeatures:entry:
			
An optional behavior that is executed whenever this state is entered regardless of the transition taken to reach the state. If defined, entry actions are always executed to completion prior to any internal behavior or transitions performed within the state.


-eStructuralFeatures:exit:
			
An optional behavior that is executed whenever this state is exited regardless of which transition was taken out of the state. If defined, exit actions are always executed to completion only after all internal activities and transition actions have completed execution.


-eStructuralFeatures:isComposite:
			
A state with isComposite=true is said to be a composite state. A composite state is a state that contains at least one region.


-eStructuralFeatures:isOrthogonal:
			
A state with isOrthogonal=true is said to be an orthogonal composite state. An orthogonal composite state contains two or more regions.


-eStructuralFeatures:isSimple:
			
A state with isSimple=true is said to be a simple state. A simple state does not have any regions and it does not refer to any submachine state machine.


-eStructuralFeatures:isSubmachineState:
			
A state with isSubmachineState=true is said to be a submachine state. Such a state refers to a state machine (submachine).


-eStructuralFeatures:redefinedState:
			
The state of which this state is a redefinition.


-eStructuralFeatures:stateInvariant:
			
Specifies conditions that are always true when this state is the current state. In protocol state machines, state invariants are additional conditions to the preconditions of the outgoing transitions, and to the postcondition of the incoming transitions.


-eStructuralFeatures:submachine:
			
The state machine that is to be inserted in place of the (submachine) state.


-eStructuralFeatures:region:
			
The regions owned directly by the state.

----------------------------------------------------------------
:::eClassifiers:::ConnectionPointReference:
		
Inherits from: #//Vertex
A connection point reference represents a usage (as part of a submachine state) of an entry/exit point defined in the statemachine reference by the submachine state.

-eOperations:entry_pseudostates:
			
The entry Pseudostates must be Pseudostates with kind entryPoint.
entry->notEmpty() implies entry->forAll(e | e.kind = #entryPoint)


-eOperations:exit_pseudostates:
			
The exit Pseudostates must be Pseudostates with kind exitPoint.
exit->notEmpty() implies exit->forAll(e | e.kind = #exitPoint)


-eStructuralFeatures:entry:
			
The entryPoint kind pseudo states corresponding to this connection point.


-eStructuralFeatures:exit:
			
The exitPoints kind pseudo states corresponding to this connection point.


-eStructuralFeatures:state:
			
The State in which the connection point refreshens are defined.

----------------------------------------------------------------
:::eClassifiers:::Trigger:
		
Inherits from: #//NamedElement
A trigger specification may be qualified by the port on which the event occurred.
A trigger relates an event to a behavior that may affect an instance of the classifier.

-eStructuralFeatures:event:
			
The event that causes the trigger.


-eStructuralFeatures:port:
			
A optional port of the receiver object on which the behavioral feature is invoked.

----------------------------------------------------------------
:::eClassifiers:::Event:
		
Inherits from: #//PackageableElement
An event is the specification of some occurrence that may potentially trigger effects by an object.
----------------------------------------------------------------
:::eClassifiers:::Port:
		
Inherits from: #//Property
A port has an associated protocol state machine.
A port is a property of a classifier that specifies a distinct interaction point between that classifier and its environment or between the (behavior of the) classifier and its internal parts. Ports are connected to properties of the classifier by connectors through which requests can be made to invoke the behavioral features of a classifier. A Port may specify the services a classifier provides (offers) to its environment as well as the services that a classifier expects (requires) of its environment.

-eOperations:default_value:
			
A defaultValue for port cannot be specified when the type of the Port is an Interface
true


-eOperations:port_aggregation:
			
Port.aggregation must be composite.
true


-eOperations:port_destroyed:
			
When a port is destroyed, all connectors attached to this port will be destroyed also.
true


-eOperations:getProvideds:
			
Missing derivation for Port::/provided : Interface
true


-eOperations:getRequireds:
			
Missing derivation for Port::/required : Interface
true


-eStructuralFeatures:isBehavior:
			
Specifies whether requests arriving at this port are sent to the classifier behavior of this classifier. Such ports are referred to as behavior port. Any invocation of a behavioral feature targeted at a behavior port will be handled by the instance of the owning classifier itself, rather than by any instances that this classifier may contain.


-eStructuralFeatures:isConjugated:
			
Specifies the way that the provided and required interfaces are derived from the Portâ€™s Type. The default value is false.


-eStructuralFeatures:isService:
			
If true indicates that this port is used to provide the published functionality of a classifier; if false, this port is used to implement the classifier but is not part of the essential externally-visible functionality of the classifier and can, therefore, be altered or deleted along with the internal implementation of the classifier and other properties that are considered part of its implementation.


-eStructuralFeatures:protocol:
			
References an optional protocol state machine which describes valid interactions at this interaction point.


-eStructuralFeatures:provided:
			
References the interfaces specifying the set of operations and receptions that the classifier offers to its environment via this port, and which it will handle either directly or by forwarding it to a part of its internal structure. This association is derived according to the value of isConjugated. If isConjugated is false, provided is derived as the union of the sets of interfaces realized by the type of the port and its supertypes, or directly from the type of the port if the port is typed by an interface. If isConjugated is true, it is derived as the union of the sets of interfaces used by the type of the port and its supertypes.


-eStructuralFeatures:redefinedPort:
			
A port may be redefined when its containing classifier is specialized. The redefining port may have additional interfaces to those that are associated with the redefined port or it may replace an interface by one of its subtypes.


-eStructuralFeatures:required:
			
References the interfaces specifying the set of operations and receptions that the classifier expects its environment to handle via this port. This association is derived according to the value of isConjugated. If isConjugated is false, required is derived as the union of the sets of interfaces used by the type of the port and its supertypes. If isConjugated is true, it is derived as the union of the sets of interfaces realized by the type of the port and its supertypes, or directly from the type of the port if the port is typed by an interface.

----------------------------------------------------------------
:::eClassifiers:::Constraint:
		
Inherits from: #//PackageableElement
A constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an element.

-eOperations:not_apply_to_self:
			
A constraint cannot be applied to itself.
not constrainedElement->includes(self)


-eOperations:no_side_effects:
			
Evaluating the value specification for a constraint must not have side effects.
true


-eOperations:boolean_value:
			
The value specification for a constraint must evaluate to a Boolean value.
true


-eOperations:value_specification_boolean:
			
The value specification for a constraint must evaluate to a Boolean value.
self.specification().booleanValue().isOclKindOf(Boolean)


-eStructuralFeatures:constrainedElement:
			
The ordered set of Elements referenced by this Constraint.


-eStructuralFeatures:context:
			
Specifies the namespace that owns the NamedElement.


-eStructuralFeatures:specification:
			
A condition that must be true when evaluated in order for the constraint to be satisfied.

----------------------------------------------------------------
:::eClassifiers:::Transition:
		
Inherits from: #//Namespace #//RedefinableElement
A transition is a directed relationship between a source vertex and a target vertex. It may be part of a compound transition, which takes the state machine from one state configuration to another, representing the complete response of the state machine to an occurrence of an event of a particular type.

-contents:isConsistentWith:
			
The query isConsistentWith() specifies that a redefining transition is consistent with a redefined transition provided that the redefining transition has the following relation to the redefined transition: A redefining transition redefines all properties of the corresponding redefined transition, except the source state and the trigger.
redefinee.isRedefinitionContextValid(self)
result = (redefinee.oclIsKindOf(Transition) and
  let trans: Transition = redefinee.oclAsType(Transition) in
    (source() = trans.source() and trigger() = tran.trigger())


-contents:redefinitionContext:
			
References the classifier in which context this element may be redefined.


-eOperations:state_is_local:
			
A transition with kind local must have a composite state or an entry point as its source.
(kind = TransitionKind::local) implies
		((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or
		(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))


-eOperations:fork_segment_guards:
			
A fork segment must not have guards or triggers.
(source.oclIsKindOf(Pseudostate) and source.kind = #fork) implies (guard->isEmpty() and trigger->isEmpty())


-eOperations:join_segment_state:
			
A join segment must always originate from a state.
(target.oclIsKindOf(Pseudostate) and target.kind = #join) implies (source.oclIsKindOf(State))


-eOperations:initial_transition:
			
An initial transition at the topmost level (region of a statemachine) either has no trigger or it has a trigger with the stereotype >.
self.source.oclIsKindOf(Pseudostate) implies
(self.source.oclAsType(Pseudostate).kind = #initial) implies
(self.source.container = self.stateMachine.top) implies
((self.trigger->isEmpty) or
(self.trigger.stereotype.name = 'create'))



-eOperations:outgoing_pseudostates:
			
Transitions outgoing pseudostates may not have a trigger.
source.oclIsKindOf(Pseudostate) and (source.kind <> #initial)) implies trigger->isEmpty()


-eOperations:signatures_compatible:
			
In case of more than one trigger, the signatures of these must be compatible in case the parameters of the signal are assigned to local variables/attributes.
true


-eOperations:state_is_internal:
			
A transition with kind internal must have a state as its source, and its source and target must be equal.
(kind = TransitionKind::internal) implies
		(source.oclIsKindOf (State) and source = target)


-eOperations:join_segment_guards:
			
A join segment must not have guards or triggers.
(target.oclIsKindOf(Pseudostate) and target.kind = #join) implies (guard->isEmpty() and trigger->isEmpty())


-eOperations:fork_segment_state:
			
A fork segment must always target a state.
(source.oclIsKindOf(Pseudostate) and source.kind = #fork) implies (target.oclIsKindOf(State))


-eOperations:state_is_external:
			
A transition with kind external can source any vertex except entry points.
(kind = TransitionKind::external) implies
	not (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)


-eOperations:containingStateMachine:
			
The query containingStateMachine() returns the state machine that contains the transition either directly or transitively.
result = container.containingStateMachine()


-eOperations:redefinitionContext:
			
The redefinition context of a transition is the nearest containing statemachine.
result = let sm = containingStateMachine() in
if sm.context->isEmpty() or sm.general->notEmpty() then
sm
else
sm.context
endif


-eStructuralFeatures:effect:
			
Specifies an optional behavior to be performed when the transition fires.


-eStructuralFeatures:guard:
			
A guard is a constraint that provides a fine-grained control over the firing of the transition. The guard is evaluated when an event occurrence is dispatched by the state machine. If the guard is true at that time, the transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.


-eStructuralFeatures:kind:
			
Indicates the precise type of the transition.


-eStructuralFeatures:redefinedTransition:
			
The transition that is redefined by this transition.


-eStructuralFeatures:source:
			
Designates the originating vertex (state or pseudostate) of the transition.


-eStructuralFeatures:target:
			
Designates the target vertex that is reached when the transition is taken.


-eStructuralFeatures:trigger:
			
Specifies the triggers that may fire the transition.


-eStructuralFeatures:container:
			
Designates the region that owns this transition.

----------------------------------------------------------------
:::eClassifiers:::TransitionKind:
		
TransitionKind is an enumeration type.
----------------------------------------------------------------
:::eClassifiers:::PseudostateKind:
		
PseudostateKind is an enumeration type.
----------------------------------------------------------------
:::eClassifiers:::ProtocolConformance:
		
Inherits from: #//DirectedRelationship
Protocol state machines can be redefined into more specific protocol state machines, or into behavioral state machines. Protocol conformance declares that the specific protocol state machine specifies a protocol that conforms to the general state machine one, or that the specific behavioral state machine abide by the protocol of the general protocol state machine.

-eStructuralFeatures:generalMachine:
			
Specifies the protocol state machine to which the specific state machine conforms.


-eStructuralFeatures:specificMachine:
			
Specifies the state machine which conforms to the general state machine.

----------------------------------------------------------------
:::eClassifiers:::Parameter:
		
Inherits from: #//ConnectableElement #//MultiplicityElement
Parameters are allowed to be treated as connectable elements.
A parameter is a specification of an argument used to pass information into or out of an invocation of a behavioral feature.
Parameters have support for streaming, exceptions, and parameter sets.

-eOperations:reentrant_behaviors:
			
Reentrant behaviors cannot have stream parameters.
true


-eOperations:connector_end:
			
A parameter may only be associated with a connector end within the context of a collaboration.
self.end.notEmpty() implies self.collaboration.notEmpty()


-eOperations:not_exception:
			
An input parameter cannot be an exception.
true


-eOperations:in_and_out:
			
Only in and inout parameters may have a delete effect. Only out, inout, and return parameters may have a create effect.
true


-eOperations:stream_and_exception:
			
A parameter cannot be a stream and exception at the same time.
true


-eOperations:isSetDefault:
			
true


-eOperations:setBooleanDefaultValue:
			
Sets the default value for this parameter to the specified Boolean value.


-eOperations:setDefault:
			
true


-eOperations:setIntegerDefaultValue:
			
Sets the default value for this parameter to the specified integer value.


-eOperations:setNullDefaultValue:
			
Sets the default value for this parameter to the null value.


-eOperations:setRealDefaultValue:
			
Sets the default value for this parameter to the specified real value.


-eOperations:setStringDefaultValue:
			
Sets the default value for this parameter to the specified string value.


-eOperations:setUnlimitedNaturalDefaultValue:
			
Sets the default value for this parameter to the specified unlimited natural value.


-eOperations:unsetDefault:
			
true


-eOperations:getDefault:
			
Missing derivation for Parameter::/default : String
true


-eStructuralFeatures:default:
			
Specifies a String that represents a value to be used when no argument is supplied for the Parameter.


-eStructuralFeatures:defaultValue:
			
Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter.


-eStructuralFeatures:direction:
			
Indicates whether a parameter is being sent into or out of a behavioral element.


-eStructuralFeatures:effect:
			
Specifies the effect that the owner of the parameter has on values passed in or out of the parameter.


-eStructuralFeatures:isException:
			
Tells whether an output parameter may emit a value to the exclusion of the other outputs.


-eStructuralFeatures:isStream:
			
Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter post values while the behavior is executing.


-eStructuralFeatures:operation:
			
References the Operation owning this parameter.


-eStructuralFeatures:parameterSet:
			
The parameter sets containing the parameter. See ParameterSet.

----------------------------------------------------------------
:::eClassifiers:::ParameterDirectionKind:
		
Parameter direction kind is an enumeration type that defines literals used to specify direction of parameters.
----------------------------------------------------------------
:::eClassifiers:::ParameterEffectKind:
		
The datatype ParameterEffectKind is an enumeration that indicates the effect of a behavior on values passed in or out of its parameters.
----------------------------------------------------------------
:::eClassifiers:::ParameterSet:
		
Inherits from: #//NamedElement
A parameter set is an element that provides alternative sets of inputs or outputs that a behavior may use.

-eOperations:two_parameter_sets:
			
Two parameter sets cannot have exactly the same set of parameters.
true


-eOperations:input:
			
If a behavior has input parameters that are in a parameter set, then any inputs that are not in a parameter set must be streaming. Same for output parameters.
true


-eOperations:same_parameterized_entity:
			
The parameters in a parameter set must all be inputs or all be outputs of the same parameterized entity, and the parameter set is owned by that entity.
true


-eStructuralFeatures:condition:
			
Constraint that should be satisfied for the owner of the parameters in an input parameter set to start execution using the values provided for those parameters, or the owner of the parameters in an output parameter set to end execution providing the values for those parameters, if all preconditions and conditions on input parameter sets were satisfied.


-eStructuralFeatures:parameter:
			
Parameters in the parameter set.

----------------------------------------------------------------
:::eClassifiers:::DataType:
		
Inherits from: #//Classifier
A data type is a type whose instances are identified only by their value. A data type may contain attributes to support the modeling of structured data types.

-contents:inherit:
			
The inherit operation is overridden to exclude redefined properties.
result = inhs->excluding(inh | ownedMember->select(oclIsKindOf(RedefinableElement))->select(redefinedElement->includes(inh)))


-eOperations:createOwnedAttribute:
			
Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this data type.


-eOperations:createOwnedOperation:
			
Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this data type.


-eStructuralFeatures:ownedAttribute:
			
The Attributes owned by the DataType.


-eStructuralFeatures:ownedOperation:
			
The Operations owned by the DataType.

----------------------------------------------------------------
:::eClassifiers:::OperationTemplateParameter:
		
Inherits from: #//TemplateParameter
An operation template parameter exposes an operation as a formal parameter for a template.

-contents:parameteredElement:
			
The operation for this template parameter.

----------------------------------------------------------------
:::eClassifiers:::AggregationKind:
		
AggregationKind is an enumeration type that specifies the literals for defining the kind of aggregation of a property.
----------------------------------------------------------------
:::eClassifiers:::ExtensionEnd:
		
Inherits from: #//Property
An extension end is used to tie an extension to a stereotype when extending a metaclass.
The default multiplicity of an extension end is 0..1.

-contents:getLower:
			
true


-contents:setLower:
			



-contents:lowerBound:
			
The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the default lower bound, which normally, for MultiplicityElements, evaluates to 1 if empty.
result = lowerBound = if lowerValue->isEmpty() then 0 else lowerValue->IntegerValue() endif


-contents:lower:
			
This redefinition changes the default multiplicity of association ends, since model elements are usually extended by 0 or 1 instance of the extension stereotype.


-contents:type:
			
References the type of the ExtensionEnd. Note that this association restricts the possible types of an ExtensionEnd to only be Stereotypes.


-eOperations:multiplicity:
			
The multiplicity of ExtensionEnd is 0..1 or 1.
(self->lowerBound() = 0 or self->lowerBound() = 1) and self->upperBound() = 1


-eOperations:aggregation:
			
The aggregation of an ExtensionEnd is composite.
self.aggregation = #composite

----------------------------------------------------------------
:::eClassifiers:::Model:
		
Inherits from: #//Package
A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.

-eOperations:isMetamodel:
			
Determines whether this model is a metamodel.


-eStructuralFeatures:viewpoint:
			
The name of the viewpoint that is expressed by a model (This name may refer to a profile definition).

----------------------------------------------------------------
:::eClassifiers:::Enumeration:
		
Inherits from: #//DataType
An enumeration is a data type whose values are enumerated in the model as enumeration literals.

-eStructuralFeatures:ownedLiteral:
			
The ordered set of literals for this Enumeration.

----------------------------------------------------------------
:::eClassifiers:::EnumerationLiteral:
		
Inherits from: #//InstanceSpecification
An enumeration literal is a user-defined data value for an enumeration.

-contents:classifier:
			
The classifier of this EnumerationLiteral derived to be equal to its enumeration.


-eOperations:classifier_equals_owning_enumeration:
			
classifier = enumeration


-eOperations:getClassifiers:
			
true


-eOperations:getClassifier:
			
Missing derivation for EnumerationLiteral::/classifier : Enumeration
true


-eStructuralFeatures:enumeration:
			
The Enumeration that this EnumerationLiteral is a member of.

----------------------------------------------------------------
:::eClassifiers:::InstanceSpecification:
		
Inherits from: #//DeploymentTarget #//PackageableElement #//DeployedArtifact
An instance specification has the capability of being a deployment target in a deployment relationship, in the case that it is an instance of a node. It is also has the capability of being a deployed artifact, if it is an instance of an artifact.
An instance specification is a model element that represents an instance in a modeled system.

-eOperations:structural_feature:
			
One structural feature (including the same feature inherited from multiple classifiers) is the defining feature of at most one slot in an instance specification.
classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))


-eOperations:defining_feature:
			
The defining feature of each slot is a structural feature (directly or inherited) of a classifier of the instance specification.
slot->forAll(s | classifier->exists (c | c.allFeatures()->includes (s.definingFeature)))


-eOperations:deployment_target:
			
An InstanceSpecification can be a DeploymentTarget if it is the instance specification of a Node and functions as a part in the internal structure of an encompassing Node.
true


-eOperations:deployment_artifact:
			
An InstanceSpecification can be a DeployedArtifact if it is the instance specification of an Artifact.
true


-eStructuralFeatures:classifier:
			
The classifier or classifiers of the represented instance. If multiple classifiers are specified, the instance is classified by all of them.


-eStructuralFeatures:slot:
			
A slot giving the value or values of a structural feature of the instance. An instance specification can have one slot per structural feature of its classifiers, including inherited features. It is not necessary to model a slot for each structural feature, in which case the instance specification is a partial description.


-eStructuralFeatures:specification:
			
A specification of how to compute, derive, or construct the instance.

----------------------------------------------------------------
:::eClassifiers:::Slot:
		
Inherits from: #//Element
A slot specifies that an entity modeled by an instance specification has a value or values for a specific structural feature.

-eStructuralFeatures:definingFeature:
			
The structural feature that specifies the values that may be held by the slot.


-eStructuralFeatures:value:
			
The value or values corresponding to the defining feature for the owning instance specification.


-eStructuralFeatures:owningInstance:
			
The instance specification that owns this slot.

----------------------------------------------------------------
:::eClassifiers:::PrimitiveType:
		
Inherits from: #//DataType
A primitive type defines a predefined data type, without any relevant substructure (i.e., it has no parts in the context of UML). A primitive datatype may have an algebra and operations defined outside of UML, for example, mathematically.
----------------------------------------------------------------
:::eClassifiers:::Usage:
		
Inherits from: #//Dependency
A usage is a relationship in which one element requires another element (or set of elements) for its full implementation or operation. A usage is a dependency in which the client requires the presence of the supplier.
----------------------------------------------------------------
:::eClassifiers:::CollaborationUse:
		
Inherits from: #//NamedElement
A collaboration use represents one particular use of a collaboration to explain the relationships between the properties of a classifier. A collaboration use shows how the pattern described by a collaboration is applied in a given context, by binding specific entities from that context to the roles of the collaboration. Depending on the context, these entities could be structural features of a classifier, instance specifications, or even roles in some containing collaboration. There may be multiple occurrences of a given collaboration within a classifier, each involving a different set of roles and connectors. A given role or connector may be involved in multiple occurrences of the same or different collaborations. Associated dependencies map features of the collaboration type to features in the classifier. These dependencies indicate which role in the classifier plays which role in the collaboration.

-eOperations:connectors:
			
The connectors in the classifier connect according to the connectors in the collaboration
true


-eOperations:every_role:
			
Every role in the collaboration is bound within the collaboration use to a connectable element within the owning classifier.
true


-eOperations:client_elements:
			
All the client elements of a roleBinding are in one classifier and all supplier elements of a roleBinding are in one collaboration and they are compatible.
true


-eStructuralFeatures:roleBinding:
			
A mapping between features of the collaboration type and features of the owning classifier. This mapping indicates which connectable element of the classifier plays which role(s) in the collaboration. A connectable element may be bound to multiple roles in the same collaboration use (that is, it may play multiple roles).


-eStructuralFeatures:type:
			
The collaboration which is used in this occurrence. The collaboration defines the cooperation between its roles which are mapped to properties of the classifier owning the collaboration use.

----------------------------------------------------------------
:::eClassifiers:::Collaboration:
		
Inherits from: #//StructuredClassifier #//BehavioredClassifier
A collaboration use represents the application of the pattern described by a collaboration to a specific situation involving specific classes or instances playing the roles of the collaboration.

-eStructuralFeatures:collaborationRole:
			
References connectable elements (possibly owned by other classifiers) which represent roles that instances may play in this collaboration.

----------------------------------------------------------------
:::eClassifiers:::Generalization:
		
Inherits from: #//DirectedRelationship
A generalization is a taxonomic relationship between a more general classifier and a more specific classifier. Each instance of the specific classifier is also an indirect instance of the general classifier. Thus, the specific classifier inherits the features of the more general classifier.
A generalization relates a specific classifier to a more general classifier, and is owned by the specific classifier.

-eOperations:generalization_same_classifier:
			
Every Generalization associated with a given GeneralizationSet must have the same general Classifier. That is, all Generalizations for a particular GeneralizationSet must have the same superclass.
true


-eStructuralFeatures:general:
			
References the general classifier in the Generalization relationship.


-eStructuralFeatures:generalizationSet:
			
Designates a set in which instances of Generalization is considered members.


-eStructuralFeatures:isSubstitutable:
			
Indicates whether the specific classifier can be used wherever the general classifier can be used. If true, the execution traces of the specific classifier will be a superset of the execution traces of the general classifier.


-eStructuralFeatures:specific:
			
References the specializing classifier in the Generalization relationship.

----------------------------------------------------------------
:::eClassifiers:::GeneralizationSet:
		
Inherits from: #//PackageableElement
A generalization set is a packageable element whose instances define collections of subsets of generalization relationships.

-eOperations:maps_to_generalization_set:
			
The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances be its subclasses.
true


-eOperations:generalization_same_classifier:
			
Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.
generalization->collect(g | g.general)->asSet()->size() <= 1


-eStructuralFeatures:isCovering:
			
Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet.


-eStructuralFeatures:isDisjoint:
			
Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty. For example, Person could have two Generalization relationships, each with the different specific Classifier: Manager or Staff. This would be disjoint because every instance of Person must either be a Manager or Staff. In contrast, Person could have two Generalization relationships involving two specific (and non-covering) Classifiers: Sales Person and Manager. This GeneralizationSet would not be disjoint because there are instances of Person which can be a Sales Person and a Manager.


-eStructuralFeatures:powertype:
			
Designates the Classifier that is defined as the power type for the associated GeneralizationSet.


-eStructuralFeatures:generalization:
			
Designates the instances of Generalization which are members of a given GeneralizationSet.

----------------------------------------------------------------
:::eClassifiers:::RedefinableTemplateSignature:
		
Inherits from: #//RedefinableElement #//TemplateSignature
A redefinable template signature supports the addition of formal template parameters in a specialization of a template classifier.

-contents:isConsistentWith:
			
The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, since redefinition only adds new formal parameters.
result = redefinee.oclIsKindOf(RedefineableTemplateSignature)
redefinee.isRedefinitionContextValid(self)


-eOperations:inherited_parameters:
			
The inherited parameters are the parameters of the extended template signature.
if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter endif


-eOperations:getInheritedParameters:
			
Missing derivation for RedefinableTemplateSignature::/inheritedParameter : TemplateParameter
true


-eStructuralFeatures:extendedSignature:
			
The template signature that is extended by this template signature.


-eStructuralFeatures:inheritedParameter:
			
The formal template parameters of the extendedSignature.


-eStructuralFeatures:classifier:
			
The classifier that owns this template signature.

----------------------------------------------------------------
:::eClassifiers:::UseCase:
		
Inherits from: #//BehavioredClassifier
A use case is the specification of a set of actions performed by a system, which yields an observable result that is, typically, of value for one or more actors or other stakeholders of the system.

-eOperations:must_have_name:
			
A UseCase must have a name.
self.name -> notEmpty ()


-eOperations:cannot_include_self:
			
A use case cannot include use cases that directly or indirectly include it.
not self.allIncludedUseCases()->includes(self)


-eOperations:binary_associations:
			
UseCases can only be involved in binary Associations.
true


-eOperations:no_association_to_use_case:
			
UseCases can not have Associations to UseCases specifying the same subject.
true


-eOperations:allIncludedUseCases:
			
The query allIncludedUseCases() returns the transitive closure of all use cases (directly or indirectly) included by this use case.
result = self.include->union(self.include->collect(in | in.allIncludedUseCases()))


-eStructuralFeatures:extend:
			
References the Extend relationships owned by this use case.


-eStructuralFeatures:extensionPoint:
			
References the ExtensionPoints owned by the use case.


-eStructuralFeatures:include:
			
References the Include relationships owned by this use case.


-eStructuralFeatures:subject:
			
References the subjects to which this use case applies. The subject or its parts realize all the use cases that apply to this subject. Use cases need not be attached to any specific subject, however. The subject may, but need not, own the use cases that apply to it.

----------------------------------------------------------------
:::eClassifiers:::Extend:
		
Inherits from: #//NamedElement #//DirectedRelationship
A relationship from an extending use case to an extended use case that specifies how and when the behavior defined in the extending use case can be inserted into the behavior defined in the extended use case.

-eOperations:extension_points:
			
The extension points referenced by the extend relationship must belong to the use case that is being extended.
extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))


-eStructuralFeatures:condition:
			
References the condition that must hold when the first extension point is reached for the extension to take place. If no constraint is associated with the extend relationship, the extension is unconditional.


-eStructuralFeatures:extendedCase:
			
References the use case that is being extended.


-eStructuralFeatures:extensionLocation:
			
An ordered list of extension points belonging to the extended use case, specifying where the respective behavioral fragments of the extending use case are to be inserted. The first fragment in the extending use case is associated with the first extension point in the list, the second fragment with the second point, and so on. (Note that, in most practical cases, the extending use case has just a single behavior fragment, so that the list of extension points is trivial.)


-eStructuralFeatures:extension:
			
References the use case that represents the extension and owns the extend relationship.

----------------------------------------------------------------
:::eClassifiers:::ExtensionPoint:
		
Inherits from: #//RedefinableElement
An extension point identifies a point in the behavior of a use case where that behavior can be extended by the behavior of some other (extending) use case, as specified by an extend relationship.

-eOperations:must_have_name:
			
An ExtensionPoint must have a name.
self.name->notEmpty ()


-eStructuralFeatures:useCase:
			
References the use case that owns this extension point.

----------------------------------------------------------------
:::eClassifiers:::Include:
		
Inherits from: #//NamedElement #//DirectedRelationship
An include relationship defines that a use case contains the behavior defined in another use case.

-eStructuralFeatures:addition:
			
References the use case that is to be included.


-eStructuralFeatures:includingCase:
			
References the use case which will include the addition and owns the include relationship.

----------------------------------------------------------------
:::eClassifiers:::Substitution:
		
Inherits from: #//Realization
A substitution is a relationship between two classifiers signifies that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.

-eStructuralFeatures:contract:
			
The contract with which the substituting classifier complies.


-eStructuralFeatures:substitutingClassifier:
			
Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected.

----------------------------------------------------------------
:::eClassifiers:::ClassifierTemplateParameter:
		
Inherits from: #//TemplateParameter
A classifier template parameter exposes a classifier as a formal template parameter.

-contents:parameteredElement:
			
The parameterable classifier for this template parameter.


-eOperations:has_constraining_classifier:
			
If "allowSubstitutable" is true, then there must be a constrainingClassifier.
allowSubstitutable implies constrainingClassifier->notEmpty()


-eStructuralFeatures:allowSubstitutable:
			
Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.


-eStructuralFeatures:constrainingClassifier:
			
The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any classifier that is compatible with this constraining classifier can be substituted; otherwise, it must be either this classifier or one of its subclasses. If this property is empty, there are no constraints on the classifier that can be used as an argument.

----------------------------------------------------------------
:::eClassifiers:::Connector:
		
Inherits from: #//Feature
A delegation connector is a connector that links the external contract of a component (as specified by its ports) to the realization of that behavior. It represents the forwarding of events (operation requests and events): a signal that arrives at a port that has a delegation connector to one or more parts or ports on parts will be passed on to those targets for handling. An assembly connector is a connector between two or more parts or ports on parts that defines that one or more parts provide the services that other parts use.
Specifies a link that enables communication between two or more instances. This link may be an instance of an association, or it may represent the possibility of the instances being able to communicate because their identities are known by virtue of being passed in as parameters, held in variables or slots, or because the communicating instances are the same instance. The link may be realized by something as simple as a pointer or by something as complex as a network connection. In contrast to associations, which specify links between any instance of the associated classifiers, connectors specify links between instances playing the connected parts only.

-eOperations:compatible:
			
The connectable elements attached to the ends of a connector must be compatible.
true


-eOperations:roles:
			
The ConnectableElements attached as roles to each ConnectorEnd owned by a Connector must be roles of the Classifier that owned the Connector, or they must be ports of such roles.
true


-eOperations:between_interfaces_ports:
			
Each feature of each of the required interfaces of each Port or Part at the end of a connector must have at least one compatible feature among the features of the provided interfaces of Ports or Parts at the other ends, where the required set of (interface) features of a delegating port from the context of the delegating connector is the set of features that exist in the port's provided interfaces, and the provided set of (interface) features of a delegating port from the context of the delegating connector is the set of features that exist in the port's required interfaces.
true


-eOperations:types:
			
The types of the connectable elements that the ends of a connector are attached to must conform to the types of the association ends of the association that types the connector, if any.
true


-eOperations:getKind:
			
Missing derivation for Connector::/kind : ConnectorKind
result =
if end->exists(
		role.oclIsKindOf(Port) 
		and partWithPort->isEmpty()
		and not role.oclAsType(Port).isBehavior)
then ConnectorKind::delegation 
else ConnectorKind::assembly 
endif


-eStructuralFeatures:contract:
			
The set of Behaviors that specify the valid interaction patterns across the connector.


-eStructuralFeatures:end:
			
A connector consists of at least two connector ends, each representing the participation of instances of the classifiers typing the connectable elements attached to this end. The set of connector ends is ordered.


-eStructuralFeatures:kind:
			
Indicates the kind of connector. This is derived: a connector with one or more ends connected to a Port which is not on a Part and which is not a behavior port is a delegation; otherwise it is an assembly.


-eStructuralFeatures:redefinedConnector:
			
A connector may be redefined when its containing classifier is specialized. The redefining connector may have a type that specializes the type of the redefined connector. The types of the connector ends of the redefining connector may specialize the types of the connector ends of the redefined connector. The properties of the connector ends of the redefining connector may be replaced.


-eStructuralFeatures:type:
			
An optional association that specifies the link corresponding to this connector.

----------------------------------------------------------------
:::eClassifiers:::ConnectorKind:
		
ConnectorKind is an enumeration type.
----------------------------------------------------------------
:::eClassifiers:::Image:
		
Inherits from: #//Element
Physical definition of a graphical image.

-eStructuralFeatures:content:
			
This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based).


-eStructuralFeatures:format:
			
This indicates the format of the content - which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP. In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example "SVG" could instead be expressed as "MIME: image/svg+xml".


-eStructuralFeatures:location:
			
This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype.

----------------------------------------------------------------
:::eClassifiers:::OpaqueExpression:
		
Inherits from: #//ValueSpecification
An opaque expression is an uninterpreted textual statement that denotes a (possibly empty) set of values when evaluated in a context.
Provides a mechanism for precisely defining the behavior of an opaque expression. An opaque expression is defined by a behavior restricted to return one result.

-contents:stringValue:
			
true


-eOperations:only_return_result_parameters:
			
The behavior may only have return result parameters.
self.behavior.notEmpty() implies
  self.behavior.ownedParameters->select(p | p.direction<>#return)->isEmpty()


-eOperations:one_return_result_parameter:
			
The behavior must have exactly one return result parameter.
self.behavior.notEmpty() implies
  self.behavior.ownedParameter->select(p | p.direction=#return)->size() = 1


-eOperations:language_body_size:
			
If the language attribute is not empty, then the size of the body and language arrays must be the same.
language->notEmpty() implies (body->size() = language->size())


-eOperations:isIntegral:
			
The query isIntegral() tells whether an expression is intended to produce an integer.
result = false


-eOperations:isNonNegative:
			
The query isNonNegative() tells whether an integer expression has a non-negative value.
result = false
self.isIntegral()


-eOperations:isPositive:
			
The query isPositive() tells whether an integer expression has a positive value.
result = false
self.isIntegral()


-eOperations:getResult:
			
Missing derivation for OpaqueExpression::/result : Parameter
true


-eOperations:value:
			
The query value() gives an integer value for an expression intended to produce one.
self.isIntegral()
true


-eStructuralFeatures:behavior:
			
Specifies the behavior of the opaque expression.


-eStructuralFeatures:body:
			
The text of the expression, possibly in multiple languages.


-eStructuralFeatures:language:
			
Specifies the languages in which the expression is stated. The interpretation of the expression body depends on the languages. If the languages are unspecified, they might be implicit from the expression body or the context. Languages are matched to body strings by order.


-eStructuralFeatures:result:
			
Restricts an opaque expression to return exactly one return result. When the invocation of the opaque expression completes, a single set of values is returned to its owner. This association is derived from the single return result parameter of the associated behavior.

----------------------------------------------------------------
:::eClassifiers:::AcceptCallAction:
		
Inherits from: #//AcceptEventAction
An accept call action is an accept event action representing the receipt of a synchronous call request. In addition to the normal operation parameters, the action produces an output that is needed later to supply the information to the reply action necessary to return control to the caller. This action is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent reply action will complete immediately with no effects.

-eOperations:trigger_call_event:
			
The trigger event must be a CallEvent.
trigger.event.oclIsKindOf(CallEvent)


-eOperations:unmarshall:
			
isUnmrashall must be true for an AcceptCallAction.
isUnmarshall = true


-eOperations:result_pins:
			
The result pins must match the in and inout parameters of the operation specified by the trigger event in number, type, and order.
true


-eStructuralFeatures:returnInformation:
			
Pin where a value is placed containing sufficient information to perform a subsequent reply and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.

----------------------------------------------------------------
:::eClassifiers:::AcceptEventAction:
		
Inherits from: #//Action
A accept event action is an action that waits for the occurrence of an event meeting specified conditions.

-eOperations:no_input_pins:
			
AcceptEventActions may have no input pins.
true


-eOperations:trigger_events:
			
If the trigger events are all TimeEvents, there is exactly one output pin.
true


-eOperations:unmarshall_signal_events:
			
If isUnmarshall is true, there must be exactly one trigger for events of type SignalEvent. The number of result output pins must be the same as the number of attributes of the signal. The type and ordering of each result output pin must be the same as the corresponding attribute of the signal. The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding attribute.
true


-eOperations:no_output_pins:
			
There are no output pins if the trigger events are only ChangeEvents, or if they are only CallEvents when this action is an instance of AcceptEventAction and not an instance of a descendant of AcceptEventAction (such as AcceptCallAction).
true


-eStructuralFeatures:isUnmarshall:
			
Indicates whether there is a single output pin for the event, or multiple output pins for attributes of the event.


-eStructuralFeatures:result:
			
Pins holding the received event objects or their attributes. Event objects may be copied in transmission, so identity might not be preserved.


-eStructuralFeatures:trigger:
			
The type of events accepted by the action, as specified by triggers. For triggers with signal events, a signal of the specified type or any subtype of the specified signal type is accepted.

----------------------------------------------------------------
:::eClassifiers:::Action:
		
Inherits from: #//ExecutableNode
An action has pre- and post-conditions.
An action represents a single step within an activity, that is, one that is not further decomposed within the activity.
An action is a named element that is the fundamental unit of executable functionality. The execution of an action represents some transformation or processing in the modeled system, be it a computer system or otherwise.

-eOperations:getContext:
			
Missing derivation for Action::/context : Classifier
true


-eStructuralFeatures:context:
			
The classifier that owns the behavior of which this action is a part.


-eStructuralFeatures:input:
			
The ordered set of input pins connected to the Action. These are among the total set of inputs.


-eStructuralFeatures:isLocallyReentrant:
			
If true, the action can begin a new, concurrent execution, even if there is already another execution of the action ongoing. If false, the action cannot begin a new execution until any previous execution has completed.


-eStructuralFeatures:localPostcondition:
			
Constraint that must be satisfied when executed is completed.


-eStructuralFeatures:localPrecondition:
			
Constraint that must be satisfied when execution is started.


-eStructuralFeatures:output:
			
The ordered set of output pins connected to the Action. The action places its results onto pins in this set.

----------------------------------------------------------------
:::eClassifiers:::ExecutableNode:
		
Inherits from: #//ActivityNode
AnÂ executableÂ nodeÂ isÂ anÂ abstractÂ classÂ forÂ activityÂ nodesÂ thatÂ mayÂ beÂ executed.Â ItÂ isÂ usedÂ asÂ anÂ attachmentÂ pointÂ forÂ exceptionÂ handlers.
An executable node is an abstract class for activity nodes that may be executed. It is used as an attachment point for exception handlers.

-eStructuralFeatures:handler:
			
A set of exception handlers that are examined if an uncaught exception propagates to the outer level of the executable node.

----------------------------------------------------------------
:::eClassifiers:::ActivityNode:
		
Inherits from: #//RedefinableElement
ActivityNode is an abstract class for points in the flow of an activity connected by edges.

-eOperations:owned:
			
Activity nodes can only be owned by activities or groups.
true


-eOperations:owned_structured_node:
			
Activity nodes may be owned by at most one structured node.
true


-eStructuralFeatures:activity:
			
Activity containing the node.


-eStructuralFeatures:inPartition:
			
Partitions containing the node.


-eStructuralFeatures:inStructuredNode:
			
Structured activity node containing the node.


-eStructuralFeatures:inInterruptibleRegion:
			
Interruptible regions containing the node.


-eStructuralFeatures:outgoing:
			
Edges that have the node as source.


-eStructuralFeatures:incoming:
			
Edges that have the node as target.


-eStructuralFeatures:inGroup:
			
Groups containing the node.


-eStructuralFeatures:redefinedNode:
			
Inherited nodes replaced by this node in a specialization of the activity.

----------------------------------------------------------------
:::eClassifiers:::Activity:
		
Inherits from: #//Behavior
An activity is the specification of parameterized behavior as the coordinated sequencing of subordinate units whose individual elements are actions.

-eOperations:activity_parameter_node:
			
The nodes of the activity must include one ActivityParameterNode for each parameter.
true


-eOperations:autonomous:
			
An activity cannot be autonomous and have a classifier or behavioral feature context at the same time.
true


-eOperations:no_supergroups:
			
The groups of an activity have no supergroups.
true


-eStructuralFeatures:ownedGroup:
			
group


-eStructuralFeatures:edge:
			
Edges expressing flow between nodes of the activity.


-eStructuralFeatures:variable:
			
Top-level variables in the activity.


-eStructuralFeatures:group:
			
Top-level groups in the activity.


-eStructuralFeatures:ownedNode:
			
node


-eStructuralFeatures:isReadOnly:
			
If true, this activity must not make any changes to variables outside the activity or to objects. (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the action, then the model is ill-formed.) The default is false (an activity may make nonlocal changes).


-eStructuralFeatures:isSingleExecution:
			
If true, all invocations of the activity are handled by the same execution.


-eStructuralFeatures:partition:
			
Top-level partitions in the activity.


-eStructuralFeatures:structuredNode:
			
Top-level structured nodes in the activity.


-eStructuralFeatures:node:
			
Nodes coordinated by the activity.

----------------------------------------------------------------
:::eClassifiers:::ActivityGroup:
		
Inherits from: #//NamedElement
ActivityGroup is an abstract class for defining sets of nodes and edges in an activity.

-eOperations:group_owned:
			
Groups may only be owned by activities or groups.
true


-eOperations:not_contained:
			
No node or edge in a group may be contained by its subgroups or its containing groups, transitively.
true


-eOperations:nodes_and_edges:
			
All nodes and edges of the group must be in the same activity as the group.
true


-eStructuralFeatures:containedEdge:
			
Edges immediately contained in the group.


-eStructuralFeatures:containedNode:
			
Nodes immediately contained in the group.


-eStructuralFeatures:inActivity:
			
Activity containing the group.


-eStructuralFeatures:subgroup:
			
Groups immediately contained in the group.


-eStructuralFeatures:superGroup:
			
Group immediately containing the group.

----------------------------------------------------------------
:::eClassifiers:::ActivityEdge:
		
Inherits from: #//RedefinableElement
Activity edges can be contained in interruptible regions.
An activity edge is an abstract class for directed connections between two activity nodes.

-eOperations:owned:
			
Activity edges may be owned only by activities or groups.
true


-eOperations:source_and_target:
			
The source and target of an edge must be in the same activity as the edge.
true


-eOperations:structured_node:
			
Activity edges may be owned by at most one structured node.
true


-eStructuralFeatures:activity:
			
Activity containing the edge.


-eStructuralFeatures:guard:
			
Specification evaluated at runtime to determine if the edge can be traversed.


-eStructuralFeatures:inPartition:
			
Partitions containing the edge.


-eStructuralFeatures:inStructuredNode:
			
Structured activity node containing the edge.


-eStructuralFeatures:interrupts:
			
Region that the edge can interrupt.


-eStructuralFeatures:redefinedEdge:
			
Inherited edges replaced by this edge in a specialization of the activity.


-eStructuralFeatures:source:
			
Node from which tokens are taken when they traverse the edge.


-eStructuralFeatures:target:
			
Node to which tokens are put when they traverse the edge.


-eStructuralFeatures:weight:
			
The minimum number of tokens that must traverse the edge at the same time.


-eStructuralFeatures:inGroup:
			
Groups containing the edge.

----------------------------------------------------------------
:::eClassifiers:::ActivityPartition:
		
Inherits from: #//ActivityGroup
An activity partition is a kind of activity group for identifying actions that have some characteristic in common.

-eOperations:represents_part:
			
If a partition represents a part, then all the non-external partitions in the same dimension and at the same level of nesting in that dimension must represent parts directly contained in the internal structure of the same classifier.
true


-eOperations:represents_classifier:
			
If a non-external partition represents a classifier and is contained in another partition, then the containing partition must represent a classifier, and the classifier of the subpartition must be nested in the classifier represented by the containing partition, or be at the contained end of a strong composition association with the classifier represented by the containing partition.
true


-eOperations:represents_part_and_is_contained:
			
If a partition represents a part and is contained by another partition, then the part must be of a classifier represented by the containing partition, or of a classifier that is the type of a part representing the containing partition.
true


-eOperations:dimension_not_contained:
			
A partition with isDimension = true may not be contained by another partition.
true


-eStructuralFeatures:isDimension:
			
Tells whether the partition groups other partitions along a dimension.


-eStructuralFeatures:isExternal:
			
Tells whether the partition represents an entity to which the partitioning structure does not apply.


-eStructuralFeatures:node:
			
Nodes immediately contained in the group.


-eStructuralFeatures:represents:
			
An element constraining behaviors invoked by nodes in the partition.


-eStructuralFeatures:subpartition:
			
Partitions immediately contained in the partition.


-eStructuralFeatures:superPartition:
			
Partition immediately containing the partition.


-eStructuralFeatures:edge:
			
Edges immediately contained in the group.

----------------------------------------------------------------
:::eClassifiers:::StructuredActivityNode:
		
Inherits from: #//Action #//Namespace #//ActivityGroup
A structured activity node is an executable activity node that may have an expansion into subordinate nodes as an activity group. The subordinate nodes must belong to only one structured activity node, although they may be nested.
Because of the concurrent nature of the execution of actions within and across activities, it can be difficult to guarantee the consistent access and modification of object memory. In order to avoid race conditions or other concurrency-related problems, it is sometimes necessary to isolate the effects of a group of actions from the effects of actions outside the group. This may be indicated by setting the mustIsolate attribute to true on a structured activity node. If a structured activity node is "isolated," then any object used by an action within the node cannot be accessed by any action outside the node until the structured activity node as a whole completes. Any concurrent actions that would result in accessing such objects are required to have their execution deferred until the completion of the node.

-contents:activity:
			
Activity immediately containing the node.


-eOperations:input_pin_edges:
			
The incoming edges of the input pins of a StructuredActivityNode must have sources that are not within the StructuredActivityNode.
true


-eOperations:edges:
			
The edges owned by a structured node must have source and target nodes in the structured node, and vice versa.
true


-eOperations:output_pin_edges:
			
The outgoing edges of the output pins of a StructuredActivityNode must have targets that are not within the StructuredActivityNode.
true


-eStructuralFeatures:mustIsolate:
			
If true, then the actions in the node execute in isolation from actions outside the node.


-eStructuralFeatures:node:
			
Nodes immediately contained in the group.


-eStructuralFeatures:structuredNodeInput:
			



-eStructuralFeatures:structuredNodeOutput:
			



-eStructuralFeatures:variable:
			
A variable defined in the scope of the structured activity node. It has no value and may not be accessed


-eStructuralFeatures:edge:
			
Edges immediately contained in the structured node.

----------------------------------------------------------------
:::eClassifiers:::InputPin:
		
Inherits from: #//Pin
An input pin is a pin that holds input values to be consumed by an action.

-eOperations:outgoing_edges_structured_only:
			
Input pins may have outgoing edges only when they are on actions that are structured nodes, and these edges must target a node contained by the structured node.
true

----------------------------------------------------------------
:::eClassifiers:::Pin:
		
Inherits from: #//ObjectNode #//MultiplicityElement
A pin is a typed element and multiplicity element that provides values to actions and accept result values from them.
A pin is an object node for inputs and outputs to actions.

-eOperations:control_pins:
			
Control pins have a control type
isControl implies isControlType


-eStructuralFeatures:isControl:
			
Tells whether the pins provide data to the actions, or just controls when it executes it.

----------------------------------------------------------------
:::eClassifiers:::ObjectNode:
		
Inherits from: #//ActivityNode #//TypedElement
An object node is an abstract activity node that is part of defining object flow in an activity.
Object nodes have support for token selection, limitation on the number of tokens, specifying the state required for tokens, and carrying control values.

-eOperations:object_flow_edges:
			
All edges coming into or going out of object nodes must be object flow edges.
true


-eOperations:selection_behavior:
			
If an object node has a selection behavior, then the ordering of the object node is ordered, and vice versa.
true


-eOperations:input_output_parameter:
			
A selection behavior has one input parameter and one output parameter. The input parameter must be a bag of elements of the same type as the object node or a supertype of the type of object node. The output parameter must be the same or a subtype of the type of object node. The behavior cannot have side effects.
true


-eStructuralFeatures:inState:
			
The required states of the object available at this point in the activity.


-eStructuralFeatures:isControlType:
			
Tells whether the type of the object node is to be treated as control.


-eStructuralFeatures:ordering:
			
Tells whether and how the tokens in the object node are ordered for selection to traverse edges outgoing from the object node.


-eStructuralFeatures:selection:
			
Selects tokens for outgoing edges.


-eStructuralFeatures:upperBound:
			
The maximum number of tokens allowed in the node. Objects cannot flow into the node if the upper bound is reached.

----------------------------------------------------------------
:::eClassifiers:::ObjectNodeOrderingKind:
		
ObjectNodeOrderingKind is an enumeration indicating queuing order within a node.
----------------------------------------------------------------
:::eClassifiers:::OutputPin:
		
Inherits from: #//Pin
An output pin is a pin that holds output values produced by an action.

-eOperations:incoming_edges_structured_only:
			
Output pins may have incoming edges only when they are on actions that are structured nodes, and these edges may not target a node contained by the structured node.
true

----------------------------------------------------------------
:::eClassifiers:::Variable:
		
Inherits from: #//ConnectableElement #//MultiplicityElement
A variable is considered a connectable element.
Variables are elements for passing data between actions indirectly. A local variable stores values shared by the actions within a structured activity group but not accessible outside it. The output of an action may be written to a variable and read for the input to a subsequent action, which is effectively an indirect data flow path. Because there is no predefined relationship between actions that read and write variables, these actions must be sequenced by control flows to prevent race conditions that may occur between actions that read or write the same variable.

-eOperations:owned:
			
A variable is owned by a StructuredNode or Activity, but not both.
true


-eOperations:isAccessibleBy:
			
The isAccessibleBy() operation is not defined in standard UML. Implementations should define it to specify which actions can access a variable.
result = true


-eStructuralFeatures:activityScope:
			
An activity that owns the variable.


-eStructuralFeatures:scope:
			
A structured activity node that owns the variable.

----------------------------------------------------------------
:::eClassifiers:::InterruptibleActivityRegion:
		
Inherits from: #//ActivityGroup
An interruptible activity region is an activity group that supports termination of tokens flowing in the portions of an activity.

-eOperations:interrupting_edges:
			
Interrupting edges of a region must have their source node in the region and their target node outside the region in the same activity containing the region.
true


-eStructuralFeatures:node:
			
Nodes immediately contained in the group.


-eStructuralFeatures:interruptingEdge:
			
The edges leaving the region that will abort other tokens flowing in the region.

----------------------------------------------------------------
:::eClassifiers:::ExceptionHandler:
		
Inherits from: #//Element
An exception handler is an element that specifies a body to execute in case the specified exception occurs during the execution of the protected node.

-eOperations:one_input:
			
The handler body has one input, and that input is the same as the exception input.
true


-eOperations:edge_source_target:
			
An edge that has a source in an exception handler structured node must have its target in the handler also, and vice versa.
true


-eOperations:result_pins:
			
If the protected node is a StructuredActivityNode with output pins, then the exception handler body must also be a StructuredActivityNode with output pins that correspond in number and types to those of the protected node.
true


-eOperations:exception_body:
			
The exception handler and its input object node are not the source or target of any edge.
true


-eStructuralFeatures:exceptionInput:
			
An object node within the handler body. When the handler catches an exception, the exception token is placed in this node, causing the body to execute.


-eStructuralFeatures:exceptionType:
			
The kind of instances that the handler catches. If an exception occurs whose type is any of the classifiers in the set, the handler catches the exception and executes its body.


-eStructuralFeatures:handlerBody:
			
A node that is executed if the handler satisfies an uncaught exception.


-eStructuralFeatures:protectedNode:
			
The node protected by the handler. The handler is examined if an exception propagates to the outside of the node.

----------------------------------------------------------------
:::eClassifiers:::ActionExecutionSpecification:
		
Inherits from: #//ExecutionSpecification
An action execution specification is a kind of execution specification representing the execution of an action.

-eOperations:action_referenced:
			
The Action referenced by the ActionExecutionSpecification, if any, must be owned by the Interaction owning the ActionExecutionOccurrence.
true


-eStructuralFeatures:action:
			
Action whose execution is occurring.

----------------------------------------------------------------
:::eClassifiers:::ExecutionSpecification:
		
Inherits from: #//InteractionFragment
An execution specification is a specification of the execution of a unit of behavior or action within the lifeline. The duration of an execution specification is represented by two cccurrence specifications, the start occurrence specification and the finish occurrence specification.

-eOperations:same_lifeline:
			
The startEvent and the finishEvent must be on the same Lifeline
start.lifeline = finish.lifeline


-eStructuralFeatures:finish:
			
References the OccurrenceSpecification that designates the finish of the Action or Behavior.


-eStructuralFeatures:start:
			
References the OccurrenceSpecification that designates the start of the Action or Behavior

----------------------------------------------------------------
:::eClassifiers:::InteractionFragment:
		
Inherits from: #//NamedElement
InteractionFragment is an abstract notion of the most general interaction unit. An interaction fragment is a piece of an interaction. Each interaction fragment is conceptually like an interaction by itself.

-eStructuralFeatures:covered:
			
References the Lifelines that the InteractionFragment involves.


-eStructuralFeatures:enclosingInteraction:
			
The Interaction enclosing this InteractionFragment.


-eStructuralFeatures:enclosingOperand:
			
The operand enclosing this InteractionFragment (they may nest recursively)


-eStructuralFeatures:generalOrdering:
			
The general ordering relationships contained in this fragment.

----------------------------------------------------------------
:::eClassifiers:::Lifeline:
		
Inherits from: #//NamedElement
A lifeline represents an individual participant in the interaction. While parts and structural features may have multiplicity greater than 1, lifelines represent only one interacting entity.

-eOperations:interaction_uses_share_lifeline:
			
If two (or more) InteractionUses within one Interaction, refer to Interactions with 'common Lifelines,' those Lifelines must also appear in the Interaction with the InteractionUses. By common Lifelines we mean Lifelines with the same selector and represents associations.
true


-eOperations:same_classifier:
			
The classifier containing the referenced ConnectableElement must be the same classifier, or an ancestor, of the classifier that contains the interaction enclosing this lifeline.
if (represents->notEmpty()) then
(if selector->notEmpty() then represents.isMultivalued() else not represents.isMultivalued())



-eOperations:selector_specified:
			
The selector for a Lifeline must only be specified if the referenced Part is multivalued.
(self.selector->isEmpty() implies not self.represents.isMultivalued()) or
(not self.selector->isEmpty() implies self.represents.isMultivalued())



-eStructuralFeatures:decomposedAs:
			
References the Interaction that represents the decomposition.


-eStructuralFeatures:interaction:
			
References the Interaction enclosing this Lifeline.


-eStructuralFeatures:represents:
			
References the ConnectableElement within the classifier that contains the enclosing interaction.


-eStructuralFeatures:selector:
			
If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.


-eStructuralFeatures:coveredBy:
			
References the InteractionFragments in which this Lifeline takes part.

----------------------------------------------------------------
:::eClassifiers:::PartDecomposition:
		
Inherits from: #//InteractionUse
A part decomposition is a description of the internal interactions of one lifeline relative to an interaction.

-eOperations:parts_of_internal_structures:
			
PartDecompositions apply only to Parts that are Parts of Internal Structures not to Parts of Collaborations.
true


-eOperations:assume:
			
Assume that within Interaction X, Lifeline L is of class C and decomposed to D. Within X there is a sequence of constructs along L (such constructs are CombinedFragments, InteractionUse and (plain) OccurrenceSpecifications). Then a corresponding sequence of constructs must appear within D, matched one-to-one in the same order. i) CombinedFragment covering L are matched with an extra-global CombinedFragment in D ii) An InteractionUse covering L are matched with a global (i.e. covering all Lifelines) InteractionUse in D. iii) A plain OccurrenceSpecification on L is considered an actualGate that must be matched by a formalGate of D
true


-eOperations:commutativity_of_decomposition:
			
Assume that within Interaction X, Lifeline L is of class C and decomposed to D. Assume also that there is within X an InteractionUse (say) U that covers L. According to the constraint above U will have a counterpart CU within D. Within the Interaction referenced by U, L should also be decomposed, and the decomposition should reference CU. (This rule is called commutativity of decomposition)
true

----------------------------------------------------------------
:::eClassifiers:::InteractionUse:
		
Inherits from: #//InteractionFragment
An interaction use refers to an interaction. The interaction use is a shorthand for copying the contents of the referenced interaction where the interaction use is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal gates with the actual ones.

-eOperations:all_lifelines:
			
The InteractionUse must cover all Lifelines of the enclosing Interaction that represent the same properties as lifelines within the referred Interaction.
true


-eOperations:returnValueRecipient_coverage:
			
The returnValueRecipient must be a Property of a ConnectableElement that is represented by a Lifeline covered by this InteractionUse.
true


-eOperations:arguments_correspond_to_parameters:
			
The arguments of the InteractionUse must correspond to parameters of the referred Interaction
true


-eOperations:gates_match:
			
Actual Gates of the InteractionUse must match Formal Gates of the referred Interaction. Gates match when their names are equal.
true


-eOperations:arguments_are_constants:
			
The arguments must only be constants, parameters of the enclosing Interaction or attributes of the classifier owning the enclosing Interaction.
true


-eOperations:returnValue_type_recipient_correspondence:
			
The type of the returnValue must correspond to the type of the returnValueRecipient.
true


-eStructuralFeatures:actualGate:
			
The actual gates of the InteractionUse


-eStructuralFeatures:argument:
			
The actual arguments of the Interaction


-eStructuralFeatures:refersTo:
			
Refers to the Interaction that defines its meaning


-eStructuralFeatures:returnValue:
			
The value of the executed Interaction.


-eStructuralFeatures:returnValueRecipient:
			
The recipient of the return value.

----------------------------------------------------------------
:::eClassifiers:::Gate:
		
Inherits from: #//MessageEnd
A gate is a connection point for relating a message outside an interaction fragment with a message inside the interaction fragment.

-eOperations:messages_combined_fragment:
			
The message leading to/from an (expression) Gate within a CombinedFragment must correspond to the message leading from/to the CombinedFragment on its outside.
true


-eOperations:messages_actual_gate:
			
The message leading to/from an actualGate of an InteractionUse must correspond to the message leading from/to the formalGate with the same name of the Interaction referenced by the InteractionUse.
true

----------------------------------------------------------------
:::eClassifiers:::MessageEnd:
		
Inherits from: #//NamedElement
MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a message.

-eStructuralFeatures:message:
			
References a Message.

----------------------------------------------------------------
:::eClassifiers:::Message:
		
Inherits from: #//NamedElement
A message defines a particular communication between lifelines of an interaction.

-eOperations:sending_receiving_message_event:
			
If the sendEvent and the receiveEvent of the same Message are on the same Lifeline, the sendEvent must be ordered before the receiveEvent.
true


-eOperations:occurrence_specifications:
			
If the MessageEnds are both OccurrenceSpecifications then the connector must go between the Parts represented by the Lifelines of the two MessageEnds.
true


-eOperations:signature_is_signal:
			
In the case when the Message signature is a Signal, the arguments of the Message must correspond to the attributes of the Signal. A Message Argument corresponds to a Signal Attribute if the Arguement is of the same Class or a specialization of that of the Attribute.
true


-eOperations:signature_is_operation:
			
In the case when the Message signature is an Operation, the arguments of the Message must correspond to the parameters of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that of the Parameter.
true


-eOperations:arguments:
			
Arguments of a Message must only be: i) attributes of the sending lifeline ii) constants iii) symbolic values (which are wildcard values representing any legal value) iv) explicit parameters of the enclosing Interaction v) attributes of the class owning the Interaction
true


-eOperations:cannot_cross_boundaries:
			
Messages cannot cross bounderies of CombinedFragments or their operands.
true


-eOperations:signature_refer_to:
			
The signature must either refer an Operation (in which case messageSort is either synchCall or asynchCall) or a Signal (in which case messageSort is asynchSignal). The name of the NamedElement referenced by signature must be the same as that of the Message.
true


-eOperations:getMessageKind:
			
Missing derivation for Message::/messageKind : MessageKind
true


-eStructuralFeatures:argument:
			
The arguments of the Message


-eStructuralFeatures:connector:
			
The Connector on which this Message is sent.


-eStructuralFeatures:interaction:
			
The enclosing Interaction owning the Message


-eStructuralFeatures:messageKind:
			
The derived kind of the Message (complete, lost, found or unknown)


-eStructuralFeatures:messageSort:
			
The sort of communication reflected by the Message


-eStructuralFeatures:receiveEvent:
			
References the Receiving of the Message


-eStructuralFeatures:sendEvent:
			
References the Sending of the Message.


-eStructuralFeatures:signature:
			
The signature of the Message is the specification of its content. It refers either an Operation or a Signal.

----------------------------------------------------------------
:::eClassifiers:::Interaction:
		
Inherits from: #//Behavior #//InteractionFragment
An interaction is a unit of behavior that focuses on the observable exchange of information between connectable elements.

-eStructuralFeatures:action:
			
Actions owned by the Interaction.


-eStructuralFeatures:formalGate:
			
Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it.


-eStructuralFeatures:fragment:
			
The ordered set of fragments in the Interaction.


-eStructuralFeatures:lifeline:
			
Specifies the participants in this Interaction.


-eStructuralFeatures:message:
			
The Messages contained in this Interaction.

----------------------------------------------------------------
:::eClassifiers:::MessageKind:
		
This is an enumerated type that identifies the type of message.
----------------------------------------------------------------
:::eClassifiers:::MessageSort:
		
This is an enumerated type that identifies the type of communication action that was used to generate the message.
----------------------------------------------------------------
:::eClassifiers:::InteractionOperand:
		
Inherits from: #//Namespace #//InteractionFragment
An interaction operand is contained in a combined fragment. An interaction operand represents one operand of the expression given by the enclosing combined fragment.

-eOperations:guard_directly_prior:
			
The guard must be placed directly prior to (above) the OccurrenceSpecification that will become the first OccurrenceSpecification within this InteractionOperand.
true


-eOperations:guard_contain_references:
			
The guard must contain only references to values local to the Lifeline on which it resides, or values global to the whole Interaction.
true


-eStructuralFeatures:guard:
			
Constraint of the operand.


-eStructuralFeatures:fragment:
			
The fragments of the operand.

----------------------------------------------------------------
:::eClassifiers:::InteractionConstraint:
		
Inherits from: #//Constraint
An interaction constraint is a Boolean expression that guards an operand in a combined fragment.

-eOperations:maxint_positive:
			
If maxint is specified, then the expression must evaluate to a positive integer.
true


-eOperations:minint_maxint:
			
Minint/maxint can only be present if the InteractionConstraint is associated with the operand of a loop CombinedFragment.
true


-eOperations:minint_non_negative:
			
If minint is specified, then the expression must evaluate to a non-negative integer.
true


-eOperations:global_data:
			
The constraint may contain references to global data or write-once data.
true


-eOperations:maxint_greater_equal_minint:
			
If maxint is specified, then minint must be specified and the evaluation of maxint must be >= the evaluation of minint
true


-eOperations:dynamic_variables:
			
The dynamic variables that take part in the constraint must be owned by the ConnectableElement corresponding to the covered Lifeline.
true


-eStructuralFeatures:maxint:
			
The maximum number of iterations of a loop


-eStructuralFeatures:minint:
			
The minimum number of iterations of a loop

----------------------------------------------------------------
:::eClassifiers:::GeneralOrdering:
		
Inherits from: #//NamedElement
A general ordering represents a binary relation between two occurrence specifications, to describe that one occurrence specification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of occurrence cpecifications that may otherwise not have a specified order.

-eOperations:irreflexsive_transitive_closure:
			
An occurrence specification must not be ordered relative to itself through a series of general orderings. (In other words, the transitive closure of the general orderings is irreflexive.)
start.lifeline = finish.lifeline


-eStructuralFeatures:after:
			
The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before.


-eStructuralFeatures:before:
			
The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after.

----------------------------------------------------------------
:::eClassifiers:::OccurrenceSpecification:
		
Inherits from: #//InteractionFragment
An occurrence specification is the basic semantic unit of interactions. The sequences of occurrences specified by them are the meanings of interactions.

-contents:covered:
			
References the Lifeline on which the OccurrenceSpecification appears.


-eOperations:getCovered:
			
Returns the Lifeline on which the OccurrenceSpecification appears.


-eOperations:setCovered:
			
Sets the Lifeline on which the OccurrenceSpecification appears.


-eStructuralFeatures:toAfter:
			
References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification


-eStructuralFeatures:toBefore:
			
References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification

----------------------------------------------------------------
:::eClassifiers:::ActionInputPin:
		
Inherits from: #//InputPin
An action input pin is a kind of pin that executes an action to determine the values to input to another.

-eOperations:input_pin:
			
The fromAction of an action input pin must only have action input pins as input pins.
true


-eOperations:no_control_or_data_flow:
			
The fromAction of an action input pin cannot have control or data flows coming into or out of it or its pins.
true


-eOperations:one_output_pin:
			
The fromAction of an action input pin must have exactly one output pin.
true


-eStructuralFeatures:fromAction:
			
The action used to provide values.

----------------------------------------------------------------
:::eClassifiers:::ActivityFinalNode:
		
Inherits from: #//FinalNode
An activity final node is a final node that stops all flows in an activity.
----------------------------------------------------------------
:::eClassifiers:::FinalNode:
		
Inherits from: #//ControlNode
A final node is an abstract control node at which a flow in an activity stops.

-eOperations:no_outgoing_edges:
			
A final node has no outgoing edges.
true

----------------------------------------------------------------
:::eClassifiers:::ControlNode:
		
Inherits from: #//ActivityNode
A control node is an abstract activity node that coordinates flows in an activity.
----------------------------------------------------------------
:::eClassifiers:::ActivityParameterNode:
		
Inherits from: #//ObjectNode
An activity parameter node is an object node for inputs and outputs to activities.

-eOperations:maximum_one_parameter_node:
			
A parameter with direction other than inout must have at most one activity parameter node in an activity.
true


-eOperations:maximum_two_parameter_nodes:
			
A parameter with direction inout must have at most two activity parameter nodes in an activity, one with incoming flows and one with outgoing flows.
true


-eOperations:no_edges:
			
An activity parameter node may have all incoming edges or all outgoing edges, but it must not have both incoming and outgoing edges.
true


-eOperations:no_incoming_edges:
			
Activity parameter object nodes with no incoming edges and one or more outgoing edges must have a parameter with in or inout direction.
true


-eOperations:no_outgoing_edges:
			
Activity parameter object nodes with no outgoing edges and one or more incoming edges must have a parameter with out, inout, or return direction.
true


-eOperations:same_type:
			
The type of an activity parameter node is the same as the type of its parameter.
true


-eOperations:has_parameters:
			
Activity parameter nodes must have parameters from the containing activity.
true


-eStructuralFeatures:parameter:
			
The parameter the object node will be accepting or providing values for.

----------------------------------------------------------------
:::eClassifiers:::Actor:
		
Inherits from: #//BehavioredClassifier
An actor specifies a role played by a user or any other system that interacts with the subject.

-eOperations:associations:
			
An actor can only have associations to use cases, components and classes. Furthermore these associations must be binary.
self.ownedAttribute->forAll ( a |
(a.association->notEmpty()) implies
((a.association.memberEnd.size() = 2) and
(a.opposite.class.oclIsKindOf(UseCase) or
(a.opposite.class.oclIsKindOf(Class) and not a.opposite.class.oclIsKindOf(Behavior))))



-eOperations:must_have_name:
			
An actor must have a name.
name->notEmpty()

----------------------------------------------------------------
:::eClassifiers:::AddStructuralFeatureValueAction:
		
Inherits from: #//WriteStructuralFeatureAction
An add structural feature value action is a write structural feature action for adding values to a structural feature.

-eOperations:unlimited_natural_and_multiplicity:
			
Actions adding a value to ordered structural features must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.
let insertAtPins : Collection = self.insertAt in
if self.structuralFeature.isOrdered = #false
then insertAtPins->size() = 0
else let insertAtPin : InputPin= insertAt->asSequence()->first() in
insertAtPins->size() = 1
and insertAtPin.type = UnlimitedNatural
and insertAtPin.multiplicity.is(1,1))
endif



-eOperations:required_value:
			
A value input pin is required.
self.value -> notEmpty()


-eStructuralFeatures:insertAt:
			
Gives the position at which to insert a new value or move an existing value in ordered structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero. This pin is omitted for unordered structural features.


-eStructuralFeatures:isReplaceAll:
			
Specifies whether existing values of the structural feature of the object should be removed before adding the new value.

----------------------------------------------------------------
:::eClassifiers:::WriteStructuralFeatureAction:
		
Inherits from: #//StructuralFeatureAction
WriteStructuralFeatureAction is an abstract class for structural feature actions that change structural feature values.

-contents:multiplicity:
			
The multiplicity of the input pin is 1..1.
self.value.multiplicity.is(1,1)


-eOperations:input_pin:
			
The type of the value input pin is the same as the type of the structural feature.
self.value->notEmpty() implies self.value.type =  self.structuralFeature.type


-eOperations:type_of_result:
			
The type of the result output pin is the same as the type of the inherited object input pin.
result->notEmpty() implies self.result.type = self.object.type


-eOperations:multiplicity_of_result:
			
The multiplicity of the result output pin must be 1..1.
result->notEmpty() implies self.result.multiplicity.is(1,1)


-eStructuralFeatures:result:
			
Gives the output pin on which the result is put.


-eStructuralFeatures:value:
			
Value to be added or removed from the structural feature.

----------------------------------------------------------------
:::eClassifiers:::StructuralFeatureAction:
		
Inherits from: #//Action
StructuralFeatureAction is an abstract class for all structural feature actions.

-eOperations:visibility:
			
Visibility of structural feature must allow access to the object performing the action.
let host : Classifier = self.context in
self.structuralFeature.visibility = #public
or host = self.structuralFeature.featuringClassifier.type
or (self.structuralFeature.visibility = #protected and host.allSupertypes
->includes(self.structuralFeature.featuringClassifier.type)))



-eOperations:multiplicity:
			
The multiplicity of the object input pin must be 1..1.
self.object.lowerBound()=1 and self.object.upperBound()=1


-eOperations:not_static:
			
The structural feature must not be static.
self.structuralFeature.isStatic = #false


-eOperations:one_featuring_classifier:
			
A structural feature has exactly one featuringClassifier.
self.structuralFeature.featuringClassifier->size() = 1


-eOperations:same_type:
			
The structural feature must either be owned by the type of the object input pin, or it must be an owned end of a binary association with the type of the opposite end being the type of the object input pin.
self.structuralFeature.featuringClassifier.oclAsType(Type)->includes(self.object.type) or
	self.structuralFeature.oclAsType(Property).opposite.type = self.object.type


-eStructuralFeatures:object:
			
Gives the input pin from which the object whose structural feature is to be read or written is obtained.


-eStructuralFeatures:structuralFeature:
			
Structural feature to be read.

----------------------------------------------------------------
:::eClassifiers:::AddVariableValueAction:
		
Inherits from: #//WriteVariableAction
An add variable value action is a write variable action for adding values to a variable.

-eOperations:required_value:
			
A value input pin is required.
self.value -> notEmpty()


-eOperations:single_input_pin:
			
Actions adding values to ordered variables must have a single input pin for the insertion point with type UnlimtedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.
let insertAtPins : Collection = self.insertAt in
if self.variable.ordering = #unordered
then insertAtPins->size() = 0
else let insertAtPin : InputPin = insertAt->asSequence()->first() in
insertAtPins->size() = 1
and insertAtPin.type = UnlimitedNatural
and insertAtPin.multiplicity.is(1,1))
endif



-eStructuralFeatures:insertAt:
			
Gives the position at which to insert a new value or move an existing value in ordered variables. The types is UnlimitedINatural, but the value cannot be zero. This pin is omitted for unordered variables.


-eStructuralFeatures:isReplaceAll:
			
Specifies whether existing values of the variable should be removed before adding the new value.

----------------------------------------------------------------
:::eClassifiers:::WriteVariableAction:
		
Inherits from: #//VariableAction
WriteVariableAction is an abstract class for variable actions that change variable values.

-eOperations:multiplicity:
			
The multiplicity of the input pin is 1..1.
self.value.multiplicity.is(1,1)


-eOperations:same_type:
			
The type input pin is the same as the type of the variable.
self.value -> notEmpty() implies self.value.type = self.variable.type


-eStructuralFeatures:value:
			
Value to be added or removed from the variable.

----------------------------------------------------------------
:::eClassifiers:::VariableAction:
		
Inherits from: #//Action
VariableAction is an abstract class for actions that operate on a statically specified variable.

-eOperations:scope_of_variable:
			
The action must be in the scope of the variable.
self.variable.isAccessibleBy(self)


-eStructuralFeatures:variable:
			
Variable to be read.

----------------------------------------------------------------
:::eClassifiers:::AnyReceiveEvent:
		
Inherits from: #//MessageEvent
A trigger for an AnyReceiveEvent is triggered by the receipt of any message that is not explicitly handled by any related trigger.
----------------------------------------------------------------
:::eClassifiers:::MessageEvent:
		
Inherits from: #//Event
A message event specifies the receipt by an object of either a call or a signal.
----------------------------------------------------------------
:::eClassifiers:::AssociationClass:
		
Inherits from: #//Class #//Association
A model element that has both association and class properties. An AssociationClass can be seen as an association that also has class properties, or as a class that also has association properties. It not only connects a set of classifiers but also defines a set of features that belong to the relationship itself and not to any of the classifiers.

-eOperations:disjoint_attributes_ends:
			
The owned attributes and owned ends of an AssociationClass are disjoint
ownedAttribute->intersection(ownedEnd)->isEmpty()


-eOperations:cannot_be_defined:
			
An AssociationClass cannot be defined between itself and something else.
self.endType->excludes(self) and self.endType>collect(et|et.allparents()->excludes(self))

----------------------------------------------------------------
:::eClassifiers:::BehaviorExecutionSpecification:
		
Inherits from: #//ExecutionSpecification
A behavior execution specification is a kind of execution specification representing the execution of a behavior.

-eStructuralFeatures:behavior:
			
Behavior whose execution is occurring.

----------------------------------------------------------------
:::eClassifiers:::BroadcastSignalAction:
		
Inherits from: #//InvocationAction
A broadcast signal action is an action that transmits a signal instance to all the potential target objects in the system, which may cause the firing of a state machine transitions or the execution of associated activities of a target object. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately after the signals are sent out. It does not wait for receipt. Any reply messages are ignored and are not transmitted to the requestor.

-eOperations:type_ordering_multiplicity:
			
The type, ordering, and multiplicity of an argument pin must be the same as the corresponding attribute of the signal.
true


-eOperations:number_and_order:
			
The number and order of argument pins must be the same as the number and order of attributes in the signal.
true


-eStructuralFeatures:signal:
			
The specification of signal object transmitted to the target objects.

----------------------------------------------------------------
:::eClassifiers:::InvocationAction:
		
Inherits from: #//Action
InvocationAction is an abstract class for the various actions that invoke behavior.
In addition to targeting an object, invocation actions can also invoke behavioral features on ports from where the invocation requests are routed onwards on links deriving from attached connectors. Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.

-eOperations:on_port_receiver:
			
The onPort must be a port on the receiver object.
true


-eStructuralFeatures:argument:
			
Specification of the ordered set of argument values that appears during execution.


-eStructuralFeatures:onPort:
			
A optional port of the receiver object on which the behavioral feature is invoked.

----------------------------------------------------------------
:::eClassifiers:::CallAction:
		
Inherits from: #//InvocationAction
CallAction is an abstract class for actions that invoke behavior and receive return values.

-eOperations:synchronous_call:
			
Only synchronous call actions can have result pins.
true


-eOperations:number_and_order:
			
The number and order of argument pins must be the same as the number and order of parameters of the invoked behavior or behavioral feature. Pins are matched to parameters by order.
true


-eOperations:type_ordering_multiplicity:
			
The type, ordering, and multiplicity of an argument pin must be the same as the corresponding parameter of the behavior or behavioral feature.
true


-eStructuralFeatures:isSynchronous:
			
If true, the call is synchronous and the caller waits for completion of the invoked behavior. If false, the call is asynchronous and the caller proceeds immediately and does not expect a return values.


-eStructuralFeatures:result:
			
A list of output pins where the results of performing the invocation are placed.

----------------------------------------------------------------
:::eClassifiers:::CallBehaviorAction:
		
Inherits from: #//CallAction
A call behavior action is a call action that invokes a behavior directly rather than invoking a behavioral feature that, in turn, results in the invocation of that behavior. The argument values of the action are available to the execution of the invoked behavior. For synchronous calls the execution of the call behavior action waits until the execution of the invoked behavior completes and a result is returned on its output pin. The action completes immediately without a result, if the call is asynchronous. In particular, the invoked behavior may be an activity.

-contents:type_ordering_multiplicity:
			
The type, ordering, and multiplicity of an argument or result pin is derived from the corresponding parameter of the behavior.
true


-eOperations:result_pin_equal_parameter:
			
The number of result pins and the number of parameters of the behavior of type return, out, and in-out must be equal.
true


-eOperations:argument_pin_equal_parameter:
			
The number of argument pins and the number of parameters of the behavior of type in and in-out must be equal.
true


-eStructuralFeatures:behavior:
			
The invoked behavior. It must be capable of accepting and returning control.

----------------------------------------------------------------
:::eClassifiers:::CallEvent:
		
Inherits from: #//MessageEvent
A call event models the receipt by an object of a message invoking a call of an operation.

-eStructuralFeatures:operation:
			
Designates the operation whose invocation raised the call event.

----------------------------------------------------------------
:::eClassifiers:::CallOperationAction:
		
Inherits from: #//CallAction
A call operation action is an action that transmits an operation call request to the target object, where it may cause the invocation of associated behavior. The argument values of the action are available to the execution of the invoked behavior. If the action is marked synchronous, the execution of the call operation action waits until the execution of the invoked behavior completes and a reply transmission is returned to the caller; otherwise execution of the action is complete when the invocation of the operation is established and the execution of the invoked operation proceeds concurrently with the execution of the calling behavior. Any values returned as part of the reply transmission are put on the result output pins of the call operation action. Upon receipt of the reply transmission, execution of the call operation action is complete.

-contents:type_ordering_multiplicity:
			
The type, ordering, and multiplicity of an argument or result pin is derived from the corresponding owned parameter of the operation.
true


-eOperations:argument_pin_equal_parameter:
			
The number of argument pins and the number of owned parameters of the operation of type in and in-out must be equal.
true


-eOperations:result_pin_equal_parameter:
			
The number of result pins and the number of owned parameters of the operation of type return, out, and in-out must be equal.
true


-eOperations:type_target_pin:
			
The type of the target pin must be the same as the type that owns the operation.
true


-eStructuralFeatures:operation:
			
The operation to be invoked by the action execution.


-eStructuralFeatures:target:
			
The target object to which the request is sent. The classifier of the target object is used to dynamically determine a behavior to invoke. This object constitutes the context of the execution of the operation.

----------------------------------------------------------------
:::eClassifiers:::CentralBufferNode:
		
Inherits from: #//ObjectNode
A central buffer node is an object node for managing flows from multiple sources and destinations.
----------------------------------------------------------------
:::eClassifiers:::ChangeEvent:
		
Inherits from: #//Event
A change event models a change in the system configuration that makes a condition true.

-eStructuralFeatures:changeExpression:
			
A Boolean-valued expression that will result in a change event whenever its value changes from false to true.

----------------------------------------------------------------
:::eClassifiers:::Clause:
		
Inherits from: #//Element
A clause is an element that represents a single branch of a conditional construct, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates true.

-eOperations:test_and_body:
			
The test and body parts must be disjoint.
true


-eOperations:body_output_pins:
			
The bodyOutput pins are output pins on actions in the body of the clause.
true


-eOperations:decider_output:
			
The decider output pin must be for the test body or a node contained by the test body as a structured node.
true


-eStructuralFeatures:body:
			
A nested activity fragment that is executed if the test evaluates to true and the clause is chosen over any concurrent clauses that also evaluate to true.


-eStructuralFeatures:bodyOutput:
			
A list of output pins within the body fragment whose values are moved to the result pins of the containing conditional node after execution of the clause body.


-eStructuralFeatures:decider:
			
An output pin within the test fragment the value of which is examined after execution of the test to determine whether the body should be executed.


-eStructuralFeatures:predecessorClause:
			
A set of clauses whose tests must all evaluate false before the current clause can be tested.


-eStructuralFeatures:successorClause:
			
A set of clauses which may not be tested unless the current clause tests false.


-eStructuralFeatures:test:
			
A nested activity fragment with a designated output pin that specifies the result of the test.

----------------------------------------------------------------
:::eClassifiers:::ClearAssociationAction:
		
Inherits from: #//Action
A clear association action is an action that destroys all links of an association in which a particular object participates.

-eOperations:multiplicity:
			
The multiplicity of the input pin is 1..1.
self.object.multiplicity.is(1,1)


-eOperations:same_type:
			
The type of the input pin must be the same as the type of at least one of the association ends of the association.
self.association->exists(end.type = self.object.type)


-eStructuralFeatures:association:
			
Association to be cleared.


-eStructuralFeatures:object:
			
Gives the input pin from which is obtained the object whose participation in the association is to be cleared.

----------------------------------------------------------------
:::eClassifiers:::ClearStructuralFeatureAction:
		
Inherits from: #//StructuralFeatureAction
A clear structural feature action is a structural feature action that removes all values of a structural feature.

-eOperations:multiplicity_of_result:
			
The multiplicity of the result output pin must be 1..1.
result->notEmpty() implies self.result.multiplicity.is(1,1)


-eOperations:type_of_result:
			
The type of the result output pin is the same as the type of the inherited object input pin.
result->notEmpty() implies self.result.type = self.object.type


-eStructuralFeatures:result:
			
Gives the output pin on which the result is put.

----------------------------------------------------------------
:::eClassifiers:::ClearVariableAction:
		
Inherits from: #//VariableAction
A clear variable action is a variable action that removes all values of a variable.
----------------------------------------------------------------
:::eClassifiers:::CombinedFragment:
		
Inherits from: #//InteractionFragment
A combined fragment defines an expression of interaction fragments. A combined fragment is defined by an interaction operator and corresponding interaction operands. Through the use of combined fragments the user will be able to describe a number of traces in a compact and concise manner.

-eOperations:break:
			
If the interactionOperator is break, the corresponding InteractionOperand must cover all Lifelines within the enclosing InteractionFragment.
true


-eOperations:opt_loop_break_neg:
			
If the interactionOperator is opt, loop, break, assert or neg, there must be exactly one operand.
true


-eOperations:consider_and_ignore:
			
The interaction operators 'consider' and 'ignore' can only be used for the CombineIgnoreFragment subtype of CombinedFragment
((interactionOperator = #consider) or (interactionOperator = #ignore)) implies oclsisTypeOf(CombineIgnoreFragment)


-eOperations:minint_and_maxint:
			
The InteractionConstraint with minint and maxint only apply when attached to an InteractionOperand where the interactionOperator is loop.
true


-eStructuralFeatures:cfragmentGate:
			
Specifies the gates that form the interface between this CombinedFragment and its surroundings


-eStructuralFeatures:interactionOperator:
			
Specifies the operation which defines the semantics of this combination of InteractionFragments.


-eStructuralFeatures:operand:
			
The set of operands of the combined fragment.

----------------------------------------------------------------
:::eClassifiers:::InteractionOperatorKind:
		
InteractionOperatorKind is an enumeration designating the different kinds of operators of combined fragments. The interaction operand defines the type of operator of a combined fragment.
----------------------------------------------------------------
:::eClassifiers:::CommunicationPath:
		
Inherits from: #//Association
A communication path is an association between two deployment targets, through which they are able to exchange signals and messages.

-contents:association_ends:
			
The association ends of a CommunicationPath are typed by DeploymentTargets.
self.endType->forAll (t | t.oclIsKindOf(DeploymentTarget))

----------------------------------------------------------------
:::eClassifiers:::Component:
		
Inherits from: #//Class
In the namespace of a component, all model elements that are involved in or related to its definition are either owned or imported explicitly. This may include, for example, use cases and dependencies (e.g. mappings), packages, components, and artifacts.
A component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.

-eOperations:no_packaged_elements:
			
component nested in a Class cannot have any packaged elements.
(not self.class->isEmpty()) implies self.packagedElement->isEmpty()


-eOperations:no_nested_classifiers:
			
A component cannot nest classifiers.
self.nestedClassifier->isEmpty()


-eOperations:createOwnedClass:
			
Creates a(n) (abstract) class with the specified name as a packaged element of this component.


-eOperations:createOwnedEnumeration:
			
Creates a enumeration with the specified name as a packaged element of this component.


-eOperations:createOwnedInterface:
			
Creates an interface with the specified name as a packaged element of this component.


-eOperations:createOwnedPrimitiveType:
			
Creates a primitive type with the specified name as a packaged element of this component.


-eOperations:getProvideds:
			
Missing derivation for Component::/provided : Interface
result =
let 	realizedInterfaces : Set(Interface) = RealizedInterfaces(self) ,
		realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),
		allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()) ,
		realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(RealizedInterfaces(c))) ,
		ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort) ,
		providedByPorts : Set(Interface) = ports.provided 
in 	realizedInterfaces->union(realizingClassifierInterfaces) ->union(providedByPorts)->asSet()



-eOperations:realizedInterfaces:
			
Utility returning the set of realized interfaces of a component.
result = (classifier.clientDependency->
select(dependency|dependency.oclIsKindOf(Realization) and dependency.supplier.oclIsKindOf(Interface)))->
collect(dependency|dependency.client)


-eOperations:getRequireds:
			
Missing derivation for Component::/required : Interface
result = 
let 	usedInterfaces : Set(Interface) = UsedInterfaces(self),
		realizingClassifiers : Set(Classifier) = Set{self.realizingClassifier}->union(self.allParents().realizingClassifier),
		allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents()),
		realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(UsedInterfaces(c))),
		ports : Set(Port) = self.ownedPort->union(allParents.oclAsType(Set(EncapsulatedClassifier)).ownedPort),
		usedByPorts : Set(Interface) = ports.required
in		usedInterfaces->union(realizingClassifierInterfaces) ->union(usedByPorts)->asSet()



-eOperations:usedInterfaces:
			
Utility returning the set of used interfaces of a component.
result = (classifier.supplierDependency->
select(dependency|dependency.oclIsKindOf(Usage) and dependency.supplier.oclIsKindOf(interface)))->
collect(dependency|dependency.supplier)


-eStructuralFeatures:isIndirectlyInstantiated:
			
isIndirectlyInstantiated : Boolean {default = true} The kind of instantiation that applies to a Component. If false, the component is instantiated as an addressable object. If true, the Component is defined at design-time, but at run-time (or execution-time) an object specified by the Component does not exist, that is, the component is instantiated indirectly, through the instantiation of its realizing classifiers or parts. Several standard stereotypes use this meta attribute (e.g., Â«specificationÂ», Â«focusÂ», Â«subsystemÂ»).


-eStructuralFeatures:packagedElement:
			
The set of PackageableElements that a Component owns. In the namespace of a component, all model elements that are involved in or related to its definition may be owned or imported explicitly. These may include e.g. Classes, Interfaces, Components, Packages, Use cases, Dependencies (e.g. mappings), and Artifacts.


-eStructuralFeatures:provided:
			
The interfaces that the component exposes to its environment. These interfaces may be Realized by the Component or any of its realizingClassifiers, or they may be the Interfaces that are provided by its public Ports.


-eStructuralFeatures:realization:
			
The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior.


-eStructuralFeatures:required:
			
The interfaces that the component requires from other components in its environment in order to be able to offer its full set of provided functionality. These interfaces may be used by the Component or any of its realizingClassifiers, or they may be the Interfaces that are required by its public Ports.

----------------------------------------------------------------
:::eClassifiers:::ComponentRealization:
		
Inherits from: #//Realization
The realization concept is specialized to (optionally) define the classifiers that realize the contract offered by a component in terms of its provided and required interfaces. The component forms an abstraction from these various classifiers.

-eStructuralFeatures:realizingClassifier:
			
The classifiers that are involved in the implementation of the Component that owns this Realization.


-eStructuralFeatures:abstraction:
			
The Component that owns this ComponentRealization and which is implemented by its realizing classifiers.

----------------------------------------------------------------
:::eClassifiers:::ConditionalNode:
		
Inherits from: #//StructuredActivityNode
A conditional node is a structured activity node that represents an exclusive choice among some number of alternatives.

-eOperations:executable_nodes:
			
The union of the ExecutabledNodes in the test and body parts of all clauses must be the same as the subset of nodes contained in the ConditionalNode (considered as a StructuredActivityNode) that are ExecutableNodes.
true


-eOperations:clause_no_predecessor:
			
No two clauses within a ConditionalNode maybe predecessor clauses of each other, either directly or indirectly.
true


-eOperations:matching_output_pins:
			
Each clause of a conditional node must have the same number of bodyOutput pins as the conditional node has result output pins, and each clause bodyOutput pin must be compatible with the corresponding result pin (by positional order) in type, multiplicity, ordering and uniqueness.
true


-eOperations:one_clause_with_executable_node:
			
No ExecutableNode may appear in the test or body part of more than one clause of a conditional node.
true


-eOperations:result_no_incoming:
			
The result output pins have no incoming edges.
true


-eOperations:no_input_pins:
			
A conditional node has no input pins.
true


-eStructuralFeatures:clause:
			
Set of clauses composing the conditional.


-eStructuralFeatures:isAssured:
			
If true, the modeler asserts that at least one test will succeed.


-eStructuralFeatures:isDeterminate:
			
If true, the modeler asserts that at most one test will succeed.


-eStructuralFeatures:result:
			
A list of output pins that constitute the data flow outputs of the conditional.

----------------------------------------------------------------
:::eClassifiers:::ConsiderIgnoreFragment:
		
Inherits from: #//CombinedFragment
A consider ignore fragment is a kind of combined fragment that is used for the consider and ignore cases, which require lists of pertinent messages to be specified.

-eOperations:type:
			
The NamedElements must be of a type of element that identifies a message (e.g., an Operation, Reception, or a Signal).
message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Reception) or m.oclIsKindOf(Signal))


-eOperations:consider_or_ignore:
			
The interaction operator of a ConsiderIgnoreFragment must be either 'consider' or 'ignore'.
(interactionOperator = #consider) or (interactionOperator = #ignore)


-eStructuralFeatures:message:
			
The set of messages that apply to this fragment

----------------------------------------------------------------
:::eClassifiers:::Continuation:
		
Inherits from: #//InteractionFragment
A continuation is a syntactic way to define continuations of different branches of an alternative combined fragment. Continuations is intuitively similar to labels representing intermediate points in a flow of control.

-eOperations:same_name:
			
Continuations with the same name may only cover the same set of Lifelines (within one Classifier).
true


-eOperations:first_or_last_interaction_fragment:
			
Continuations always occur as the very first InteractionFragment or the very last InteractionFragment of the enclosing InteractionFragment.
true


-eOperations:global:
			
Continuations are always global in the enclosing InteractionFragment e.g. it always covers all Lifelines covered by the enclosing InteractionFragment.
true


-eStructuralFeatures:setting:
			
True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.

----------------------------------------------------------------
:::eClassifiers:::ControlFlow:
		
Inherits from: #//ActivityEdge
A control flow is an edge that starts an activity node after the previous one is finished.

-eOperations:object_nodes:
			
Control flows may not have object nodes at either end, except for object nodes with control type.
true

----------------------------------------------------------------
:::eClassifiers:::CreateLinkAction:
		
Inherits from: #//WriteLinkAction
A create link action is a write link action for creating links.

-contents:endData:
			
Specifies ends of association and inputs.


-eOperations:association_not_abstract:
			
The association cannot be an abstract classifier.
self.association().isAbstract = #false

----------------------------------------------------------------
:::eClassifiers:::WriteLinkAction:
		
Inherits from: #//LinkAction
WriteLinkAction is an abstract class for link actions that create and destroy links.

-eOperations:allow_access:
			
The visibility of at least one end must allow access to the class using the action.
true

----------------------------------------------------------------
:::eClassifiers:::LinkAction:
		
Inherits from: #//Action
LinkAction is an abstract class for all link actions that identify their links by the objects at the ends of the links and by the qualifiers at ends of the links.

-eOperations:same_pins:
			
The input pins of the action are the same as the pins of the link end data and insertion pins.
self.input->asSet() =
let ledpins : Set = self.endData->collect(value) in
if self.oclIsKindOf(LinkEndCreationData)
then ledpins->union(self.endData.oclAsType(LinkEndCreationData).insertAt)
else ledpins



-eOperations:same_association:
			
The association ends of the link end data must all be from the same association and include all and only the association ends of that association.
self.endData->collect(end) = self.association()->collect(connection))


-eOperations:not_static:
			
The association ends of the link end data must not be static.
self.endData->forall(end.oclisKindOf(NavigableEnd) implies end.isStatic = #false


-eOperations:association:
			
The association operates on LinkAction. It returns the association of the action.
result = self.endData->asSequence().first().end.association


-eStructuralFeatures:endData:
			
Data identifying one end of a link by the objects on its ends and qualifiers.


-eStructuralFeatures:inputValue:
			
Pins taking end objects and qualifier values as input.

----------------------------------------------------------------
:::eClassifiers:::LinkEndData:
		
Inherits from: #//Element
A link end data is not an action. It is an element that identifies links. It identifies one end of a link to be read or written by the children of a link action. A link cannot be passed as a runtime value to or from an action. Instead, a link is identified by its end objects and qualifier values, if any. This requires more than one piece of data, namely, the statically-specified end in the user model, the object on the end, and the qualifier values for that end, if any. These pieces are brought together around a link end data. Each association end is identified separately with an instance of the LinkEndData class.

-eOperations:property_is_association_end:
			
The property must be an association end.
self.end.association->size() = 1


-eOperations:end_object_input_pin:
			
The end object input pin is not also a qualifier value input pin.
self.value->excludesAll(self.qualifier.value)


-eOperations:same_type:
			
The type of the end object input pin is the same as the type of the association end.
self.value.type = self.end.type


-eOperations:multiplicity:
			
The multiplicity of the end object input pin must be 1..1.
self.value.multiplicity.is(1,1)


-eOperations:qualifiers:
			
The qualifiers include all and only the qualifiers of the association end.
self.qualifier->collect(qualifier) = self.end.qualifier


-eStructuralFeatures:end:
			
AssociationÂ endÂ forÂ whichÂ thisÂ link-endÂ dataÂ specifiesÂ values.


-eStructuralFeatures:qualifier:
			
List of qualifier values


-eStructuralFeatures:value:
			
Input pin that provides the specified object for the given end. This pin is omitted if the link-end data specifies an 'open' end for reading.

----------------------------------------------------------------
:::eClassifiers:::QualifierValue:
		
Inherits from: #//Element
A qualifier value is not an action. It is an element that identifies links. It gives a single qualifier within a link end data specification.

-eOperations:qualifier_attribute:
			
The qualifier attribute must be a qualifier of the association end of the link-end data.
self.LinkEndData.end->collect(qualifier)->includes(self.qualifier)


-eOperations:multiplicity_of_qualifier:
			
The multiplicity of the qualifier value input pin is "1..1".
self.value.multiplicity.is(1,1)


-eOperations:type_of_qualifier:
			
The type of the qualifier value input pin is the same as the type of the qualifier attribute.
self.value.type = self.qualifier.type


-eStructuralFeatures:qualifier:
			
Attribute representing the qualifier for which the value is to be specified.


-eStructuralFeatures:value:
			
Input pin from which the specified value for the qualifier is taken.

----------------------------------------------------------------
:::eClassifiers:::LinkEndCreationData:
		
Inherits from: #//LinkEndData
A link end creation data is not an action. It is an element that identifies links. It identifies one end of a link to be created by a create link action.

-eOperations:create_link_action:
			
LinkEndCreationData can only be end data for CreateLinkAction or one of its specializations.
self.LinkAction.oclIsKindOf(CreateLinkAction)


-eOperations:single_input_pin:
			
Link end creation data for ordered association ends must have a single input pin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, otherwise the action has no input pin for the insertion point.
let insertAtPins : Collection = self.insertAt in
if self.end.ordering = #unordered
then insertAtPins->size() = 0
else let insertAtPin : InputPin = insertAts->asSequence()->first() in
insertAtPins->size() = 1
and insertAtPin.type = UnlimitedNatural
and insertAtPin.multiplicity.is(1,1))
endif



-eStructuralFeatures:insertAt:
			
Specifies where the new link should be inserted for ordered association ends, or where an existing link should be moved to. The type of the input is UnlimitedNatural, but the input cannot be zero. This pin is omitted for association ends that are not ordered.


-eStructuralFeatures:isReplaceAll:
			
Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link.

----------------------------------------------------------------
:::eClassifiers:::CreateLinkObjectAction:
		
Inherits from: #//CreateLinkAction
A create link object action creates a link object.

-eOperations:association_class:
			
The association must be an association class.
self.association().oclIsKindOf(Class)


-eOperations:type_of_result:
			
The type of the result pin must be the same as the association of the action.
self.result.type = self.association()


-eOperations:multiplicity:
			
The multiplicity of the output pin is 1..1.
self.result.multiplicity.is(1,1)


-eStructuralFeatures:result:
			
Gives the output pin on which the result is put.

----------------------------------------------------------------
:::eClassifiers:::CreateObjectAction:
		
Inherits from: #//Action
A create object action is an action that creates an object that conforms to a statically specified classifier and puts it on an output pin at runtime.

-eOperations:classifier_not_association_class:
			
The classifier cannot be an association class
not self.classifier.oclIsKindOf(AssociationClass)


-eOperations:classifier_not_abstract:
			
The classifier cannot be abstract.
not (self.classifier.isAbstract = #true)


-eOperations:same_type:
			
The type of the result pin must be the same as the classifier of the action.
self.result.type = self.classifier


-eOperations:multiplicity:
			
The multiplicity of the output pin is 1..1.
self.result.multiplicity.is(1,1)


-eStructuralFeatures:classifier:
			
Classifier to be instantiated.


-eStructuralFeatures:result:
			
Gives the output pin on which the result is put.

----------------------------------------------------------------
:::eClassifiers:::DataStoreNode:
		
Inherits from: #//CentralBufferNode
A data store node is a central buffer node for non-transient information.
----------------------------------------------------------------
:::eClassifiers:::DecisionNode:
		
Inherits from: #//ControlNode
A decision node is a control node that chooses between outgoing flows.

-eOperations:parameters:
			
A decision input behavior has no output parameters, no in-out parameters and one return parameter.
true


-eOperations:incoming_object_one_input_parameter:
			
If the decision node has no decision input flow and an incoming object flow, then a decision input behavior has one input parameter whose type is the same as or a supertype of the type of object tokens offered on the incoming edge.
true


-eOperations:incoming_outgoing_edges:
			
A decision node has one or two incoming edges and at least one outgoing edge.
true


-eOperations:incoming_control_one_input_parameter:
			
If the decision node has a decision input flow and an incoming control flow, then a decision input behavior has one input parameter whose type is the same as or a supertype of the type of object tokens offered on the decision input flow.
true


-eOperations:two_input_parameters:
			
If the decision node has a decision input flow and an second incoming object flow, then a decision input behavior has two input parameters, the first of which has a type that is the same as or a supertype of the type of the type of object tokens offered on the nondecision input flow and the second of which has a type that is the same as or a supertype of the type of object tokens offered on the decision input flow.
true


-eOperations:decision_input_flow_incoming:
			
The decisionInputFlow of a decision node must be an incoming edge of the decision node.
true


-eOperations:zero_input_parameters:
			
If the decision node has no decision input flow and an incoming control flow, then a decision input behavior has zero input parameters.
true


-eOperations:edges:
			
The edges coming into and out of a decision node, other than the decision input flow (if any), must be either all object flows or all control flows.
true


-eStructuralFeatures:decisionInput:
			
Provides input to guard specifications on edges outgoing from the decision node.


-eStructuralFeatures:decisionInputFlow:
			
An additional edge incoming to the decision node that provides a decision input value.

----------------------------------------------------------------
:::eClassifiers:::ObjectFlow:
		
Inherits from: #//ActivityEdge
An object flow is an activity edge that can have objects or data passing along it.
Object flows have support for multicast/receive, token selection from object nodes, and transformation of tokens.

-eOperations:is_multicast_or_is_multireceive:
			
isMulticast and isMultireceive cannot both be true.
true


-eOperations:selection_behaviour:
			
An object flow may have a selection behavior only if has an object node as a source.
true


-eOperations:compatible_types:
			
Object nodes connected by an object flow, with optionally intervening control nodes, must have compatible types. In particular, the downstream object node type must be the same or a supertype of the upstream object node type.
true


-eOperations:no_actions:
			
Object flows may not have actions at either end.
true


-eOperations:input_and_output_parameter:
			
A selection behavior has one input parameter and one output parameter. The input parameter must be a bag of elements of the same as or a supertype of the type of source object node. The output parameter must be the same or a subtype of the type of source object node. The behavior cannot have side effects.
true


-eOperations:transformation_behaviour:
			
A transformation behavior has one input parameter and one output parameter. The input parameter must be the same as or a supertype of the type of object token coming from the source end. The output parameter must be the same or a subtype of the type of object token expected downstream. The behavior cannot have side effects.
true


-eOperations:target:
			
An edge with constant weight may not target an object node, or lead to an object node downstream with no intervening actions, that has an upper bound less than the weight.
true


-eOperations:same_upper_bounds:
			
Object nodes connected by an object flow, with optionally intervening control nodes, must have the same upper bounds.
true


-eStructuralFeatures:isMulticast:
			
Tells whether the objects in the flow are passed by multicasting.


-eStructuralFeatures:isMultireceive:
			
Tells whether the objects in the flow are gathered from respondents to multicasting.


-eStructuralFeatures:selection:
			
Selects tokens from a source object node.


-eStructuralFeatures:transformation:
			
Changes or replaces data tokens flowing along edge.

----------------------------------------------------------------
:::eClassifiers:::DestroyLinkAction:
		
Inherits from: #//WriteLinkAction
A destroy link action is a write link action that destroys links and link objects.

-contents:endData:
			
Specifies ends of association and inputs.

----------------------------------------------------------------
:::eClassifiers:::LinkEndDestructionData:
		
Inherits from: #//LinkEndData
A link end destruction data is not an action. It is an element that identifies links. It identifies one end of a link to be destroyed by destroy link action.

-eOperations:destroy_link_action:
			
LinkEndDestructionData can only be end data for DestroyLinkAction or one of its specializations.
true


-eOperations:unlimited_natural_and_multiplicity:
			
LinkEndDestructionData for ordered nonunique association ends must have a single destroyAt input pin if isDestroyDuplicates is false. It must be of type UnlimitedNatural and have a multiplicity of 1..1. Otherwise, the action has no input pin for the removal position.
true


-eStructuralFeatures:destroyAt:
			
Specifies the position of an existing link to be destroyed in ordered nonunique association ends. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.


-eStructuralFeatures:isDestroyDuplicates:
			
Specifies whether to destroy duplicates of the value in nonunique association ends.

----------------------------------------------------------------
:::eClassifiers:::DestroyObjectAction:
		
Inherits from: #//Action
A destroy object action is an action that destroys objects.

-eOperations:multiplicity:
			
The multiplicity of the input pin is 1..1.
self.target.multiplicity.is(1,1)


-eOperations:no_type:
			
The input pin has no type.
self.target.type->size() = 0


-eStructuralFeatures:isDestroyLinks:
			
Specifies whether links in which the object participates are destroyed along with the object.


-eStructuralFeatures:isDestroyOwnedObjects:
			
Specifies whether objects owned by the object are destroyed along with the object.


-eStructuralFeatures:target:
			
The input pin providing the object to be destroyed.

----------------------------------------------------------------
:::eClassifiers:::DestructionOccurrenceSpecification:
		
Inherits from: #//MessageOccurrenceSpecification
A destruction event models the destruction of an object.

-eOperations:no_occurrence_specifications_below:
			
No other OccurrenceSpecifications on a given Lifeline in an InteractionOperand may appear below a DestructionOccurrenceSpecification.
true

----------------------------------------------------------------
:::eClassifiers:::MessageOccurrenceSpecification:
		
Inherits from: #//OccurrenceSpecification #//MessageEnd
A message occurrence specification pecifies the occurrence of message events, such as sending and receiving of signals or invoking or receiving of operation calls. A message occurrence specification is a kind of message end. Messages are generated either by synchronous operation calls or asynchronous signal sends. They are received by the execution of corresponding accept event actions.
----------------------------------------------------------------
:::eClassifiers:::Device:
		
Inherits from: #//Node
A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices).
----------------------------------------------------------------
:::eClassifiers:::Node:
		
Inherits from: #//Class #//DeploymentTarget
A node is computational resource upon which artifacts may be deployed for execution. Nodes can be interconnected through communication paths to define network structures.

-eOperations:internal_structure:
			
The internal structure of a Node (if defined) consists solely of parts of type Node.
true


-eOperations:createCommunicationPath:
			
Creates a (binary) communication path between this node and the specified other node, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this node's nearest package.


-eOperations:getCommunicationPaths:
			
Retrieves the communication paths in which this node is involved.


-eStructuralFeatures:nestedNode:
			
The Nodes that are defined (nested) within the Node.

----------------------------------------------------------------
:::eClassifiers:::Duration:
		
Inherits from: #//ValueSpecification
Duration defines a value specification that specifies the temporal distance between two time instants.

-contents:stringValue:
			
true


-eStructuralFeatures:expr:
			
The value of the Duration.


-eStructuralFeatures:observation:
			
Refers to the time and duration observations that are involved in expr.

----------------------------------------------------------------
:::eClassifiers:::Observation:
		
Inherits from: #//PackageableElement
Observation is a superclass of TimeObservation and DurationObservation in order for TimeExpression and Duration to refer to either in a simple way.
----------------------------------------------------------------
:::eClassifiers:::DurationConstraint:
		
Inherits from: #//IntervalConstraint
A duration constraint is a constraint that refers to a duration interval.

-contents:specification:
			
The interval constraining the duration.


-eOperations:first_event_multiplicity:
			
The multiplicity of firstEvent must be 2 if the multiplicity of constrainedElement is 2. Otherwise the multiplicity of firstEvent is 0.
if (constrainedElement->size() =2)
  then (firstEvent->size() = 2) else (firstEvent->size() = 0)


-eStructuralFeatures:firstEvent:
			
The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i]. Default value is true applied when constrainedElement[i] refers an element that represents only one time instant.

----------------------------------------------------------------
:::eClassifiers:::IntervalConstraint:
		
Inherits from: #//Constraint
An interval constraint is a constraint that refers to an interval.

-contents:specification:
			
A condition that must be true when evaluated in order for the constraint to be satisfied.

----------------------------------------------------------------
:::eClassifiers:::Interval:
		
Inherits from: #//ValueSpecification
An interval defines the range between two value specifications.

-eStructuralFeatures:max:
			
Refers to the ValueSpecification denoting the maximum value of the range.


-eStructuralFeatures:min:
			
Refers to the ValueSpecification denoting the minimum value of the range.

----------------------------------------------------------------
:::eClassifiers:::DurationInterval:
		
Inherits from: #//Interval
A duration interval defines the range between two durations.

-contents:max:
			
Refers to the Duration denoting the maximum value of the range.


-contents:min:
			
Refers to the Duration denoting the minimum value of the range.

----------------------------------------------------------------
:::eClassifiers:::DurationObservation:
		
Inherits from: #//Observation
A duration observation is a reference to a duration during an execution. It points out the element(s) in the model to observe and whether the observations are when this model element is entered or when it is exited.

-eOperations:first_event_multiplicity:
			
The multiplicity of firstEvent must be 2 if the multiplicity of event is 2. Otherwise the multiplicity of firstEvent is 0.
if (event->size() = 2)
  then (firstEvent->size() = 2) else (firstEvent->size() = 0)


-eStructuralFeatures:event:
			
The observation is determined by the entering or exiting of the event element during execution.


-eStructuralFeatures:firstEvent:
			
The value of firstEvent[i] is related to event[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters event[i]. If firstEvent[i] is false, then the corresponding observation event is the time instant the execution exits event[i]. Default value is true applied when event[i] refers an element that represents only one time instant.

----------------------------------------------------------------
:::eClassifiers:::ExecutionEnvironment:
		
Inherits from: #//Node
An execution environment is a node that offers an execution environment for specific types of components that are deployed on it in the form of executable artifacts.
----------------------------------------------------------------
:::eClassifiers:::ExecutionOccurrenceSpecification:
		
Inherits from: #//OccurrenceSpecification
An execution occurrence specification represents moments in time at which actions or behaviors start or finish.

-eStructuralFeatures:execution:
			
References the execution specification describing the execution that is started or finished at this execution event.

----------------------------------------------------------------
:::eClassifiers:::ExpansionNode:
		
Inherits from: #//ObjectNode
An expansion node is an object node used to indicate a flow across the boundary of an expansion region. A flow into a region contains a collection that is broken into its individual elements inside the region, which is executed once per element. A flow out of a region combines individual elements into a collection for use outside the region.

-eOperations:region_as_input_or_output:
			
One of regionAsInput or regionAsOutput must be non-empty, but not both.
true


-eStructuralFeatures:regionAsInput:
			
The expansion region for which the node is an input.


-eStructuralFeatures:regionAsOutput:
			
The expansion region for which the node is an output.

----------------------------------------------------------------
:::eClassifiers:::ExpansionRegion:
		
Inherits from: #//StructuredActivityNode
An expansion region is a structured activity region that executes multiple times corresponding to elements of an input collection.

-eOperations:expansion_nodes:
			
An ExpansionRegion must have one or more argument ExpansionNodes and zero or more result ExpansionNodes.
true


-eStructuralFeatures:mode:
			
The way in which the executions interact: parallel: all interactions are independent iterative: the interactions occur in order of the elements stream: a stream of values flows into a single execution


-eStructuralFeatures:outputElement:
			
An object node that accepts a separate element of the output collection during each of the multiple executions of the region. The values are formed into a collection that is available when the execution of the region is complete.


-eStructuralFeatures:inputElement:
			
An object node that holds a separate element of the input collection during each of the multiple executions of the region.

----------------------------------------------------------------
:::eClassifiers:::ExpansionKind:
		
ExpansionKind is an enumeration type used to specify how multiple executions of an expansion region interact.
----------------------------------------------------------------
:::eClassifiers:::FinalState:
		
Inherits from: #//State
A special kind of state signifying that the enclosing region is completed. If the enclosing region is directly contained in a state machine and all other regions in the state machine also are completed, then it means that the entire state machine is completed.

-eOperations:no_outgoing_transitions:
			
A final state cannot have any outgoing transitions.
self.outgoing->size() = 0


-eOperations:cannot_reference_submachine:
			
A final state cannot reference a submachine.
self.submachine->isEmpty()


-eOperations:no_exit_behavior:
			
A final state has no exit behavior.
self.exit->isEmpty()


-eOperations:no_entry_behavior:
			
A final state has no entry behavior.
self.entry->isEmpty()


-eOperations:no_state_behavior:
			
A final state has no state (doActivity) behavior.
self.doActivity->isEmpty()


-eOperations:no_regions:
			
A final state cannot have regions.
self.region->size() = 0

----------------------------------------------------------------
:::eClassifiers:::FlowFinalNode:
		
Inherits from: #//FinalNode
A flow final node is a final node that terminates a flow.
----------------------------------------------------------------
:::eClassifiers:::ForkNode:
		
Inherits from: #//ControlNode
A fork node is a control node that splits a flow into multiple concurrent flows.

-eOperations:edges:
			
The edges coming into and out of a fork node must be either all object flows or all control flows.
true


-eOperations:one_incoming_edge:
			
A fork node has one incoming edge.
true

----------------------------------------------------------------
:::eClassifiers:::FunctionBehavior:
		
Inherits from: #//OpaqueBehavior
A function behavior is an opaque behavior that does not access or modify any objects or other external data.

-eOperations:one_output_parameter:
			
A function behavior has at least one output parameter.
self.ownedParameters->
  select(p | p.direction=#out or p.direction=#inout or p.direction=#return)->size() >= 1


-eOperations:types_of_parameters:
			
The types of parameters are all data types, which may not nest anything but other datatypes.
def: hasAllDataTypeAttributes(d : DataType) : Boolean =
  d.ownedAttribute->forAll(a |
    a.type.oclIsTypeOf(DataType) and
      hasAllDataTypeAttributes(a.type))
self.ownedParameters->forAll(p | p.type.notEmpty() and
  p.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p))

----------------------------------------------------------------
:::eClassifiers:::OpaqueBehavior:
		
Inherits from: #//Behavior
An behavior with implementation-specific semantics.

-eStructuralFeatures:body:
			
Specifies the behavior in one or more languages.


-eStructuralFeatures:language:
			
Languages the body strings use in the same order as the body strings.

----------------------------------------------------------------
:::eClassifiers:::InformationFlow:
		
Inherits from: #//PackageableElement #//DirectedRelationship
An information flow specifies that one or more information items circulates from its sources to its targets. Information flows require some kind of information channel for transmitting information items from the source to the destination. An information channel is represented in various ways depending on the nature of its sources and targets. It may be represented by connectors, links, associations, or even dependencies. For example, if the source and destination are parts in some composite structure such as a collaboration, then the information channel is likely to be represented by a connector between them. Or, if the source and target are objects (which are a kind of instance specification), they may be represented by a link that joins the two, and so on.

-eOperations:sources_and_targets_kind:
			
The sources and targets of the information flow can only be one of the following kind: Actor, Node, UseCase, Artifact, Class, Component, Port, Property, Interface, Package, ActivityNode, ActivityPartition and InstanceSpecification except when its classifier is a relationship (i.e. it represents a link).
(self.informationSource->forAll(p | p->oclIsKindOf(Actor) or oclIsKindOf(Node) or
  oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or oclIsKindOf(Class) or
  oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or
  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or
  oclIsKindOf(ActivityPartition) or oclIsKindOf(InstanceSpecification))) and
    (self.informationTarget->forAll(p | p->oclIsKindOf(Actor) or oclIsKindOf(Node) or
      oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or oclIsKindOf(Class) or
      oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or
      oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or
      oclIsKindOf(ActivityPartition) or oclIsKindOf(InstanceSpecification)))


-eOperations:must_conform:
			
The sources and targets of the information flow must conform with the sources and targets or conversely the targets and sources of the realization relationships.
true


-eOperations:convey_classifiers:
			
An information flow can only convey classifiers that are allowed to represent an information item.
self.conveyed.represented->forAll(p | p->oclIsKindOf(Class) or oclIsKindOf(Interface)
  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))


-eStructuralFeatures:conveyed:
			
Specifies the information items that may circulate on this information flow.


-eStructuralFeatures:informationSource:
			
Defines from which source the conveyed InformationItems are initiated.


-eStructuralFeatures:informationTarget:
			
Defines to which target the conveyed InformationItems are directed.


-eStructuralFeatures:realization:
			
Determines which Relationship will realize the specified flow


-eStructuralFeatures:realizingActivityEdge:
			
Determines which ActivityEdges will realize the specified flow.


-eStructuralFeatures:realizingConnector:
			
Determines which Connectors will realize the specified flow.


-eStructuralFeatures:realizingMessage:
			
Determines which Messages will realize the specified flow.

----------------------------------------------------------------
:::eClassifiers:::InformationItem:
		
Inherits from: #//Classifier
An information item is an abstraction of all kinds of information that can be exchanged between objects. It is a kind of classifier intended for representing information in a very abstract way, one which cannot be instantiated.

-eOperations:has_no:
			
An informationItem has no feature, no generalization, and no associations.
self.generalization->isEmpty() and self.feature->isEmpty()


-eOperations:not_instantiable:
			
It is not instantiable.
isAbstract


-eOperations:sources_and_targets:
			
The sources and targets of an information item (its related information flows) must designate subsets of the sources and targets of the representation information item, if any.The Classifiers that can realize an information item can only be of the following kind: Class, Interface, InformationItem, Signal, Component.
(self.represented->select(p | p->oclIsKindOf(InformationItem))->forAll(p |
  p.informationFlow.source->forAll(q | self.informationFlow.source->include(q)) and
    p.informationFlow.target->forAll(q | self.informationFlow.target->include(q)))) and
      (self.represented->forAll(p | p->oclIsKindOf(Class) or oclIsKindOf(Interface) or
        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))


-eStructuralFeatures:represented:
			
Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.

----------------------------------------------------------------
:::eClassifiers:::InitialNode:
		
Inherits from: #//ControlNode
An initial node is a control node at which flow starts when the activity is invoked.

-eOperations:no_incoming_edges:
			
An initial node has no incoming edges.
true


-eOperations:control_edges:
			
Only control edges can have initial nodes as source.
true

----------------------------------------------------------------
:::eClassifiers:::InstanceValue:
		
Inherits from: #//ValueSpecification
An instance value is a value specification that identifies an instance.

-contents:stringValue:
			
true


-eStructuralFeatures:instance:
			
The instance that is the specified value.

----------------------------------------------------------------
:::eClassifiers:::JoinNode:
		
Inherits from: #//ControlNode
A join node is a control node that synchronizes multiple flows.
Join nodes have a Boolean value specification using the names of the incoming edges to specify the conditions under which the join will emit a token.

-eOperations:one_outgoing_edge:
			
A join node has one outgoing edge.
self.outgoing->size() = 1


-eOperations:incoming_object_flow:
			
If a join node has an incoming object flow, it must have an outgoing object flow, otherwise, it must have an outgoing control flow.
(self.incoming.select(e | e.isTypeOf(ObjectFlow)->notEmpty() implies
  self.outgoing.isTypeOf(ObjectFlow)) and
    (self.incoming.select(e | e.isTypeOf(ObjectFlow)->empty() implies
      self.outgoing.isTypeOf(ControlFlow))


-eStructuralFeatures:isCombineDuplicate:
			
Tells whether tokens having objects with the same identity are combined into one by the join.


-eStructuralFeatures:joinSpec:
			
A specification giving the conditions under which the join with emit a token. Default is "and".

----------------------------------------------------------------
:::eClassifiers:::LiteralBoolean:
		
Inherits from: #//LiteralSpecification
A literal Boolean is a specification of a Boolean value.

-contents:stringValue:
			
true


-contents:booleanValue:
			
The query booleanValue() gives the value.
result = value


-contents:isComputable:
			
The query isComputable() is redefined to be true.
result = true


-eStructuralFeatures:value:
			
The specified Boolean value.

----------------------------------------------------------------
:::eClassifiers:::LiteralSpecification:
		
Inherits from: #//ValueSpecification
A literal specification identifies a literal constant being modeled.
----------------------------------------------------------------
:::eClassifiers:::LiteralInteger:
		
Inherits from: #//LiteralSpecification
A literal integer is a specification of an integer value.

-contents:stringValue:
			
true


-contents:integerValue:
			
The query integerValue() gives the value.
result = value


-contents:isComputable:
			
The query isComputable() is redefined to be true.
result = true


-eStructuralFeatures:value:
			
The specified Integer value.

----------------------------------------------------------------
:::eClassifiers:::LiteralNull:
		
Inherits from: #//LiteralSpecification
A literal null specifies the lack of a value.

-contents:isComputable:
			
The query isComputable() is redefined to be true.
result = true


-contents:isNull:
			
The query isNull() returns true.
result = true

----------------------------------------------------------------
:::eClassifiers:::LiteralReal:
		
Inherits from: #//LiteralSpecification
A literal real is a specification of a real value.

-contents:stringValue:
			



-contents:isComputable:
			
The query isComputable() is redefined to be true.
result = true


-contents:realValue:
			
The query realValue() gives the value.
result = value

----------------------------------------------------------------
:::eClassifiers:::LiteralString:
		
Inherits from: #//LiteralSpecification
A literal string is a specification of a string value.

-contents:integerValue:
			
true


-contents:unlimitedValue:
			
true


-contents:isComputable:
			
The query isComputable() is redefined to be true.
result = true


-contents:stringValue:
			
The query stringValue() gives the value.
result = value


-eStructuralFeatures:value:
			
The specified String value.

----------------------------------------------------------------
:::eClassifiers:::LiteralUnlimitedNatural:
		
Inherits from: #//LiteralSpecification
A literal unlimited natural is a specification of an unlimited natural number.

-contents:stringValue:
			
true


-contents:isComputable:
			
The query isComputable() is redefined to be true.
result = true


-contents:unlimitedValue:
			
The query unlimitedValue() gives the value.
result = value


-eStructuralFeatures:value:
			
The specified UnlimitedNatural value.

----------------------------------------------------------------
:::eClassifiers:::LoopNode:
		
Inherits from: #//StructuredActivityNode
A loop node is a structured activity node that represents a loop with setup, test, and body sections.

-eOperations:executable_nodes:
			
The union of the ExecutableNodes in the setupPart, test and bodyPart of a LoopNode must be the same as the subset of nodes contained in the LoopNode (considered as a StructuredActivityNode) that are ExecutableNodes.
true


-eOperations:body_output_pins:
			
The bodyOutput pins are output pins on actions in the body of the loop node.
true


-eOperations:result_no_incoming:
			
The result output pins have no incoming edges.
true


-eOperations:input_edges:
			
Loop variable inputs must not have outgoing edges.
true


-eStructuralFeatures:bodyOutput:
			
A list of output pins within the body fragment the values of which are moved to the loop variable pins after completion of execution of the body, before the next iteration of the loop begins or before the loop exits.


-eStructuralFeatures:bodyPart:
			
The set of nodes and edges that perform the repetitive computations of the loop. The body section is executed as long as the test section produces a true value.


-eStructuralFeatures:decider:
			
An output pin within the test fragment the value of which is examined after execution of the test to determine whether to execute the loop body.


-eStructuralFeatures:isTestedFirst:
			
If true, the test is performed before the first execution of the body. If false, the body is executed once before the test is performed.


-eStructuralFeatures:loopVariable:
			
A list of output pins that hold the values of the loop variables during an execution of the loop. When the test fails, the values are movied to the result pins of the loop.


-eStructuralFeatures:loopVariableInput:
			
A list of values that are moved into the loop variable pins before the first iteration of the loop.


-eStructuralFeatures:result:
			
A list of output pins that constitute the data flow output of the entire loop.


-eStructuralFeatures:setupPart:
			
The set of nodes and edges that initialize values or perform other setup computations for the loop.


-eStructuralFeatures:test:
			
The set of nodes, edges, and designated value that compute a Boolean value to determine if another execution of the body will be performed.

----------------------------------------------------------------
:::eClassifiers:::MergeNode:
		
Inherits from: #//ControlNode
A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows.

-eOperations:one_outgoing_edge:
			
A merge node has one outgoing edge.
true


-eOperations:edges:
			
The edges coming into and out of a merge node must be either all object flows or all control flows.
true

----------------------------------------------------------------
:::eClassifiers:::OpaqueAction:
		
Inherits from: #//Action
An action with implementation-specific semantics.

-eStructuralFeatures:body:
			
Specifies the action in one or more languages.


-eStructuralFeatures:inputValue:
			
Provides input to the action.


-eStructuralFeatures:language:
			
Languages the body strings use, in the same order as the body strings


-eStructuralFeatures:outputValue:
			
Takes output from the action.

----------------------------------------------------------------
:::eClassifiers:::ProtocolTransition:
		
Inherits from: #//Transition
A protocol transition specifies a legal transition for an operation. Transitions of protocol state machines have the following information: a pre condition (guard), on trigger, and a post condition. Every protocol transition is associated to zero or one operation (referred BehavioralFeature) that belongs to the context classifier of the protocol state machine.

-eOperations:refers_to_operation:
			
If a protocol transition refers to an operation (i. e. has a call trigger corresponding to an operation), then that operation should apply to the context classifier of the state machine of the protocol transition.
true


-eOperations:associated_actions:
			
A protocol transition never has associated actions.
effect->isEmpty()


-eOperations:belongs_to_psm:
			
A protocol transition always belongs to a protocol state machine.
container.belongsToPSM()


-eOperations:getReferreds:
			
Missing derivation for ProtocolTransition::/referred : Operation
true


-eStructuralFeatures:postCondition:
			
Specifies the post condition of the transition which is the condition that should be obtained once the transition is triggered. This post condition is part of the post condition of the operation connected to the transition.


-eStructuralFeatures:preCondition:
			
Specifies the precondition of the transition. It specifies the condition that should be verified before triggering the transition. This guard condition added to the source state will be evaluated as part of the precondition of the operation referred by the transition if any.


-eStructuralFeatures:referred:
			
This association refers to the associated operation. It is derived from the operation of the call trigger when applicable.

----------------------------------------------------------------
:::eClassifiers:::RaiseExceptionAction:
		
Inherits from: #//Action
A raise exception action is an action that causes an exception to occur. The input value becomes the exception object.

-eStructuralFeatures:exception:
			
An input pin whose value becomes an exception object.

----------------------------------------------------------------
:::eClassifiers:::ReadExtentAction:
		
Inherits from: #//Action
A read extent action is an action that retrieves the current instances of a classifier.

-eOperations:type_is_classifier:
			
The type of the result output pin is the classifier.
true


-eOperations:multiplicity_of_result:
			
The multiplicity of the result output pin is 0..*.
self.result.multiplicity.is(0,#null)


-eStructuralFeatures:classifier:
			
The classifier whose instances are to be retrieved.


-eStructuralFeatures:result:
			
The runtime instances of the classifier.

----------------------------------------------------------------
:::eClassifiers:::ReadIsClassifiedObjectAction:
		
Inherits from: #//Action
A read is classified object action is an action that determines whether a runtime object is classified by a given classifier.

-eOperations:no_type:
			
The input pin has no type.
self.object.type->isEmpty()


-eOperations:multiplicity_of_output:
			
The multiplicity of the output pin is 1..1.
self.result.multiplicity.is(1,1)


-eOperations:boolean_result:
			
The type of the output pin is Boolean
self.result.type = Boolean


-eOperations:multiplicity_of_input:
			
The multiplicity of the input pin is 1..1.
self.object.multiplicity.is(1,1)


-eStructuralFeatures:classifier:
			
The classifier against which the classification of the input object is tested.


-eStructuralFeatures:isDirect:
			
Indicates whether the classifier must directly classify the input object.


-eStructuralFeatures:object:
			
Holds the object whose classification is to be tested.


-eStructuralFeatures:result:
			
After termination of the action, will hold the result of the test.

----------------------------------------------------------------
:::eClassifiers:::ReadLinkAction:
		
Inherits from: #//LinkAction
A read link action is a link action that navigates across associations to retrieve objects on one end.

-eOperations:type_and_ordering:
			
The type and ordering of the result output pin are same as the type and ordering of the open association end.
let openend : Property = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in
self.result.type = openend.type
and self.result.ordering = openend.ordering



-eOperations:one_open_end:
			
Exactly one link-end data specification (the 'open' end) must not have an end object input pin.
self.endData->select(ed | ed.value->size() = 0)->size() = 1


-eOperations:compatible_multiplicity:
			
The multiplicity of the open association end must be compatible with the multiplicity of the result output pin.
let openend : Property = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in
openend.multiplicity.compatibleWith(self.result.multiplicity)



-eOperations:navigable_open_end:
			
The open end must be navigable.
let openend : Property = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in
openend.isNavigable()



-eOperations:visibility:
			
Visibility of the open end must allow access to the object performing the action.
let host : Classifier = self.context in
let openend : Property = self.endData->select(ed | ed.value->size() = 0)->asSequence()->first().end in
openend.visibility = #public
or self.endData->exists(oed | not oed.end = openend
and (host = oed.end.participant
or (openend.visibility = #protected
and host.allSupertypes->includes(oed.end.participant))))



-eStructuralFeatures:result:
			
The pin on which are put the objects participating in the association at the end not specified by the inputs.

----------------------------------------------------------------
:::eClassifiers:::ReadLinkObjectEndAction:
		
Inherits from: #//Action
A read link object end action is an action that retrieves an end object from a link object.

-eOperations:association_of_association:
			
The association of the association end must be an association class.
self.end.Association.oclIsKindOf(AssociationClass)


-eOperations:multiplicity_of_object:
			
The multiplicity of the object input pin is 1..1.
self.object.multiplicity.is(1,1)


-eOperations:type_of_result:
			
The type of the result output pin is the same as the type of the association end.
self.result.type = self.end.type


-eOperations:type_of_object:
			
The type of the object input pin is the association class that owns the association end.
self.object.type = self.end.association


-eOperations:property:
			
The property must be an association end.
self.end.association.notEmpty()


-eOperations:multiplicity_of_result:
			
The multiplicity of the result output pin is 1..1.
self.result.multiplicity.is(1,1)


-eOperations:ends_of_association:
			
The ends of the association must not be static.
self.end.association.memberEnd->forall(e | not e.isStatic)


-eStructuralFeatures:end:
			
Link end to be read.


-eStructuralFeatures:object:
			
Gives the input pin from which the link object is obtained.


-eStructuralFeatures:result:
			
Pin where the result value is placed.

----------------------------------------------------------------
:::eClassifiers:::ReadLinkObjectEndQualifierAction:
		
Inherits from: #//Action
A read link object end qualifier action is an action that retrieves a qualifier end value from a link object.

-eOperations:type_of_object:
			
The type of the object input pin is the association class that owns the association end that has the given qualifier attribute.
self.object.type = self.qualifier.associationEnd.association


-eOperations:multiplicity_of_result:
			
The multiplicity of the result output pin is 1..1.
self.result.multiplicity.is(1,1)


-eOperations:same_type:
			
The type of the result output pin is the same as the type of the qualifier attribute.
self.result.type = self.qualifier.type


-eOperations:ends_of_association:
			
The ends of the association must not be static.
self.qualifier.associationEnd.association.memberEnd->forall(e | not e.isStatic)


-eOperations:multiplicity_of_qualifier:
			
The multiplicity of the qualifier attribute is 1..1.
self.qualifier.multiplicity.is(1,1)


-eOperations:multiplicity_of_object:
			
The multiplicity of the object input pin is 1..1.
self.object.multiplicity.is(1,1)


-eOperations:association_of_association:
			
The association of the association end of the qualifier attribute must be an association class.
self.qualifier.associationEnd.association.oclIsKindOf(AssociationClass)


-eOperations:qualifier_attribute:
			
The qualifier attribute must be a qualifier attribute of an association end.
self.qualifier.associationEnd->size() = 1


-eStructuralFeatures:object:
			
Gives the input pin from which the link object is obtained.


-eStructuralFeatures:qualifier:
			
The attribute representing the qualifier to be read.


-eStructuralFeatures:result:
			
Pin where the result value is placed.

----------------------------------------------------------------
:::eClassifiers:::ReadSelfAction:
		
Inherits from: #//Action
A read self action is an action that retrieves the host object of an action.

-eOperations:contained:
			
The action must be contained in an behavior that has a host classifier.
self.context->size() = 1


-eOperations:type:
			
The type of the result output pin is the host classifier.
self.result.type = self.context


-eOperations:not_static:
			
If the action is contained in an behavior that is acting as the body of a method, then the operation of the method must not be static.
true


-eOperations:multiplicity:
			
The multiplicity of the result output pin is 1..1.
self.result.multiplicity.is(1,1)


-eStructuralFeatures:result:
			
Gives the output pin on which the hosting object is placed.

----------------------------------------------------------------
:::eClassifiers:::ReadStructuralFeatureAction:
		
Inherits from: #//StructuralFeatureAction
A read structural feature action is a structural feature action that retrieves the values of a structural feature.

-contents:multiplicity:
			
The multiplicity of the structural feature must be compatible with the multiplicity of the output pin.
self.structuralFeature.multiplicity.compatibleWith(self.result.multiplicity)


-eOperations:type_and_ordering:
			
The type and ordering of the result output pin are the same as the type and ordering of the structural feature.
self.result.type = self.structuralFeature.type
and self.result.ordering = self.structuralFeature.ordering



-eStructuralFeatures:result:
			
Gives the output pin on which the result is put.

----------------------------------------------------------------
:::eClassifiers:::ReadVariableAction:
		
Inherits from: #//VariableAction
A read variable action is a variable action that retrieves the values of a variable.

-eOperations:type_and_ordering:
			
The type and ordering of the result output pin of a read-variable action are the same as the type and ordering of the variable.
self.result.type =self.variable.type
and self.result.ordering = self.variable.ordering



-eOperations:compatible_multiplicity:
			
The multiplicity of the variable must be compatible with the multiplicity of the output pin.
self.variable.multiplicity.compatibleWith(self.result.multiplicity)


-eStructuralFeatures:result:
			
Gives the output pin on which the result is put.

----------------------------------------------------------------
:::eClassifiers:::ReclassifyObjectAction:
		
Inherits from: #//Action
A reclassify object action is an action that changes which classifiers classify an object.

-eOperations:input_pin:
			
The input pin has no type.
self.argument.type->size() = 0


-eOperations:multiplicity:
			
The multiplicity of the input pin is 1..1.
self.argument.multiplicity.is(1,1)


-eOperations:classifier_not_abstract:
			
None of the new classifiers may be abstract.
not self.newClassifier->exists(isAbstract = true)


-eStructuralFeatures:isReplaceAll:
			
Specifies whether existing classifiers should be removed before adding the new classifiers.


-eStructuralFeatures:newClassifier:
			
A set of classifiers to be added to the classifiers of the object.


-eStructuralFeatures:object:
			
Holds the object to be reclassified.


-eStructuralFeatures:oldClassifier:
			
A set of classifiers to be removed from the classifiers of the object.

----------------------------------------------------------------
:::eClassifiers:::ReduceAction:
		
Inherits from: #//Action
A reduce action is an action that reduces a collection to a single value by combining the elements of the collection.

-eOperations:output_types_are_compatible:
			
The type of the output must be compatible with the type of the output of the reducer behavior.
true


-eOperations:reducer_inputs_output:
			
The reducer behavior must have two input parameters and one output parameter, of types compatible with the types of elements of the input collection.
true


-eOperations:input_type_is_collection:
			
The type of the input must be a collection.
true


-eStructuralFeatures:collection:
			
The collection to be reduced.


-eStructuralFeatures:isOrdered:
			
Tells whether the order of the input collection should determine the order in which the behavior is applied to its elements.


-eStructuralFeatures:reducer:
			
Behavior that is applied to two elements of the input collection to produce a value that is the same type as elements of the collection.


-eStructuralFeatures:result:
			
Gives the output pin on which the result is put.

----------------------------------------------------------------
:::eClassifiers:::RemoveStructuralFeatureValueAction:
		
Inherits from: #//WriteStructuralFeatureAction
A remove structural feature value action is a write structural feature action that removes values from structural features.

-eOperations:non_unique_removal:
			
Actions removing a value from ordered non-unique structural features must have a single removeAt input pin and no value input pin if isRemoveDuplicates is false. The removeAt pin must be of type Unlimited Natural with multiplicity 1..1. Otherwise, the action has a value input pin and no removeAt input pin.
if not self.structuralFeature.isOrdered or self.structuralFeature.isUnique or  isRemoveDuplicates then
  self.removeAt -> isEmpty() and self.value -> notEmpty()
else
  self.value -> isEmpty() and
  self.removeAt -> notEmpty() and
  self.removeAt.type = UnlimitedNatural and
  self.removeAt.lower = 1 and
  self.removeAt.upper = 1
endif


-eStructuralFeatures:isRemoveDuplicates:
			
Specifies whether to remove duplicates of the value in nonunique structural features.


-eStructuralFeatures:removeAt:
			
Specifies the position of an existing value to remove in ordered nonunique structural features. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.

----------------------------------------------------------------
:::eClassifiers:::RemoveVariableValueAction:
		
Inherits from: #//WriteVariableAction
A remove variable value action is a write variable action that removes values from variables.

-eOperations:unlimited_natural:
			
Actions removing a value from ordered non-unique variables must have a single removeAt input pin and no value input pin if isRemoveDuplicates is false. The removeAt pin must be of type Unlimited Natural with multiplicity 1..1. Otherwise, the action has a value input pin and no removeAt input pin.
if not self.variable.isOrdered or self.variable.isUnique or isRemoveDuplicates then 
  self.removeAt -> isEmpty() and self.value -> notEmpty()
else
  self.value -> isEmpty() and
  self.removeAt -> notEmpty() and
  self.removeAt.type = UnlimitedNatural and
  self.removeAt.lower() = 1 and
  self.removeAt.upper() = 1
endif


-eStructuralFeatures:isRemoveDuplicates:
			
Specifies whether to remove duplicates of the value in nonunique variables.


-eStructuralFeatures:removeAt:
			
Specifies the position of an existing value to remove in ordered nonunique variables. The type of the pin is UnlimitedNatural, but the value cannot be zero or unlimited.

----------------------------------------------------------------
:::eClassifiers:::ReplyAction:
		
Inherits from: #//Action
A reply action is an action that accepts a set of return values and a value containing return information produced by a previous accept call action. The reply action returns the values to the caller of the previous call, completing execution of the call.

-eOperations:event_on_reply_to_call_trigger:
			
The event on replyToCall trigger must be a CallEvent replyToCallEvent.oclIsKindOf(CallEvent)
replyToCallEvent.oclIsKindOf(CallEvent)


-eOperations:pins_match_parameter:
			
The reply value pins must match the return, out, and inout parameters of the operation on the event on the trigger in number, type, and order.
true


-eStructuralFeatures:replyToCall:
			
The trigger specifying the operation whose call is being replied to.


-eStructuralFeatures:replyValue:
			
A list of pins containing the reply values of the operation. These values are returned to the caller.


-eStructuralFeatures:returnInformation:
			
A pin containing the return information value produced by an earlier AcceptCallAction.

----------------------------------------------------------------
:::eClassifiers:::SendObjectAction:
		
Inherits from: #//InvocationAction
A send object action is an action that transmits an object to the target object, where it may invoke behavior such as the firing of state machine transitions or the execution of an activity. The value of the object is available to the execution of invoked behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor.

-eStructuralFeatures:request:
			
The request object, which is transmitted to the target object. The object may be copied in transmission, so identity might not be preserved.


-eStructuralFeatures:target:
			
The target object to which the object is sent.

----------------------------------------------------------------
:::eClassifiers:::SendSignalAction:
		
Inherits from: #//InvocationAction
A send signal action is an action that creates a signal instance from its inputs, and transmits it to the target object, where it may cause the firing of a state machine transition or the execution of an activity. The argument values are available to the execution of associated behaviors. The requestor continues execution immediately. Any reply message is ignored and is not transmitted to the requestor. If the input is already a signal instance, use a send object action.

-eOperations:type_ordering_multiplicity:
			
The type, ordering, and multiplicity of an argument pin must be the same as the corresponding attribute of the signal.
true


-eOperations:number_order:
			
The number and order of argument pins must be the same as the number and order of attributes in the signal.
true


-eStructuralFeatures:signal:
			
The type of signal transmitted to the target object.


-eStructuralFeatures:target:
			
The target object to which the signal is sent.

----------------------------------------------------------------
:::eClassifiers:::SequenceNode:
		
Inherits from: #//StructuredActivityNode
A sequence node is a structured activity node that executes its actions in order.

-eStructuralFeatures:executableNode:
			
An ordered set of executable nodes.

----------------------------------------------------------------
:::eClassifiers:::SignalEvent:
		
Inherits from: #//MessageEvent
A signal event represents the receipt of an asynchronous signal instance. A signal event may, for example, cause a state machine to trigger a transition.

-eStructuralFeatures:signal:
			
The specific signal that is associated with this event.

----------------------------------------------------------------
:::eClassifiers:::StartClassifierBehaviorAction:
		
Inherits from: #//Action
A start classifier behavior action is an action that starts the classifier behavior of the input.

-eOperations:type_has_classifier:
			
If the input pin has a type, then the type must have a classifier behavior.
true


-eOperations:multiplicity:
			
The multiplicity of the input pin is 1..1
true


-eStructuralFeatures:object:
			
Holds the object on which to start the owned behavior.

----------------------------------------------------------------
:::eClassifiers:::StartObjectBehaviorAction:
		
Inherits from: #//CallAction
StartObjectBehaviorAction is an action that starts the execution either of a directly instantiated behavior or of the classifier behavior of an object. Argument values may be supplied for the input parameters of the behavior. If the behavior is invoked synchronously, then output values may be obtained for output parameters.

-eOperations:number_order_arguments:
			
The number and order of the argument pins must be the same as the number and order of the in and in-out parameters of the invoked behavior. Pins are matched to parameters by order.
true


-eOperations:type_ordering_multiplicity_match:
			
The type, ordering, and multiplicity of an argument or result pin must be the same as the corresponding parameter of the behavior.
true


-eOperations:number_order_results:
			
The number and order of result pins must be the same as the number and order of the in-out, out and return parameters of the invoked behavior. Pins are matched to parameters by order.
true


-eOperations:type_of_object:
			
The type of the object input pin must be either a Behavior or a BehavioredClassifier with a classifier behavior.
true


-eOperations:multiplicity_of_object:
			
The multiplicity of the object input pin must be [1..1].
true


-eStructuralFeatures:object:
			
Holds the object which is either a behavior to be started or has a classifier behavior to be started.

----------------------------------------------------------------
:::eClassifiers:::StateInvariant:
		
Inherits from: #//InteractionFragment
A state invariant is a runtime constraint on the participants of the interaction. It may be used to specify a variety of different kinds of constraints, such as values of attributes or variables, internal or external states, and so on. A state invariant is an interaction fragment and it is placed on a lifeline.

-contents:covered:
			
References the Lifeline on which the StateInvariant appears.


-eStructuralFeatures:invariant:
			
A Constraint that should hold at runtime for this StateInvariant

----------------------------------------------------------------
:::eClassifiers:::TestIdentityAction:
		
Inherits from: #//Action
A test identity action is an action that tests if two values are identical objects.

-eOperations:multiplicity:
			
The multiplicity of the input pins is 1..1.
self.first.multiplicity.is(1,1)
and self.second.multiplicity.is(1,1)



-eOperations:no_type:
			
The input pins have no type.
self.first.type->size() = 0
and self.second.type->size() = 0



-eOperations:result_is_boolean:
			
The type of the result is the UML standard primitive type Boolean. (This is not directly representable in OCL at the metamodel level.)
true



-eStructuralFeatures:first:
			
Gives the pin on which an object is placed.


-eStructuralFeatures:result:
			
Tells whether the two input objects are identical.


-eStructuralFeatures:second:
			
Gives the pin on which an object is placed.

----------------------------------------------------------------
:::eClassifiers:::TimeConstraint:
		
Inherits from: #//IntervalConstraint
A time constraint is a constraint that refers to a time interval.

-contents:specification:
			
A condition that must be true when evaluated in order for the constraint to be satisfied.


-eStructuralFeatures:firstEvent:
			
The value of firstEvent is related to constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within constrainedElement.

----------------------------------------------------------------
:::eClassifiers:::TimeInterval:
		
Inherits from: #//Interval
A time interval defines the range between two time expressions.

-contents:max:
			
Refers to the TimeExpression denoting the maximum value of the range.


-contents:min:
			
Refers to the TimeExpression denoting the minimum value of the range.

----------------------------------------------------------------
:::eClassifiers:::TimeExpression:
		
Inherits from: #//ValueSpecification
A time expression defines a value specification that represents a time value.

-contents:stringValue:
			
true


-eStructuralFeatures:expr:
			
The value of the time expression.


-eStructuralFeatures:observation:
			
Refers to the time and duration observations that are involved in expr.

----------------------------------------------------------------
:::eClassifiers:::TimeEvent:
		
Inherits from: #//Event
A time event can be defined relative to entering the current state of the executing state machine.
A time event specifies a point in time. At the specified time, the event occurs.

-eOperations:starting_time:
			
The starting time for a relative time event may only be omitted for a time event that is the trigger of a state machine.
true


-eOperations:when_non_negative:
			
The ValueSpecification when must return a non-negative Integer.
true


-eStructuralFeatures:isRelative:
			
Specifies whether it is relative or absolute time.


-eStructuralFeatures:when:
			
Specifies the corresponding time deadline.

----------------------------------------------------------------
:::eClassifiers:::TimeObservation:
		
Inherits from: #//Observation
A time observation is a reference to a time instant during an execution. It points out the element in the model to observe and whether the observation is when this model element is entered or when it is exited.

-eStructuralFeatures:event:
			
The observation is determined by the entering or exiting of the event element during execution.


-eStructuralFeatures:firstEvent:
			
The value of firstEvent is related to event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters event. If firstEvent is false, then the corresponding observation event is the time instant the execution exits event.

----------------------------------------------------------------
:::eClassifiers:::UnmarshallAction:
		
Inherits from: #//Action
An unmarshall action is an action that breaks an object of a known type into outputs each of which is equal to a value from a structural feature of the object.

-eOperations:same_type:
			
The type of the object input pin must be the same as the unmarshall classifier.
true


-eOperations:structural_feature:
			
The unmarshall classifier must have at least one structural feature.
true


-eOperations:multiplicity_of_object:
			
The multiplicity of the object input pin is 1..1
true


-eOperations:type_and_ordering:
			
The type and ordering of each result output pin must be the same as the corresponding structural feature of the unmarshall classifier.
true


-eOperations:number_of_result:
			
The number of result output pins must be the same as the number of structural features of the unmarshall classifier.
true


-eOperations:unmarshallType_is_classifier:
			
unmarshallType must be a Classifier with ordered attributes
true


-eOperations:multiplicity_of_result:
			
The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding structural features of the unmarshall classifier.
true


-eStructuralFeatures:object:
			
The object to be unmarshalled.


-eStructuralFeatures:result:
			
The values of the structural features of the input object.


-eStructuralFeatures:unmarshallType:
			
The type of the object to be unmarshalled.

----------------------------------------------------------------
:::eClassifiers:::ValuePin:
		
Inherits from: #//InputPin
A value pin is an input pin that provides a value by evaluating a value specification.

-eOperations:compatible_type:
			
The type of value specification must be compatible with the type of the value pin.
true


-eOperations:no_incoming_edges:
			
Value pins have no incoming edges.
true


-eStructuralFeatures:value:
			
Value that the pin will provide.

----------------------------------------------------------------
:::eClassifiers:::ValueSpecificationAction:
		
Inherits from: #//Action
A value specification action is an action that evaluates a value specification.

-eOperations:multiplicity:
			
The multiplicity of the result pin is 1..1
true


-eOperations:compatible_type:
			
The type of value specification must be compatible with the type of the result pin.
true


-eStructuralFeatures:result:
			
Gives the output pin on which the result is put.


-eStructuralFeatures:value:
			
Value specification to be evaluated.

