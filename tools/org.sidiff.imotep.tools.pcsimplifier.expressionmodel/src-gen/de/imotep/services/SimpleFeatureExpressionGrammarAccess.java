/*
 * generated by Xtext 2.10.0
 */
package de.imotep.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimpleFeatureExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SimpleFeatureExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.imotep.SimpleFeatureExpression.SimpleFeatureExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNegAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNegNEGATIONTerminalRuleCall_1_0_0 = (RuleCall)cNegAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_1_1_0 = (RuleCall)cVarAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNegAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNegNEGATIONTerminalRuleCall_2_0_0 = (RuleCall)cNegAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBraExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBraExprBracedExpressionParserRuleCall_2_2_0 = (RuleCall)cBraExprAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBraExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBraExprBracedExpressionParserRuleCall_3_1_0 = (RuleCall)cBraExprAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//SimpleFeatureExpression:
		//	var=ID | neg=NEGATION var=ID | neg=NEGATION "(" braExpr=BracedExpression ")" |
		//	"(" braExpr=BracedExpression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//var=ID | neg=NEGATION var=ID | neg=NEGATION "(" braExpr=BracedExpression ")" | "(" braExpr=BracedExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }
		
		//neg=NEGATION var=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//neg=NEGATION
		public Assignment getNegAssignment_1_0() { return cNegAssignment_1_0; }
		
		//NEGATION
		public RuleCall getNegNEGATIONTerminalRuleCall_1_0_0() { return cNegNEGATIONTerminalRuleCall_1_0_0; }
		
		//var=ID
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }
		
		//ID
		public RuleCall getVarIDTerminalRuleCall_1_1_0() { return cVarIDTerminalRuleCall_1_1_0; }
		
		//neg=NEGATION "(" braExpr=BracedExpression ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//neg=NEGATION
		public Assignment getNegAssignment_2_0() { return cNegAssignment_2_0; }
		
		//NEGATION
		public RuleCall getNegNEGATIONTerminalRuleCall_2_0_0() { return cNegNEGATIONTerminalRuleCall_2_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//braExpr=BracedExpression
		public Assignment getBraExprAssignment_2_2() { return cBraExprAssignment_2_2; }
		
		//BracedExpression
		public RuleCall getBraExprBracedExpressionParserRuleCall_2_2_0() { return cBraExprBracedExpressionParserRuleCall_2_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//"(" braExpr=BracedExpression ")"
		public Group getGroup_3() { return cGroup_3; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//braExpr=BracedExpression
		public Assignment getBraExprAssignment_3_1() { return cBraExprAssignment_3_1; }
		
		//BracedExpression
		public RuleCall getBraExprBracedExpressionParserRuleCall_3_1_0() { return cBraExprBracedExpressionParserRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class BracedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.imotep.SimpleFeatureExpression.BracedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpr1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpr1SimpleFeatureExpressionParserRuleCall_0_0 = (RuleCall)cExpr1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpBINARY_OPEATORTerminalRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cExpr2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpr2SimpleFeatureExpressionParserRuleCall_1_1_0 = (RuleCall)cExpr2Assignment_1_1.eContents().get(0);
		
		//BracedExpression:
		//	expr1=SimpleFeatureExpression (op+=BINARY_OPEATOR expr2+=SimpleFeatureExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//expr1=SimpleFeatureExpression (op+=BINARY_OPEATOR expr2+=SimpleFeatureExpression)*
		public Group getGroup() { return cGroup; }
		
		//expr1=SimpleFeatureExpression
		public Assignment getExpr1Assignment_0() { return cExpr1Assignment_0; }
		
		//SimpleFeatureExpression
		public RuleCall getExpr1SimpleFeatureExpressionParserRuleCall_0_0() { return cExpr1SimpleFeatureExpressionParserRuleCall_0_0; }
		
		//(op+=BINARY_OPEATOR expr2+=SimpleFeatureExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=BINARY_OPEATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//BINARY_OPEATOR
		public RuleCall getOpBINARY_OPEATORTerminalRuleCall_1_0_0() { return cOpBINARY_OPEATORTerminalRuleCall_1_0_0; }
		
		//expr2+=SimpleFeatureExpression
		public Assignment getExpr2Assignment_1_1() { return cExpr2Assignment_1_1; }
		
		//SimpleFeatureExpression
		public RuleCall getExpr2SimpleFeatureExpressionParserRuleCall_1_1_0() { return cExpr2SimpleFeatureExpressionParserRuleCall_1_1_0; }
	}
	
	
	private final SimpleFeatureExpressionElements pSimpleFeatureExpression;
	private final BracedExpressionElements pBracedExpression;
	private final TerminalRule tNEGATION;
	private final TerminalRule tBINARY_OPEATOR;
	private final TerminalRule tWS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleFeatureExpressionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSimpleFeatureExpression = new SimpleFeatureExpressionElements();
		this.pBracedExpression = new BracedExpressionElements();
		this.tNEGATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.imotep.SimpleFeatureExpression.NEGATION");
		this.tBINARY_OPEATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.imotep.SimpleFeatureExpression.BINARY_OPEATOR");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.imotep.SimpleFeatureExpression.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.imotep.SimpleFeatureExpression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SimpleFeatureExpression:
	//	var=ID | neg=NEGATION var=ID | neg=NEGATION "(" braExpr=BracedExpression ")" |
	//	"(" braExpr=BracedExpression ")";
	public SimpleFeatureExpressionElements getSimpleFeatureExpressionAccess() {
		return pSimpleFeatureExpression;
	}
	
	public ParserRule getSimpleFeatureExpressionRule() {
		return getSimpleFeatureExpressionAccess().getRule();
	}
	
	//BracedExpression:
	//	expr1=SimpleFeatureExpression (op+=BINARY_OPEATOR expr2+=SimpleFeatureExpression)*;
	public BracedExpressionElements getBracedExpressionAccess() {
		return pBracedExpression;
	}
	
	public ParserRule getBracedExpressionRule() {
		return getBracedExpressionAccess().getRule();
	}
	
	//terminal NEGATION:
	//	"!";
	public TerminalRule getNEGATIONRule() {
		return tNEGATION;
	}
	
	//terminal BINARY_OPEATOR:
	//	"&&" | "||";
	public TerminalRule getBINARY_OPEATORRule() {
		return tBINARY_OPEATOR;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\n' | '\r'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
