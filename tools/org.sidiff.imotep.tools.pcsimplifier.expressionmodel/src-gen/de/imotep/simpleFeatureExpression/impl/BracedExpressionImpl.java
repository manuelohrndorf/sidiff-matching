/**
 * generated by Xtext 2.10.0
 */
package de.imotep.simpleFeatureExpression.impl;

import de.imotep.simpleFeatureExpression.BracedExpression;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpression;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpressionPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Braced Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.imotep.simpleFeatureExpression.impl.BracedExpressionImpl#getExpr1 <em>Expr1</em>}</li>
 *   <li>{@link de.imotep.simpleFeatureExpression.impl.BracedExpressionImpl#getOp <em>Op</em>}</li>
 *   <li>{@link de.imotep.simpleFeatureExpression.impl.BracedExpressionImpl#getExpr2 <em>Expr2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BracedExpressionImpl extends MinimalEObjectImpl.Container implements BracedExpression
{
  /**
   * The cached value of the '{@link #getExpr1() <em>Expr1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr1()
   * @generated
   * @ordered
   */
  protected SimpleFeatureExpression expr1;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected EList<String> op;

  /**
   * The cached value of the '{@link #getExpr2() <em>Expr2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr2()
   * @generated
   * @ordered
   */
  protected EList<SimpleFeatureExpression> expr2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BracedExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimpleFeatureExpressionPackage.Literals.BRACED_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleFeatureExpression getExpr1()
  {
    return expr1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr1(SimpleFeatureExpression newExpr1, NotificationChain msgs)
  {
    SimpleFeatureExpression oldExpr1 = expr1;
    expr1 = newExpr1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1, oldExpr1, newExpr1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpr1(SimpleFeatureExpression newExpr1)
  {
    if (newExpr1 != expr1)
    {
      NotificationChain msgs = null;
      if (expr1 != null)
        msgs = ((InternalEObject)expr1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1, null, msgs);
      if (newExpr1 != null)
        msgs = ((InternalEObject)newExpr1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1, null, msgs);
      msgs = basicSetExpr1(newExpr1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1, newExpr1, newExpr1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getOp()
  {
    if (op == null)
    {
      op = new EDataTypeEList<String>(String.class, this, SimpleFeatureExpressionPackage.BRACED_EXPRESSION__OP);
    }
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SimpleFeatureExpression> getExpr2()
  {
    if (expr2 == null)
    {
      expr2 = new EObjectContainmentEList<SimpleFeatureExpression>(SimpleFeatureExpression.class, this, SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR2);
    }
    return expr2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1:
        return basicSetExpr1(null, msgs);
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR2:
        return ((InternalEList<?>)getExpr2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1:
        return getExpr1();
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__OP:
        return getOp();
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR2:
        return getExpr2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1:
        setExpr1((SimpleFeatureExpression)newValue);
        return;
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__OP:
        getOp().clear();
        getOp().addAll((Collection<? extends String>)newValue);
        return;
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR2:
        getExpr2().clear();
        getExpr2().addAll((Collection<? extends SimpleFeatureExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1:
        setExpr1((SimpleFeatureExpression)null);
        return;
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__OP:
        getOp().clear();
        return;
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR2:
        getExpr2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR1:
        return expr1 != null;
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__OP:
        return op != null && !op.isEmpty();
      case SimpleFeatureExpressionPackage.BRACED_EXPRESSION__EXPR2:
        return expr2 != null && !expr2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (op: ");
    result.append(op);
    result.append(')');
    return result.toString();
  }

} //BracedExpressionImpl
