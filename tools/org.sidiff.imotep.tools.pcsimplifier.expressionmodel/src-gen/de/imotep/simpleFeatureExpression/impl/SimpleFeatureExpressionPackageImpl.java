/**
 * generated by Xtext 2.10.0
 */
package de.imotep.simpleFeatureExpression.impl;

import de.imotep.simpleFeatureExpression.BracedExpression;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpression;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpressionFactory;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpressionPackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpleFeatureExpressionPackageImpl extends EPackageImpl implements SimpleFeatureExpressionPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleFeatureExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass bracedExpressionEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see de.imotep.simpleFeatureExpression.SimpleFeatureExpressionPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SimpleFeatureExpressionPackageImpl()
  {
    super(eNS_URI, SimpleFeatureExpressionFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link SimpleFeatureExpressionPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SimpleFeatureExpressionPackage init()
  {
    if (isInited) return (SimpleFeatureExpressionPackage)EPackage.Registry.INSTANCE.getEPackage(SimpleFeatureExpressionPackage.eNS_URI);

    // Obtain or create and register package
    SimpleFeatureExpressionPackageImpl theSimpleFeatureExpressionPackage = (SimpleFeatureExpressionPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof SimpleFeatureExpressionPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new SimpleFeatureExpressionPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theSimpleFeatureExpressionPackage.createPackageContents();

    // Initialize created meta-data
    theSimpleFeatureExpressionPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSimpleFeatureExpressionPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SimpleFeatureExpressionPackage.eNS_URI, theSimpleFeatureExpressionPackage);
    return theSimpleFeatureExpressionPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSimpleFeatureExpression()
  {
    return simpleFeatureExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSimpleFeatureExpression_Var()
  {
    return (EAttribute)simpleFeatureExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSimpleFeatureExpression_Neg()
  {
    return (EAttribute)simpleFeatureExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSimpleFeatureExpression_BraExpr()
  {
    return (EReference)simpleFeatureExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getBracedExpression()
  {
    return bracedExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBracedExpression_Expr1()
  {
    return (EReference)bracedExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getBracedExpression_Op()
  {
    return (EAttribute)bracedExpressionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getBracedExpression_Expr2()
  {
    return (EReference)bracedExpressionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleFeatureExpressionFactory getSimpleFeatureExpressionFactory()
  {
    return (SimpleFeatureExpressionFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    simpleFeatureExpressionEClass = createEClass(SIMPLE_FEATURE_EXPRESSION);
    createEAttribute(simpleFeatureExpressionEClass, SIMPLE_FEATURE_EXPRESSION__VAR);
    createEAttribute(simpleFeatureExpressionEClass, SIMPLE_FEATURE_EXPRESSION__NEG);
    createEReference(simpleFeatureExpressionEClass, SIMPLE_FEATURE_EXPRESSION__BRA_EXPR);

    bracedExpressionEClass = createEClass(BRACED_EXPRESSION);
    createEReference(bracedExpressionEClass, BRACED_EXPRESSION__EXPR1);
    createEAttribute(bracedExpressionEClass, BRACED_EXPRESSION__OP);
    createEReference(bracedExpressionEClass, BRACED_EXPRESSION__EXPR2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(simpleFeatureExpressionEClass, SimpleFeatureExpression.class, "SimpleFeatureExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSimpleFeatureExpression_Var(), ecorePackage.getEString(), "var", null, 0, 1, SimpleFeatureExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSimpleFeatureExpression_Neg(), ecorePackage.getEString(), "neg", null, 0, 1, SimpleFeatureExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSimpleFeatureExpression_BraExpr(), this.getBracedExpression(), null, "braExpr", null, 0, 1, SimpleFeatureExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(bracedExpressionEClass, BracedExpression.class, "BracedExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getBracedExpression_Expr1(), this.getSimpleFeatureExpression(), null, "expr1", null, 0, 1, BracedExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBracedExpression_Op(), ecorePackage.getEString(), "op", null, 0, -1, BracedExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBracedExpression_Expr2(), this.getSimpleFeatureExpression(), null, "expr2", null, 0, -1, BracedExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //SimpleFeatureExpressionPackageImpl
