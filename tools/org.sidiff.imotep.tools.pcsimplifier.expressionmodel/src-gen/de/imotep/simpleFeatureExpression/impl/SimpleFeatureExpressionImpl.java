/**
 * generated by Xtext 2.10.0
 */
package de.imotep.simpleFeatureExpression.impl;

import de.imotep.simpleFeatureExpression.BracedExpression;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpression;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpressionPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simple Feature Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.imotep.simpleFeatureExpression.impl.SimpleFeatureExpressionImpl#getVar <em>Var</em>}</li>
 *   <li>{@link de.imotep.simpleFeatureExpression.impl.SimpleFeatureExpressionImpl#getNeg <em>Neg</em>}</li>
 *   <li>{@link de.imotep.simpleFeatureExpression.impl.SimpleFeatureExpressionImpl#getBraExpr <em>Bra Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimpleFeatureExpressionImpl extends MinimalEObjectImpl.Container implements SimpleFeatureExpression
{
  /**
   * The default value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected static final String VAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected String var = VAR_EDEFAULT;

  /**
   * The default value of the '{@link #getNeg() <em>Neg</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeg()
   * @generated
   * @ordered
   */
  protected static final String NEG_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNeg() <em>Neg</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNeg()
   * @generated
   * @ordered
   */
  protected String neg = NEG_EDEFAULT;

  /**
   * The cached value of the '{@link #getBraExpr() <em>Bra Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBraExpr()
   * @generated
   * @ordered
   */
  protected BracedExpression braExpr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleFeatureExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimpleFeatureExpressionPackage.Literals.SIMPLE_FEATURE_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVar(String newVar)
  {
    String oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNeg()
  {
    return neg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNeg(String newNeg)
  {
    String oldNeg = neg;
    neg = newNeg;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__NEG, oldNeg, neg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BracedExpression getBraExpr()
  {
    return braExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBraExpr(BracedExpression newBraExpr, NotificationChain msgs)
  {
    BracedExpression oldBraExpr = braExpr;
    braExpr = newBraExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR, oldBraExpr, newBraExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBraExpr(BracedExpression newBraExpr)
  {
    if (newBraExpr != braExpr)
    {
      NotificationChain msgs = null;
      if (braExpr != null)
        msgs = ((InternalEObject)braExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR, null, msgs);
      if (newBraExpr != null)
        msgs = ((InternalEObject)newBraExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR, null, msgs);
      msgs = basicSetBraExpr(newBraExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR, newBraExpr, newBraExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR:
        return basicSetBraExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__VAR:
        return getVar();
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__NEG:
        return getNeg();
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR:
        return getBraExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__VAR:
        setVar((String)newValue);
        return;
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__NEG:
        setNeg((String)newValue);
        return;
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR:
        setBraExpr((BracedExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__VAR:
        setVar(VAR_EDEFAULT);
        return;
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__NEG:
        setNeg(NEG_EDEFAULT);
        return;
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR:
        setBraExpr((BracedExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__VAR:
        return VAR_EDEFAULT == null ? var != null : !VAR_EDEFAULT.equals(var);
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__NEG:
        return NEG_EDEFAULT == null ? neg != null : !NEG_EDEFAULT.equals(neg);
      case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION__BRA_EXPR:
        return braExpr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (var: ");
    result.append(var);
    result.append(", neg: ");
    result.append(neg);
    result.append(')');
    return result.toString();
  }

} //SimpleFeatureExpressionImpl
