/*
 * generated by Xtext 2.10.0
 */
grammar InternalSimpleFeatureExpression;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.imotep.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.imotep.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.imotep.services.SimpleFeatureExpressionGrammarAccess;

}

@parser::members {

 	private SimpleFeatureExpressionGrammarAccess grammarAccess;

    public InternalSimpleFeatureExpressionParser(TokenStream input, SimpleFeatureExpressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SimpleFeatureExpression";
   	}

   	@Override
   	protected SimpleFeatureExpressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSimpleFeatureExpression
entryRuleSimpleFeatureExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleFeatureExpressionRule()); }
	iv_ruleSimpleFeatureExpression=ruleSimpleFeatureExpression
	{ $current=$iv_ruleSimpleFeatureExpression.current; }
	EOF;

// Rule SimpleFeatureExpression
ruleSimpleFeatureExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0=RULE_ID
				{
					newLeafNode(lv_var_0_0, grammarAccess.getSimpleFeatureExpressionAccess().getVarIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleFeatureExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"var",
						lv_var_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					lv_neg_1_0=RULE_NEGATION
					{
						newLeafNode(lv_neg_1_0, grammarAccess.getSimpleFeatureExpressionAccess().getNegNEGATIONTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSimpleFeatureExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"neg",
							lv_neg_1_0,
							"de.imotep.SimpleFeatureExpression.NEGATION");
					}
				)
			)
			(
				(
					lv_var_2_0=RULE_ID
					{
						newLeafNode(lv_var_2_0, grammarAccess.getSimpleFeatureExpressionAccess().getVarIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSimpleFeatureExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"var",
							lv_var_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_neg_3_0=RULE_NEGATION
					{
						newLeafNode(lv_neg_3_0, grammarAccess.getSimpleFeatureExpressionAccess().getNegNEGATIONTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSimpleFeatureExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"neg",
							lv_neg_3_0,
							"de.imotep.SimpleFeatureExpression.NEGATION");
					}
				)
			)
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getSimpleFeatureExpressionAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleFeatureExpressionAccess().getBraExprBracedExpressionParserRuleCall_2_2_0());
					}
					lv_braExpr_5_0=ruleBracedExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleFeatureExpressionRule());
						}
						set(
							$current,
							"braExpr",
							lv_braExpr_5_0,
							"de.imotep.SimpleFeatureExpression.BracedExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getSimpleFeatureExpressionAccess().getRightParenthesisKeyword_2_3());
			}
		)
		    |
		(
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getSimpleFeatureExpressionAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleFeatureExpressionAccess().getBraExprBracedExpressionParserRuleCall_3_1_0());
					}
					lv_braExpr_8_0=ruleBracedExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleFeatureExpressionRule());
						}
						set(
							$current,
							"braExpr",
							lv_braExpr_8_0,
							"de.imotep.SimpleFeatureExpression.BracedExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getSimpleFeatureExpressionAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleBracedExpression
entryRuleBracedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBracedExpressionRule()); }
	iv_ruleBracedExpression=ruleBracedExpression
	{ $current=$iv_ruleBracedExpression.current; }
	EOF;

// Rule BracedExpression
ruleBracedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBracedExpressionAccess().getExpr1SimpleFeatureExpressionParserRuleCall_0_0());
				}
				lv_expr1_0_0=ruleSimpleFeatureExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBracedExpressionRule());
					}
					set(
						$current,
						"expr1",
						lv_expr1_0_0,
						"de.imotep.SimpleFeatureExpression.SimpleFeatureExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_op_1_0=RULE_BINARY_OPEATOR
					{
						newLeafNode(lv_op_1_0, grammarAccess.getBracedExpressionAccess().getOpBINARY_OPEATORTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBracedExpressionRule());
						}
						addWithLastConsumed(
							$current,
							"op",
							lv_op_1_0,
							"de.imotep.SimpleFeatureExpression.BINARY_OPEATOR");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBracedExpressionAccess().getExpr2SimpleFeatureExpressionParserRuleCall_1_1_0());
					}
					lv_expr2_2_0=ruleSimpleFeatureExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBracedExpressionRule());
						}
						add(
							$current,
							"expr2",
							lv_expr2_2_0,
							"de.imotep.SimpleFeatureExpression.SimpleFeatureExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

RULE_NEGATION : '!';

RULE_BINARY_OPEATOR : ('&&'|'||');

RULE_WS : (' '|'\t'|'\n'|'\r')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;
