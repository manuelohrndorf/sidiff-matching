/*
 * generated by Xtext 2.10.0
 */
package de.imotep.serializer;

import com.google.inject.Inject;
import de.imotep.services.SimpleFeatureExpressionGrammarAccess;
import de.imotep.simpleFeatureExpression.BracedExpression;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpression;
import de.imotep.simpleFeatureExpression.SimpleFeatureExpressionPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class SimpleFeatureExpressionSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleFeatureExpressionGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimpleFeatureExpressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimpleFeatureExpressionPackage.BRACED_EXPRESSION:
				sequence_BracedExpression(context, (BracedExpression) semanticObject); 
				return; 
			case SimpleFeatureExpressionPackage.SIMPLE_FEATURE_EXPRESSION:
				sequence_SimpleFeatureExpression(context, (SimpleFeatureExpression) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BracedExpression returns BracedExpression
	 *
	 * Constraint:
	 *     (expr1=SimpleFeatureExpression (op+=BINARY_OPEATOR expr2+=SimpleFeatureExpression)*)
	 */
	protected void sequence_BracedExpression(ISerializationContext context, BracedExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleFeatureExpression returns SimpleFeatureExpression
	 *
	 * Constraint:
	 *     (var=ID | (neg=NEGATION var=ID) | (neg=NEGATION braExpr=BracedExpression) | braExpr=BracedExpression)
	 */
	protected void sequence_SimpleFeatureExpression(ISerializationContext context, SimpleFeatureExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
